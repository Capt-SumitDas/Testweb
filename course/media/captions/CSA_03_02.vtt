WEBVTT

00:00:01.337 --> 00:00:03.800
Object Linking and Embedding

00:00:04.691 --> 00:00:08.491
Another popular client-side
attack against Microsoft Office

00:00:08.491 --> 00:00:12.925
abuses Dynamic Data Exchange, or DDE,

00:00:12.937 --> 00:00:17.737
to execute arbitrary applications
from within Office documents,

00:00:17.750 --> 00:00:21.850
but this has been patched
since December of 2017.


00:00:22.450 --> 00:00:24.950
However, we can still leverage OLE

00:00:24.950 --> 00:00:28.850
to abuse Microsoft Office’s
document-embedding feature.

00:00:37.625 --> 00:00:40.491
Windows batch files are an older format,

00:00:40.491 --> 00:00:44.691
often replaced by more modern
Windows native scripting languages

00:00:44.691 --> 00:00:47.558
such as VBScript and PowerShell.

00:00:55.116 --> 00:01:00.216
However, batch scripts are still
fully functional even on Windows 10

00:01:00.216 --> 00:01:03.450
and can be used to
execute applications.

00:01:04.262 --> 00:01:08.329
We will create an initial
proof-of-concept batch script,

00:01:08.329 --> 00:01:12.429
launch.bat, that launches cmd.exe.

00:01:13.483 --> 00:01:17.750
To insert this script into a
document, we'll open Microsoft Word,

00:01:28.191 --> 00:01:30.058
create a new document,

00:01:30.904 --> 00:01:32.970
navigate to the Insert ribbon,

00:01:33.870 --> 00:01:36.404
and click the Object menu.

00:01:41.191 --> 00:01:44.658
From here, we will choose
the Create from File tab

00:01:44.670 --> 00:01:48.037
and select our newly-created batch script.

00:01:55.750 --> 00:01:59.983
We can also change the appearance of the
batch file within the Word document

00:01:59.983 --> 00:02:02.183
to make it look more benign.

00:02:05.104 --> 00:02:09.137
To do this, we will recreate
our .bat file link.

00:02:18.729 --> 00:02:25.229
This time, before we click ‘OK’, we simply
check the ‘Display as icon’ check box,

00:02:26.050 --> 00:02:29.883
which brings up the menu box,
allowing us to make changes.

00:02:32.670 --> 00:02:35.137
Even though this is an
embedded batch file,

00:02:35.137 --> 00:02:40.437
Microsoft allows us to pick a different
icon for it and enter a caption,

00:02:40.450 --> 00:02:45.016
which is what the victim will see,
rather than the actual file name.

00:03:05.383 --> 00:03:12.450
We choose the icon for Microsoft
Excel along with a name of ReadMe.xls

00:03:12.450 --> 00:03:18.083
to fully mask the batch file in an
attempt to lower the victim’s suspicions.

00:03:18.558 --> 00:03:20.225
After accepting the menu options,

00:03:20.225 --> 00:03:23.558
the batch file is embedded in
the Microsoft Word document.

00:03:46.250 --> 00:03:49.250
Next, the victim must be
tricked into double-clicking it,

00:03:49.250 --> 00:03:51.516
and accepting the security warning.

00:04:02.783 --> 00:04:07.583
As soon as the victim accepts the
warning, cmd.exe is launched.

00:04:22.504 --> 00:04:28.670
Although this grants command execution our
ultimate goal is to leverage PowerShell,

00:04:28.670 --> 00:04:30.804
which is a more elegant solution.

00:04:31.316 --> 00:04:35.950
This time, the conversion is very simple,
and we can simply change cmd.exe

00:04:35.950 --> 00:04:42.116
to the previously-used Base64-encoded
invocation of PowerShell.

00:05:05.991 --> 00:05:08.858
In oder for our edited batch
file to be executed,

00:05:08.858 --> 00:05:14.458
we must re-embed it into our
docment with a new object.

00:06:12.916 --> 00:06:18.150
Before executing our batch file we once
again establish our netcat listener.

00:06:36.216 --> 00:06:41.750
After embedding the updated batch file,
double-clicking our ‘ReadMe.doc’ file,

00:06:43.325 --> 00:06:46.225
and clicking through the
resultant warning,

00:06:46.225 --> 00:06:51.358
we receive a working reverse shell
in our waiting NetCat listener.

00:07:04.812 --> 00:07:05.612
Nice.
