WEBVTT

00:00:01.300 --> 00:00:03.434
Microsoft Word Macro

00:00:04.510 --> 00:00:08.976
The Microsoft Word macro may be one
of the oldest and best-known

00:00:08.976 --> 00:00:11.776
client-side software attack vectors.

00:00:13.198 --> 00:00:18.698
Microsoft Office applications like Word
and Excel allow users to embed macros,

00:00:18.698 --> 00:00:21.664
a series of commands and instructions

00:00:21.676 --> 00:00:26.376
that are grouped together to
programmatically accomplish a task.

00:00:27.031 --> 00:00:31.431
Organizations often use macros
to manage dynamic content

00:00:31.443 --> 00:00:34.710
and link documents with external content.

00:00:43.555 --> 00:00:46.855
More interestingly, macros can
be written from scratch

00:00:46.855 --> 00:00:50.355
in Visual Basic for Applications or VBA,

00:00:50.355 --> 00:00:53.722
which is a fully functioning
scripting language

00:00:53.722 --> 00:00:56.288
with full access to ActiveX objects

00:00:56.288 --> 00:01:02.155
and the Windows Script Host, similar
to JavaScript in HTML Applications.

00:01:02.710 --> 00:01:06.643
Creating a Microsoft Word macro is as
simple as choosing the VIEW ribbon

00:01:06.643 --> 00:01:09.043
and selecting Macros.

00:01:10.476 --> 00:01:13.576
To begin, we enter a name for the macro.

00:01:22.710 --> 00:01:24.210
When we click Create,

00:01:24.210 --> 00:01:28.043
a simple macro framework
will be inserted into our document.

00:01:28.876 --> 00:01:31.976
Let’s examine our simple macro
and discuss the fundamentals

00:01:31.976 --> 00:01:34.410
of Visual Basic for Applications.

00:01:35.410 --> 00:01:38.343
The main procedure
used in our VBA macro

00:01:38.343 --> 00:01:42.710
begins with the “Sub” keyword
and ends with “End Sub”.

00:01:44.464 --> 00:01:47.264
This essentially marks the
body of our macro.

00:01:47.910 --> 00:01:50.843
At this point, our new macro, MyMacro

00:01:50.843 --> 00:01:56.076
is simply an empty procedure and several
lines beginning with an apostrophe,

00:01:56.076 --> 00:01:57.543
which are comments.

00:01:58.064 --> 00:02:02.998
To invoke the Windows Scripting
Host through ActiveX as we did earlier,

00:02:02.998 --> 00:02:09.598
we can use the CreateObject function along
with the Wscript.Shell Run method,

00:02:09.598 --> 00:02:11.998
which we will insert into our macro.

00:02:14.222 --> 00:02:17.388
Since Office macros are not
executed automatically,

00:02:17.388 --> 00:02:23.655
we must make use of two predefined 
procedures, namely the AutoOpen procedure,

00:02:23.931 --> 00:02:28.764
which is executed when a new document is
opened, and Document Open,

00:02:28.764 --> 00:02:33.398
which is executed when an already-open
document is re-opened.

00:02:34.310 --> 00:02:38.943
Both of these procedures can call our
custom procedure and run our code.

00:02:40.564 --> 00:02:47.164
We must save the containing document as
either .docm or the older .doc format

00:02:47.176 --> 00:02:52.310
which supports embedded macros, but
must avoid the .docx format

00:02:52.310 --> 00:02:53.943
which does not support them.

00:03:19.510 --> 00:03:22.243
When we reopen the document
containing our macro,

00:03:22.243 --> 00:03:24.710
we will be presented with
a security warning,

00:03:24.710 --> 00:03:27.543
indicating that macros
have been disabled.

00:03:28.155 --> 00:03:32.155
In order to run the macro, the default
security setting of Microsoft Office 

00:03:32.155 --> 00:03:35.655
dictates that we must
click Enable Content.

00:03:36.276 --> 00:03:40.743
While macros can certainly be disabled in
an attempt to guard against this attack,

00:03:40.743 --> 00:03:45.010
they are often enabled as they are
commonly used in most environments.

00:03:45.510 --> 00:03:47.076
Once we click Enable Content,

00:03:47.076 --> 00:03:50.376
the macro will execute and a
command prompt will open.

00:03:51.031 --> 00:03:55.398
If the user does not click Enable 
Content, the attack will fail.

00:03:55.988 --> 00:04:00.688
To overcome this, the victim must be
unaware of the potential consequences

00:04:00.688 --> 00:04:04.522
or be sufficiently encouraged by the
presentation of the document

00:04:04.522 --> 00:04:06.055
to click this button.

00:04:06.528 --> 00:04:11.161
As with the initial HTML Application,
command execution is a start,

00:04:11.161 --> 00:04:14.395
but a reverse shell would
be much better.

00:04:17.331 --> 00:04:20.498
To that end, we will once
again turn to PowerShell

00:04:20.498 --> 00:04:24.431
and reuse the ability to execute
our Metasploit shellcode

00:04:24.431 --> 00:04:27.464
using a Base64-encoded string.

00:04:28.164 --> 00:04:32.498
To make this happen, we will declare
a variable, Dim, of type String

00:04:32.510 --> 00:04:35.910
containing the PowerShell
command we wish to execute.

00:04:46.622 --> 00:04:51.288
We will add a line to reserve space for
our string variable in our macro:

00:04:56.110 --> 00:05:02.443
We could embed the base64-encoded 
PowerShell script as a single String,

00:05:02.443 --> 00:05:07.110
but VBA has a 255-character
limit for literal strings.

00:05:07.855 --> 00:05:11.288
This restriction does not apply
to strings stored in variables,

00:05:11.288 --> 00:05:15.522
so we can split the command into
multiple lines and concatenate them.

00:05:18.176 --> 00:05:21.576
We will use a simple Python
script to split our command.

00:05:24.331 --> 00:05:27.131
We will paste the Powershell
code from the .hta file

00:05:27.131 --> 00:05:29.098
we created earlier
in this module.

00:05:29.743 --> 00:05:31.943
And save our script.

00:05:40.143 --> 00:05:44.510
Now we’ll run our script and
pipe the output it into xclip

00:05:44.510 --> 00:05:47.910
to send the split powershell
command to our clipboard.

00:05:54.522 --> 00:05:58.288
Having split the Base64 encoded
string into smaller chunks,

00:05:58.288 --> 00:06:01.455
we can update and
execute our exploit.

00:06:02.231 --> 00:06:05.831
But first let’s re-establish
our netcat listener.

00:06:09.598 --> 00:06:12.398
Then edit our macro again.

00:06:29.452 --> 00:06:31.085
Saving the Word document,

00:06:31.085 --> 00:06:35.652
closing it, and reopening it will
automatically execute the macro.

00:06:50.210 --> 00:06:53.143
Notice that the macro security
warning only re-appears

00:06:53.143 --> 00:06:55.710
if the name of the
document is changed.

00:07:00.910 --> 00:07:04.943
In our Netcat listener, we see
that the macro works flawlessly,

00:07:07.676 --> 00:07:10.710
And results in a working reverse shell.

00:07:11.152 --> 00:07:12.219
Excellent.
