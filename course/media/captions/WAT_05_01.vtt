WEBVTT

00:00:01.300 --> 00:00:02.900
Burp Suite Intruder

00:00:04.366 --> 00:00:07.200
Since the default credentials
didn’t seem to work

00:00:07.200 --> 00:00:09.500
and blank passwords aren’t allowed,

00:00:09.500 --> 00:00:12.000
let’s try to automate some basic

00:00:12.000 --> 00:00:17.333
username and password combinations
with Burp Suite’s Intruder tool.

00:00:18.100 --> 00:00:21.966
Let’s send a few manual login
attempts from our browser.

00:00:32.166 --> 00:00:34.200
Now let’s switch back to Burp Suite

00:00:34.200 --> 00:00:38.433
and look at the request and
corresponding response for a login.

00:00:54.766 --> 00:00:56.400
Based on the server response,

00:00:56.400 --> 00:00:59.733
this test may not be
straightforward as it seems

00:00:59.733 --> 00:01:02.500
since we have several
factors to contend with.

00:01:03.266 --> 00:01:05.100
As we can see from the requests,

00:01:05.100 --> 00:01:10.800
the login form includes a token to prevent
brute forcing and other attacks.

00:01:11.600 --> 00:01:14.533
In addition, we can see that the form sets a

00:01:14.533 --> 00:01:19.200
set_session parameter which
is unique for each request.

00:01:20.100 --> 00:01:22.233
If we change the set_session parameter

00:01:22.233 --> 00:01:26.233
and it doesn’t match the value
of the phpMyAdmin cookie,

00:01:26.233 --> 00:01:28.366
the site will return an error.

00:01:29.700 --> 00:01:32.666
If we look at the HTML source
for the login form,

00:01:38.633 --> 00:01:44.200
we will find the new set_session and
token values are included in the response.

00:01:45.214 --> 00:01:47.600
In order to overcome
this protective measure,

00:01:47.600 --> 00:01:49.533
and ensure the values match,

00:01:49.533 --> 00:01:52.333
we can automate the request with Intruder.

00:01:52.691 --> 00:01:57.766
However, we must first submit a login
request for Intruder to analyze.

00:01:58.100 --> 00:02:01.566
We can do this by right-clicking
on the POST request

00:02:01.566 --> 00:02:06.566
to “index.php” and then
selecting Send to Intruder.

00:02:08.685 --> 00:02:11.000
Now, when we click on the Intruder tab,

00:02:11.000 --> 00:02:15.366
we discover that it contains
multiple request sub-tabs.

00:02:15.802 --> 00:02:19.233
Under these, we will find
four additional sub-tabs:

00:02:19.233 --> 00:02:23.700
Target, Positions, Payloads, and Options.

00:02:25.525 --> 00:02:28.666
Let’s inspect these beginning with Target.

00:02:29.200 --> 00:02:33.333
The information on this tab is
prepopulated based on the request

00:02:33.333 --> 00:02:36.166
so we will leave the values as-is.

00:02:36.900 --> 00:02:40.200
Next, let’s review the
contents of the Positions tab.

00:02:42.373 --> 00:02:46.200
We use this tab to mark which
fields we want Burp Suite to inject

00:02:46.200 --> 00:02:48.800
payloads into when an attack is run.

00:02:49.612 --> 00:02:53.000
Burp Suite will automatically
mark cookie values and

00:02:53.000 --> 00:02:59.066
POST body values as payload positions
using a section sign as a delimiter.

00:02:59.560 --> 00:03:02.866
However, we do not want to
use all these default positions

00:03:02.866 --> 00:03:05.900
so we will remove them
with the Clear button.

00:03:09.081 --> 00:03:14.766
We will leave pma_username set to “root”
since this is our target user account.

00:03:16.685 --> 00:03:21.866
There are four other values we will
modify in order to submit login attempts.

00:03:22.336 --> 00:03:27.033
We will insert the actual attempted
password into pma_password

00:03:27.033 --> 00:03:30.366
by selecting the value and clicking Add.

00:03:35.633 --> 00:03:40.600
The phpMyAdmin cookie value
and set_session post body value

00:03:40.600 --> 00:03:42.366
change on each request,

00:03:42.826 --> 00:03:45.800
so we need to add them
as payload positions as well.

00:03:56.378 --> 00:04:00.266
Finally, the token value
also changes on each request

00:04:00.266 --> 00:04:01.800
to prevent bruteforcing

00:04:01.800 --> 00:04:05.966
so we will need to select its
value and click Add as well.

00:04:10.514 --> 00:04:13.133
We’ll set the Attack type to “Pitchfork”,

00:04:13.133 --> 00:04:17.466
allowing us to set a unique
payload list for each position.

00:04:18.284 --> 00:04:20.566
This is necessary to
account for the differences

00:04:20.566 --> 00:04:23.000
in the payload values we want to send.

00:04:24.021 --> 00:04:28.200
The pitchfork attack will place
the first value from each list

00:04:28.200 --> 00:04:32.766
into their respective positions
and then send the request.

00:04:33.322 --> 00:04:38.433
The next request will use the second
value from each list, and so on.

00:04:39.001 --> 00:04:42.900
Configuring a “Pitchfork” attack with
the payloads we need here

00:04:42.900 --> 00:04:44.700
can be a bit confusing.

00:04:45.256 --> 00:04:48.600
We need to configure some of
our payloads on the Options tab

00:04:48.600 --> 00:04:53.566
before we can use them so we will be
skipping over the Payloads tab for now.

00:04:54.860 --> 00:04:58.400
We need something that can
extract values from a response

00:04:58.400 --> 00:05:01.300
and inject them into the next request.

00:05:12.806 --> 00:05:15.866
Burp Suite includes a
“Recursive grep” payload

00:05:15.866 --> 00:05:18.233
that searches a response with grep

00:05:18.233 --> 00:05:24.000
for a predefined value and makes the
results available for the next request.

00:05:25.617 --> 00:05:30.366
This is exactly what we need to set
the phpMyAdmin cookie value,

00:05:30.366 --> 00:05:34.900
the set_session post body value,
and the token field.

00:05:35.652 --> 00:05:40.700
Let’s click on Add to start configuring
our first Recursive Grep payload.

00:05:42.809 --> 00:05:46.066
This opens a new window
with a HTTP response

00:05:46.066 --> 00:05:50.833
that we can use to define the location
of the item we want extracted.

00:05:51.436 --> 00:05:55.966
We do not want to use the “Set-Cookie”
headers to extract the session value

00:05:55.966 --> 00:06:01.266
because the server sets multiple
instances of the phpMyAdmin cookie

00:06:01.266 --> 00:06:05.333
and Burp will always use
the first instance it finds.

00:06:06.110 --> 00:06:09.533
We need to scroll down in
the HTTP response window

00:06:09.533 --> 00:06:13.566
to the set_session hidden
input field within the login form.

00:06:24.020 --> 00:06:27.266
We will click and select the
value of the input field.

00:06:31.352 --> 00:06:35.466
When we do this, Burp automatically
sets the “Start after expression”

00:06:35.466 --> 00:06:38.066
and “End at delimiter” values

00:06:38.066 --> 00:06:41.133
defining the delimiters
for the grep extract.

00:06:42.247 --> 00:06:44.366
We’ll click Ok to save the extract,

00:06:46.803 --> 00:06:50.266
and then define another
extract by clicking Add.

00:06:59.736 --> 00:07:03.400
This time we need to select the
contents of the token field.

00:07:06.935 --> 00:07:10.800
Again, we’ll click Ok to
save the second extract.

00:07:13.158 --> 00:07:16.533
Now that we have our
“Recursive Grep” payloads defined,

00:07:16.533 --> 00:07:20.266
we need to set our payloads
by clicking the Payloads tab.

00:07:21.192 --> 00:07:24.100
We will be setting four payloads in total.

00:07:24.602 --> 00:07:28.766
There is a Payload set value
for each position we marked

00:07:28.766 --> 00:07:31.833
and they match the positions sequentially.

00:07:34.422 --> 00:07:37.900
In other words, set one is
for the session cookie,

00:07:37.900 --> 00:07:40.833
set two is for the session field,

00:07:40.833 --> 00:07:43.933
set three is the password field,

00:07:43.933 --> 00:07:46.966
and set four is for the token field.

00:07:47.613 --> 00:07:52.900
Payload set one is the
phpMyAdmin sesson cookie value.


00:07:53.467 --> 00:07:56.633
We need to select
“Recursive Grep” for the type,

00:07:57.965 --> 00:08:02.966
and then click on our first grep
extract as our Payload Option.

00:08:04.945 --> 00:08:08.000
We will also set a value for the initial payload.

00:08:14.768 --> 00:08:18.733
Payload set two is the set_session value.

00:08:23.126 --> 00:08:26.700
It needs to match the value
of the phpMyAdmin cookie,

00:08:26.700 --> 00:08:30.233
so we will use the same
settings as payload set one.

00:08:41.391 --> 00:08:44.833
Payload set three is the password value.

00:08:46.800 --> 00:08:50.300
We will configure it to use
the “Simple list” payload type.

00:08:51.146 --> 00:08:52.566
As its name indicates,

00:08:52.566 --> 00:08:56.166
this payload type uses
a simple list of strings.

00:08:57.101 --> 00:08:58.933
We can add values to the list

00:08:58.933 --> 00:09:02.433
by manually entering
passwords in the text box

00:09:02.433 --> 00:09:04.100
and clicking Add.

00:09:13.308 --> 00:09:16.633
We will repeat this to enter
a few common passwords.

00:09:24.627 --> 00:09:28.666
Finally, payload set four
is the token value.

00:09:29.253 --> 00:09:32.633
We will use the “Recursive grep”
payload type again,

00:09:35.448 --> 00:09:39.300
and our second grep extract
as our Payload Option.

00:09:41.704 --> 00:09:46.400
As with payload positions one and two,
we will again provide an initial value.

00:09:53.283 --> 00:09:56.766
The token value can often
contain special characters

00:09:56.766 --> 00:10:00.733
so we need to de-select the
option to URL encode them.

00:10:04.633 --> 00:10:06.833
We’ve performed a number of setup steps

00:10:06.833 --> 00:10:10.433
so let’s review what we’ve
done before starting the attack.

00:10:12.149 --> 00:10:16.066
We should have four positions
marked on the Positions tab.

00:10:17.168 --> 00:10:20.700
These are the values for
the phpMyAdmin cookie

00:10:20.700 --> 00:10:24.166
and the POST body values
for the set_session,

00:10:24.166 --> 00:10:27.700
pma_password, and token parameters.

00:10:28.329 --> 00:10:30.900
Our payloads for set one and two

00:10:30.900 --> 00:10:34.833
are “Recursive grep” with
the session extract payload.

00:10:35.670 --> 00:10:37.566
Our payload for set three

00:10:37.566 --> 00:10:41.333
is a “Simple list” with our weak passwords.

00:10:42.131 --> 00:10:44.766
Finally, our payload for set four

00:10:44.766 --> 00:10:49.666
is again “Reverse grep” but
with the token extract payload.

00:10:50.315 --> 00:10:54.366
Now that we have verified our settings,
we’ll click the Start attack button.

00:10:55.239 --> 00:10:58.800
The demo version of intruder will
work fine for this demonstration,

00:10:58.800 --> 00:11:01.433
so we’ll click Ok to start the attack

00:11:01.433 --> 00:11:04.700
and send requests with
each position we marked

00:11:04.700 --> 00:11:07.866
replaced with the
respective payload values.

00:11:12.364 --> 00:11:15.500
Burp Suite will open a
new window with the results:

00:11:16.294 --> 00:11:18.200
If everything is configured correctly,

00:11:18.200 --> 00:11:22.133
one request will trigger a 302 response,

00:11:22.133 --> 00:11:25.500
which stands out from
the other 200 responses.

00:11:34.144 --> 00:11:38.876
This entry also contains
a “pmaAuth-1” cookie,

00:11:38.876 --> 00:11:41.966
which seems to indicate
a successful login.

00:11:42.594 --> 00:11:44.233
According to the output,

00:11:44.233 --> 00:11:49.500
Burp Suite was able to log in as
root with a password of “root”.

00:11:50.118 --> 00:11:52.600
We can verify this
manually in our browser:

00:12:04.611 --> 00:12:07.766
This example might appear
somewhat unusual,

00:12:07.766 --> 00:12:12.166
but weak or predictable passwords
are still far too common

00:12:12.166 --> 00:12:18.033
and this process will certainly work with
more complex real-world examples.

00:12:18.665 --> 00:12:23.833
In phpMyAdmin, the available databases
are listed on the left hand side,

00:12:23.833 --> 00:12:26.700
one of which is webappdb.

00:12:28.001 --> 00:12:29.001
This database belongs to the

00:12:29.001 --> 00:12:32.900
vulnerable web application that
we will be abusing in this module.

00:12:38.780 --> 00:12:41.866
This is a basic website
that includes a menu,

00:12:44.214 --> 00:12:45.500
feedback section,

00:12:47.431 --> 00:12:48.933
and admin area


00:12:51.184 --> 00:12:53.200
We will return to this application soon

00:12:53.200 --> 00:12:56.966
but first, let’s return to phpMyAdmin.

00:13:00.879 --> 00:13:03.500
We can use our access to phpMyAdmin

00:13:03.500 --> 00:13:08.333
to execute arbitrary SQL queries
directly against the database.

00:13:09.076 --> 00:13:12.833
If we click on SQL, we can
write our own SQL queries.

00:13:17.251 --> 00:13:20.500
We will cover SQL more
in-depth later in this module

00:13:20.500 --> 00:13:23.366
but for now,
we will retrieve all the data,

00:13:25.078 --> 00:13:29.466
in the users table in
the webappdb database.

00:13:39.843 --> 00:13:41.091
After clicking Go,

00:13:41.091 --> 00:13:42.942
we get the results of our query,

00:13:42.942 --> 00:13:45.666
indicating plaintext passwords.

00:13:47.131 --> 00:13:50.700
Not only can we query the
database and view table contents

00:13:50.700 --> 00:13:54.366
but we can also insert
data into the database.

00:14:02.524 --> 00:14:06.433
This query will add a new user named “backdoor”

00:14:06.433 --> 00:14:09.400
with a password of “backdoor”.

00:14:10.950 --> 00:14:13.866
Next, we’ll click Go to run the query.

00:14:15.910 --> 00:14:19.400
The page updates and
shows “1 row inserted”.

00:14:20.439 --> 00:14:25.133
We can verify the user was added by
re-running our original query.

00:14:45.366 --> 00:14:48.366
With our user in the webappdb database,

00:14:48.366 --> 00:14:53.033
we should be able to use our newly-created
backdoor account to log in.

00:15:06.898 --> 00:15:11.733
Excellent, the user we inserted
into the database is able to log in.

00:15:12.354 --> 00:15:15.733
We will analyze this web
application in much greater depth

00:15:15.733 --> 00:15:17.366
later in this module.

00:15:21.988 --> 00:15:27.233
This is just a brief example of what we
can do with access to PhpMyAdmin

00:15:27.233 --> 00:15:29.400
and SQL queries.

00:15:35.047 --> 00:15:39.600
We will take this farther later in this
module when we demonstrate SQL injection

00:15:39.600 --> 00:15:44.766
and leverage SQL query access
into a shell on the server.
