WEBVTT

00:00:01.600 --> 00:00:04.433
Locating Space for Our Shellcode

00:00:05.466 --> 00:00:10.033
At this point, we know that we can place
an arbitrary address in EIP,

00:00:10.033 --> 00:00:13.300
but we do not know what real address to
use.

00:00:13.700 --> 00:00:16.100
However, we can’t choose an address

00:00:16.100 --> 00:00:20.433
until we understand where we can redirect
the execution flow.

00:00:21.100 --> 00:00:25.400
Therefore, we will first focus on the
executable code we want the target to

00:00:25.400 --> 00:00:28.033
execute and, more importantly,

00:00:28.033 --> 00:00:31.233
understand where this code will fit in
memory.

00:00:31.733 --> 00:00:35.833
Ideally, we want the target to execute
some code of our choosing,

00:00:35.833 --> 00:00:37.466
like a reverse shell.

00:00:37.833 --> 00:00:42.050
We can include such shellcode as part of
the input buffer that is

00:00:42.050 --> 00:00:43.800
triggering the crash.

00:00:44.133 --> 00:00:48.600
We will use the Metasploit Framework to
generate our shellcode payload.

00:00:49.133 --> 00:00:52.266
Looking back at the registers after our
last crash,

00:00:52.266 --> 00:00:57.233
we notice that the ESP register points to
our buffer of C’s.

00:01:00.033 --> 00:01:05.000
Since we could easily access this location
at crash time through the address stored

00:01:05.000 --> 00:01:09.700
in ESP, this seems like a convenient
location for our shellcode.

00:01:14.966 --> 00:01:20.200
Closer inspection of the stack at crash
time reveals that the first four C’s

00:01:20.200 --> 00:01:28.133
from our buffer landed after our four B’s
and ESP points to the next four C’s.

00:01:29.433 --> 00:01:33.833
From experience, we know that a standard
reverse shell payload requires

00:01:33.833 --> 00:01:38.766
approximately 350-400 bytes of space.

00:01:39.133 --> 00:01:44.500
However, the stack clearly shows that
there are only sixteen C’s in the buffer,

00:01:44.800 --> 00:01:47.733
which isn’t nearly enough space for our
shellcode.

00:01:49.300 --> 00:01:53.833
The simplest way around this problem is to
try to increase the buffer length

00:01:53.833 --> 00:02:01.066
from 800 to 1500 bytes and see if this
allows enough space for our shellcode

00:02:01.066 --> 00:02:04.166
without breaking the buffer overflow
condition

00:02:04.166 --> 00:02:07.033
or changing the nature of the crash.

00:02:07.466 --> 00:02:11.733
Before we try that, we’ll restart our
application and debugger.

00:02:40.500 --> 00:02:44.200
Now let’s examine our next proof of
concept.

00:02:51.800 --> 00:02:57.133
In this version of our proof of concept,
we include four C’s to fill in the space

00:02:57.133 --> 00:03:00.366
between EIP and ESP.

00:03:01.633 --> 00:03:06.366
We also add ‘D’ characters as a
placeholder for our shellcode.

00:03:08.200 --> 00:03:14.266
Our overall buffer length will be 1500
bytes so the number of D’s in the buffer

00:03:14.266 --> 00:03:21.666
is 1500 minus the length of the filler,
eip, and offset values.

00:03:22.433 --> 00:03:27.066
We’ll run our new script and find out if
we managed to increase our available

00:03:27.066 --> 00:03:28.366
shellcode space.

00:03:38.466 --> 00:03:44.900
Once the new, longer buffer is sent, we
observe a similar crash in the debugger.

00:03:47.300 --> 00:03:52.700
This time, however, we find ESP pointing
to the D characters

00:03:52.700 --> 00:03:56.233
acting as a placeholder for our shellcode.

00:04:04.366 --> 00:04:10.200
This little trick has provided us with
significantly more space to work with.

00:04:10.666 --> 00:04:15.500
Our D characters end at an offset of
hex 2C4.

00:04:33.233 --> 00:04:39.766
This means that we now have more than 700
bytes of free space for our shellcode.

00:04:43.766 --> 00:04:49.933
Also, notice that the address of ESP
changes every time we run the exploit,

00:04:49.933 --> 00:04:52.233
but still points to our buffer.

00:05:01.833 --> 00:05:05.666
We will address this in a following
section, but first we have another

00:05:05.666 --> 00:05:07.000
hurdle to overcome.

00:05:07.600 --> 00:05:11.500
Before continuing, let’s restart and
re-attach.
