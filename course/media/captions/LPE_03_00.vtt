WEBVTT

00:00:01.417 --> 00:00:02.950
Putting It All Together

00:00:04.219 --> 00:00:06.685
With all of the primary resources covered,

00:00:06.685 --> 00:00:10.552
let’s demonstrate how this
would look in a real-world scenario.

00:00:11.001 --> 00:00:13.934
We’re going to attack our
dedicated Linux client,

00:00:13.934 --> 00:00:18.834
which is hosting an application that
is vulnerable to a public exploit.

00:00:19.252 --> 00:00:22.485
We begin our enumeration process
by running nmap

00:00:22.485 --> 00:00:26.485
to determine what services the
machine has exposed to the network.

00:00:27.617 --> 00:00:31.517
This nmap scan will scan all TCP ports…

00:00:32.352 --> 00:00:36.585
Perform version detection with
very verbose output…

00:00:37.166 --> 00:00:41.866
And display only open ports and
the reason for the ports state.

00:00:45.201 --> 00:00:47.068
Based on the output of our scan,

00:00:47.068 --> 00:00:50.368
it appears that the system is
running an SSH server

00:00:50.368 --> 00:00:56.068
on TCP port 22 and various
services noted as “JAMES”.

00:00:57.319 --> 00:01:01.752
Using Google to get more information
on what the JAMES services are

00:01:02.668 --> 00:01:06.668
leads us to believe that our
target is running Apache James.

00:01:12.852 --> 00:01:17.485
In order to locate any available exploits,
we’ll use the searchsploit tool.

00:01:19.585 --> 00:01:22.352
Among the results, it appears
that one of the exploits

00:01:22.352 --> 00:01:26.452
is targeting the specific
Apache James Server version

00:01:26.452 --> 00:01:28.734
that's running on our target system.

00:01:31.683 --> 00:01:37.283
A quick glance at this exploit shows that
it takes the IP address as an argument…

00:01:37.683 --> 00:01:43.317
and executes a specific command as root
defined in the payload variable.

00:01:44.199 --> 00:01:46.166
Now that we’ve located our exploit,

00:01:46.166 --> 00:01:48.732
we’ll attempt to run it against
our dedicated

00:01:48.732 --> 00:01:51.932
Linux client without any modifications.

00:01:59.799 --> 00:02:03.066
The exploit appears to have worked
without any errors

00:02:03.066 --> 00:02:06.199
and it informs us that the
payload will be executed

00:02:06.217 --> 00:02:08.817
once a user logs in
to the machine.

00:02:10.052 --> 00:02:12.452
We’ll connect to our
dedicated Linux client

00:02:12.452 --> 00:02:16.619
to simulate a login that would
normally occur from the victim.

00:02:19.183 --> 00:02:23.317
After we authenticate, we get
additional clutter from the exploit

00:02:23.317 --> 00:02:26.683
that would not occur during
a standard login session.

00:02:27.417 --> 00:02:32.050
If everything worked according to plan,
we should see a proof.txt file

00:02:32.068 --> 00:02:34.168
under the /root directory.

00:02:38.685 --> 00:02:42.852
Very nice. It looks like the
exploit was successful.
