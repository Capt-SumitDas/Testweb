WEBVTT

00:00:01.607 --> 00:00:04.607
Pivoting with the Metasploit Framework

00:00:05.621 --> 00:00:11.800
After compromising a target, we can pivot
from that system to additional targets.

00:00:12.278 --> 00:00:15.566
We can pivot from within
the MSF, which is convenient,

00:00:15.566 --> 00:00:20.000
but lacks the flexibility of
manual pivoting techniques.

00:00:20.382 --> 00:00:24.133
For example, let’s leverage our
existing Meterpreter session

00:00:24.133 --> 00:00:29.166
to enumerate the internal network’s
Active Directory infrastructure

00:00:29.166 --> 00:00:31.933
and pivot to other machines.

00:00:34.458 --> 00:00:40.866
To begin, we notice that the compromised
windows client has two network interfaces.

00:00:51.963 --> 00:00:55.300
We will use “route” and “add”…

00:00:55.433 --> 00:01:00.966
to create a path to the alternate internal
network subnet we discovered.

00:01:02.248 --> 00:01:07.133
We will also identify the session
ID that this route will apply to.

00:01:11.533 --> 00:01:17.166
With a path created to the internal
network, we can now enumerate this subnet.

00:01:22.657 --> 00:01:25.900
Since we already know the IP
address of the domain controller,

00:01:25.900 --> 00:01:31.900
we will perform a limited port scan of
it using the tcp portscan module.

00:01:39.113 --> 00:01:43.400
Our scan has found that these
ports are open on the internal system,

00:01:43.400 --> 00:01:46.933
despite the fact we
can’t reach it directly.

00:01:51.793 --> 00:01:54.251
Since we prevously discovered valid

00:01:54.251 --> 00:01:56.966
administrative credentials
for the domain controller,

00:01:56.966 --> 00:02:03.766
we may now attempt a pivot to it through
the use of the psexec module.

00:02:10.310 --> 00:02:14.800
We need to specify credentials
by configuring values for

00:02:15.871 --> 00:02:17.566
SMBDomain,

00:02:19.843 --> 00:02:21.733
SMBUser,

00:02:23.895 --> 00:02:26.466
and SMBPass.

00:02:29.145 --> 00:02:33.800
Next, we specify the
target with set rhosts,

00:02:36.172 --> 00:02:39.633
and configure our
payload and its options.

00:02:47.267 --> 00:02:49.800
It’s important to note
that the added route will

00:02:49.800 --> 00:02:52.966
only work with established connections.

00:02:53.731 --> 00:02:59.666
Because of this, the new shell on the
domain controller must be a bind shell,

00:02:59.666 --> 00:03:04.133
thus allowing us to use
the set route to connect to it.

00:03:15.479 --> 00:03:18.900
A reverse shell payload would not
be able to find its way

00:03:18.900 --> 00:03:20.833
back to our attacking system

00:03:20.833 --> 00:03:25.133
because the domain controller does
not have a route defined for our network.

00:03:25.669 --> 00:03:28.433
In this manner, we were able
to obtain a meterpreter shell

00:03:28.433 --> 00:03:32.094
from the Domain Controller
on the internal network 

00:03:32.094 --> 00:03:35.333
we would otherwise not
be able to reach directly.

00:03:39.886 --> 00:03:42.900
As an alternative to
adding routes manually,

00:03:42.900 --> 00:03:48.800
we can use the autoroute post-exploitation
module, which can set up pivot routes

00:03:48.800 --> 00:03:53.066
through an existing meterpreter
session automatically.

00:04:02.269 --> 00:04:08.166
To do this, we’ll find and set our
session number and run the module.

00:04:24.027 --> 00:04:28.966
We can also combine routes
with the socks4a server module

00:04:28.966 --> 00:04:33.100
to configure a socks proxy
to allow applications

00:04:33.100 --> 00:04:37.666
outside the Metasploit Framework
to tunnel through the pivot.

00:04:47.654 --> 00:04:52.533
To do this, we will first set the module
to use the localhost for the proxy

00:04:52.533 --> 00:04:54.433
and then launch it.

00:04:58.853 --> 00:05:02.366
We can now update our
proxychains configuration file

00:05:02.366 --> 00:05:05.466
to take advantage of
the socks proxy…

00:05:09.274 --> 00:05:15.500
by adding a configuration line to the end
of the proxychains.conf file.

00:05:19.747 --> 00:05:25.533
Finally, we can use proxychains to
run an application like rdesktop

00:05:25.533 --> 00:05:30.066
to obtain GUI access from
our Kali linux machine

00:05:30.066 --> 00:05:33.800
 to the domain controller
on the internal network.

00:05:42.907 --> 00:05:49.166
Next the rdesktop client opens and allows
us to login to the domain controller.

00:06:07.209 --> 00:06:10.375
We can also use a similar
technique for port forwarding

00:06:10.375 --> 00:06:15.533
using the portfwd command
from inside a Meterpreter session,

00:06:15.533 --> 00:06:20.700
which will forward a specific
port into the internal network.

00:06:34.647 --> 00:06:39.033
We can create a port forward
from localhost port 3389…

00:06:39.970 --> 00:06:43.633
to port 3389 on the compromised host.

00:06:46.713 --> 00:06:52.333
We can test this by pointing
the rdesktop client to 127.0.0.1

00:06:52.333 --> 00:06:54.966
to connect to the compromised host.

00:07:06.733 --> 00:07:11.066
Using this technique, we are able to
gain a remote desktop session

00:07:11.066 --> 00:07:15.833
on a host we are otherwise not
able to reach from our Kali system.

00:07:16.828 --> 00:07:21.366
Likewise, if the domain controller was
connected to an additional network,

00:07:21.366 --> 00:07:25.833
we could create a chain of
pivots to reach any host.
