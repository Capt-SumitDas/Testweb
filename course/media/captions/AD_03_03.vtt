WEBVTT

00:00:01.596 --> 00:00:05.133
Cached Credential Storage
and Retrieval

00:00:06.339 --> 00:00:09.900
To lay the foundation for cached
storage credential attacks,

00:00:09.900 --> 00:00:13.166
we must first look at the
various password hashes

00:00:13.166 --> 00:00:15.933
used with Kerberos and
how they are stored.

00:00:16.697 --> 00:00:21.700
Since Microsoft’s implementation of
Kerberos makes use of single sign-on,

00:00:21.700 --> 00:00:27.233
password hashes must be stored somewhere
in order to renew a TGT request.

00:00:28.337 --> 00:00:32.344
In current versions of Windows,
these hashes are stored in the

00:00:32.344 --> 00:00:37.000
Local Security Authority Subsystem
Service memory space.

00:00:37.968 --> 00:00:40.066
If we can get hold of these hashes,

00:00:40.068 --> 00:00:44.000
we could crack them to
find the cleartext password

00:00:44.000 --> 00:00:47.366
or reuse them to perform
various actions.

00:00:48.249 --> 00:00:51.233
Although this is the end
goal of our AD attack,

00:00:51.233 --> 00:00:54.600
the process is not as
straight-forward as it sounds.

00:00:55.585 --> 00:00:59.900
 Since the LSASS process is part of the
operating system and runs as SYSTEM,

00:00:59.900 --> 00:01:06.000
we need SYSTEM, or local administrator
permissions to gain access to the hashes.

00:01:06.390 --> 00:01:12.133
Because of this we often have to start our
attack with a local privilege escalation.

00:01:13.084 --> 00:01:16.751
To makes things even more difficult,
the data structures used to store

00:01:16.751 --> 00:01:20.133
the hashes in memory are not
publicly documented

00:01:20.133 --> 00:01:24.833
and they are also encrypted
with an LSASS-stored key.

00:01:25.818 --> 00:01:29.114
Nevertheless, since this is a
huge attack vector against Windows

00:01:29.114 --> 00:01:34.566
and Active Directory, several tools
have been created to extract the hashes,

00:01:34.566 --> 00:01:37.966
the most popular of which is Mimikatz.

00:01:38.561 --> 00:01:43.166
Let’s try to use Mimikatz to extract hashes
on our Windows 10 system.

00:01:43.965 --> 00:01:47.333
Since the Offsec domain user
is a local administrator,

00:01:47.333 --> 00:01:51.800
we are able to launch a command
prompt with elevated privileges.

00:02:07.155 --> 00:02:08.766
From this command prompt,

00:02:09.412 --> 00:02:11.033
we will run mimikatz,

00:02:13.988 --> 00:02:19.966
and engage the SeDebugPrivlege
privilege with privilege::debug,

00:02:19.966 --> 00:02:24.500
which will allow us to interact with
a process owned by another account.

00:02:26.623 --> 00:02:32.900
Finally, we’ll dump the credentials of all
logged-on users using the Sekurlsa module.

00:02:38.284 --> 00:02:43.300
This dumps hashes for all users logged on
to the current workstation or server,

00:02:43.300 --> 00:02:47.833
including remote logins like
Remote Desktop sessions.

00:02:56.972 --> 00:03:00.633
The output shows all credential
information stored in LSASS

00:03:00.633 --> 00:03:05.233
for the domain user Offsec,
including cached hashes.

00:03:06.541 --> 00:03:09.366
Notice that we have two types
of hashes in the output.

00:03:09.655 --> 00:03:13.800
This will vary based on the functional
level of the AD implementation.

00:03:14.666 --> 00:03:18.233
For AD instances at a functional
level of Windows 2003,

00:03:18.233 --> 00:03:21.700
NTLM is the only available
hashing algorithm.

00:03:22.260 --> 00:03:25.633
For instances running Windows
Server 2008 or later,

00:03:25.633 --> 00:03:29.433
both NTLM and SHA-1 may be available.

00:03:30.129 --> 00:03:33.166
Armed with these hashes, we
could attempt to crack them

00:03:33.166 --> 00:03:35.333
and obtain the cleartext password.

00:03:35.961 --> 00:03:40.633
A different approach using Mimikatz
is to exploit Kerberos authentication

00:03:40.633 --> 00:03:44.166
by abusing TGT and service tickets.

00:03:49.534 --> 00:03:53.133
We know Kerberos TGT and service
tickets for users currently

00:03:53.133 --> 00:03:57.366
logged on to the local machine
are stored for future use.

00:03:58.215 --> 00:04:02.400
These tickets are also stored
in LSASS and we can use Mimikatz

00:04:02.400 --> 00:04:06.033
to interact with and retrieve
our own tickets

00:04:06.033 --> 00:04:09.066
and the tickets of other local users.

00:04:09.763 --> 00:04:14.266
For example, let’s use Mimikatz
to show the Offsec user’s tickets

00:04:14.266 --> 00:04:15.566
that are stored in memory:

00:04:22.599 --> 00:04:25.233
The output shows both a TGT…

00:04:25.433 --> 00:04:27.266
and a TGS.

00:04:28.880 --> 00:04:32.122
Stealing a TGS would allow us
to access only specific

00:04:32.122 --> 00:04:35.033
resources associated with those tickets.

00:04:35.899 --> 00:04:41.166
On the other hand, armed with a
TGT ticket, we could request a TGS

00:04:41.166 --> 00:04:45.233
for specific resources we want
to target within the domain.

00:04:46.014 --> 00:04:50.500
In addition to these functions, Mimikatz
can export tickets to the hard drive

00:04:50.500 --> 00:04:53.400
and import tickets into LSASS.

00:04:54.113 --> 00:04:58.466
Mimikatz can even extract
information related to authentication

00:04:58.466 --> 00:05:01.300
performed through smart card and PIN,

00:05:01.300 --> 00:05:07.033
making this tool a real cached
credential “swiss army knife”!
