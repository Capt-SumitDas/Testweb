WEBVTT

00:00:01.286 --> 00:00:04.019
Socat Encrypted Bind Shells

00:00:04.519 --> 00:00:10.053
To add encryption to a bind shell, we’ll
rely on Secure Socket Layer certificates.

00:00:10.336 --> 00:00:14.502
This level of encryption will assist
in evading intrusion detection systems

00:00:14.502 --> 00:00:17.802
and will help hide the sensitive data
we are transceiving.

00:00:18.419 --> 00:00:21.219
We’ll use the openssl application

00:00:21.219 --> 00:00:25.519
to create a self-signed certificate
using the following options:

00:00:26.120 --> 00:00:29.553
The req command, along
with the -x509 option

00:00:29.586 --> 00:00:32.253
creates self-signed certificates

00:00:33.269 --> 00:00:36.469
-newkey will generate a new private key

00:00:37.136 --> 00:00:44.270
rsa:2048 will specify RSA encryption
with a 2,048-bit key length.

00:00:45.786 --> 00:00:49.353
-nodes will store the
private key unencrypted

00:00:50.270 --> 00:00:53.036
-keyout will save the key to a file

00:00:54.369 --> 00:00:57.802
-days specifies the validity
period in days

00:00:58.970 --> 00:01:02.036
… and out will save the
certificate to a file

00:01:04.085 --> 00:01:06.952
Let’s walk through this process
on Alice’s machine now:

00:01:16.885 --> 00:01:19.819
Now that the key and certificate
have been generated,

00:01:19.819 --> 00:01:23.685
we need to convert them into
a format socat will accept.

00:01:25.453 --> 00:01:28.386
We’ll combine both the “bind shell key”

00:01:28.386 --> 00:01:33.353
and “bind shell cert” files into
a single DOT PEM file.

00:01:34.085 --> 00:01:37.685
Now let’s create the
encrypted socat listener.

00:01:40.220 --> 00:01:45.653
The OPENSSL-LISTEN option
creates a listener on port 443.

00:01:46.386 --> 00:01:49.586
The cert option specifies
our certificate file,

00:01:50.270 --> 00:01:53.403
verify disables SSL verification

00:01:53.936 --> 00:01:58.436
and fork spawns a child process once
a connection is made to the listener.

00:01:59.402 --> 00:02:03.402
Now, we can connect Bob’s
computer to Alice’s bind shell.

00:02:04.319 --> 00:02:09.219
We will use a hyphen to transfer data
between STDIO and the remote host,

00:02:09.219 --> 00:02:14.219
OPENSSL to establish a remote
SSL connection to Alice’s listener,

00:02:15.136 --> 00:02:19.836
and verify=0 to disable SSL
certificate verification.

00:02:24.585 --> 00:02:27.785
Great! Our bind shell was
created successfully

00:02:27.785 --> 00:02:31.136
and we are able to pass
commands to Alice’s machine.

00:02:38.936 --> 00:02:41.370
Take some time to explore
socat on your own.

00:02:41.802 --> 00:02:44.702
This is one of many tools that
will be extremely beneficial

00:02:44.702 --> 00:02:46.469
during a penetration test.
