WEBVTT

00:00:01.035 --> 00:00:03.700
Basic Linux Commands

00:00:03.700 --> 00:00:09.233
Next, let’s dig into Kali Linux usage 
and explore some basic Linux commands.

00:00:10.147 --> 00:00:11.866
Man Pages

00:00:11.866 --> 00:00:14.974
Most Linux command-line executable 
programs provide 

00:00:14.974 --> 00:00:20.300
a formal piece of documentation called 
manual or man pages.

00:00:20.927 --> 00:00:25.133
Man pages generally have a name, a 
synopsis, a description 

00:00:25.133 --> 00:00:28.933
of the command’s purpose, and the 
corresponding options, 

00:00:28.954 --> 00:00:31.366
parameters, or switches. 

00:00:31.566 --> 00:00:35.366
Man pages contain not only 
information about user commands, 

00:00:35.372 --> 00:00:39.466
but also documentation regarding 
system administration commands

00:00:39.475 --> 00:00:42.092
programming interfaces, and more.

00:00:42.092 --> 00:00:44.933
If you’re unsure which manual section 
you want to read from,

00:00:44.933 --> 00:00:47.393
you can do a keyword search.

00:00:47.393 --> 00:00:50.300
For example, let’s assume we are 
interested in learning a bit more 

00:00:50.300 --> 00:00:53.100
about the format of the 
/etc/passwd file.

00:00:53.100 --> 00:00:57.333
Typing man passwd at the command 
 line shows information

00:00:57.333 --> 00:01:01.533
regarding the passwd command, which 
is not what we are interested in.

00:01:03.089 --> 00:01:08.566
However, if we use the -k option, 
we can perform a keyword search.

00:01:08.566 --> 00:01:12.633
We can further narrow the search 
with the help of a regular expression. 

00:01:12.633 --> 00:01:15.133
It’s important to understand 
regular expressions,

00:01:15.133 --> 00:01:19.511
so refer to the lab guide for 
additional resources and information. 

00:01:21.118 --> 00:01:25.466
We can now look at the exact passwd 
manual page we’re interested in

00:01:25.466 --> 00:01:27.966
by referencing the appropriate section.

00:01:28.859 --> 00:01:33.666
Man pages are typically the quickest way 
to find documentation on a given command

00:01:33.666 --> 00:01:37.133
so take some time to explore them in a 
bit more detail.

00:01:38.566 --> 00:01:40.433
apropos

00:01:40.433 --> 00:01:44.900
With the apropos command, we can 
search the list of man page descriptions

00:01:44.900 --> 00:01:47.633
for a possible match based on 
a keyword.

00:01:47.633 --> 00:01:52.200
Although this is a bit crude, it’s often 
helpful for finding a particular command 

00:01:52.200 --> 00:01:53.933
based on the description.

00:01:53.933 --> 00:01:56.800
Suppose that we want to partition a hard 
drive but can’t remember

00:01:56.800 --> 00:01:58.466
the name of the command.

00:01:58.466 --> 00:02:02.666
We can figure this out with an apropos 
search for partition.

00:02:02.666 --> 00:02:08.000
Notice that apropos seems to perform 
the same function as man -k.

00:02:08.000 --> 00:02:10.800
This is because they are, in fact, 
equivalent.

00:02:12.972 --> 00:02:15.100
Listing Files

00:02:15.103 --> 00:02:19.566
The ls command prints a basic 
file listing to the screen.

00:02:19.566 --> 00:02:24.100
We can modify the output results 
with various wildcards.

00:02:25.333 --> 00:02:30.433
The -a option is used to display 
all files (including hidden ones) 

00:02:30.433 --> 00:02:35.066
and the -1 option displays each 
 file on a single line, 

00:02:35.066 --> 00:02:37.466
which is very useful for automation.

00:02:39.817 --> 00:02:41.866
Moving Around

00:02:41.926 --> 00:02:45.500
Linux does not use Windows-style 
drive letters.

00:02:45.500 --> 00:02:51.266
Instead, all files, folders, and devices 
are children of the root directory, 

00:02:51.277 --> 00:02:54.233
represented by the “forward slash” 
character.

00:02:54.233 --> 00:03:00.466
We can use the cd command followed by a 
path to change to the specified directory.

00:03:00.466 --> 00:03:03.900
The pwd command will print the current 
directory, 

00:03:03.900 --> 00:03:05.900
which is helpful if you get lost.

00:03:05.900 --> 00:03:09.012
Running cd followed by the tilde 
character 

00:03:09.012 --> 00:03:11.800
will return to the home directory.

00:03:14.865 --> 00:03:17.500
Creating Directories

00:03:17.502 --> 00:03:21.566
The “make directory” command followed 
by the name of a directory

00:03:21.566 --> 00:03:24.366
creates the specified directory.

00:03:25.348 --> 00:03:29.700
Directory names in Linux may contain 
spaces, but this is considered bad form

00:03:29.700 --> 00:03:33.933
since spaces are used to separate 
commands and parameters.

00:03:33.933 --> 00:03:36.166
Consider this example:

00:03:40.600 --> 00:03:44.866
As we can see, a directory named with 
spaces can create confusion 

00:03:44.866 --> 00:03:47.100
unless we wrap it in quotes. 

00:03:55.070 --> 00:03:59.998
Instead, many users choose hyphens or 
underscores instead of spaces

00:03:59.998 --> 00:04:02.733
 in directory and file names:

00:04:03.133 --> 00:04:05.933
These characters also make auto-completes 

00:04:05.933 --> 00:04:09.700
(which executed with the tab key) 
much easier.

00:04:09.700 --> 00:04:15.166
We can create multiple directories at 
once with the incredibly useful -p option, 

00:04:15.166 --> 00:04:19.033
which will also create any required 
parent directories.

00:04:19.033 --> 00:04:21.166
This can be combined with brace expansion

00:04:21.166 --> 00:04:24.600
to efficiently create complex directory 
structures. 

00:04:24.600 --> 00:04:29.800
For example, let’s create a directory 
called test and within that directory, 

00:04:29.800 --> 00:04:35.266
create three sub-directories called 
recon, exploit, and report:

00:04:38.629 --> 00:04:42.233
Again, refer to the lab guide for more 
information 

00:04:42.233 --> 00:04:45.200
about regular expressions and brace 
expansions.
