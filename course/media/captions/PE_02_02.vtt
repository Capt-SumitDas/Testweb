WEBVTT

00:00:01.104 --> 00:00:03.800
Credentials and Privilege Escalation

00:00:04.580 --> 00:00:08.633
Privilege escalation modules are found
in the privesc category.

00:00:09.000 --> 00:00:13.666
One of the more interesting modules in
this group is powerup allchecks.

00:00:15.507 --> 00:00:19.266
It uses several techniques
based on misconfigurations

00:00:19.266 --> 00:00:21.766
such as unquoted service paths,

00:00:21.924 --> 00:00:25.000
improper permissions on
service executables,

00:00:25.000 --> 00:00:26.533
 and much more.

00:00:34.866 --> 00:00:38.400
This module can reveal some
very useful information.

00:00:41.608 --> 00:00:45.166
The bypassuac fodhelper module

00:00:45.166 --> 00:00:49.200
is quite useful if we have access to
a local administrator account.

00:00:51.531 --> 00:00:53.600
Depending on the local Windows version,

00:00:53.600 --> 00:00:56.200
this module can bypass UAC

00:00:56.200 --> 00:01:00.500
and launch a high-integrity
PowerShell Empire agent.

00:01:01.990 --> 00:01:05.600
Before running this module,
we need to configure our listener.

00:01:12.066 --> 00:01:13.600
When we run execute,

00:01:13.600 --> 00:01:17.533
Empire warns us that the module
is not opsec safe

00:01:17.533 --> 00:01:20.133
and asks us to confirm the operation.

00:01:25.988 --> 00:01:28.433
Once we have a high-integrity session,

00:01:28.433 --> 00:01:32.000
we can perform actions that require local administrator

00:01:32.000 --> 00:01:33.400
or SYSTEM rights,

00:01:33.400 --> 00:01:37.566
such as executing mimikatz to dump cached credentials.

00:01:39.582 --> 00:01:43.933
The credentials category contains 
multiple mimikatz commands

00:01:43.933 --> 00:01:46.166
that have been ported into Empire.

00:01:48.393 --> 00:01:53.833
The commands marked with an asterisk
require a high-integrity Empire agent.

00:01:53.833 --> 00:01:56.533
Mimikatz is implemented in Empire

00:01:56.533 --> 00:02:01.566
by using an injection technique called reflective DLL injection

00:02:01.566 --> 00:02:04.633
in which the Mimikatz library is loaded

00:02:04.633 --> 00:02:07.466
into the agent directly from memory.

00:02:07.900 --> 00:02:10.000
The primary reason for this approach

00:02:10.000 --> 00:02:13.700
lies in the fact that most endpoint
protection systems

00:02:13.700 --> 00:02:16.900
analyze all files located on disk

00:02:16.900 --> 00:02:20.666
and loading a malicious executable file
directly from memory

00:02:20.666 --> 00:02:23.066
reduces the risk of detection.

00:02:23.802 --> 00:02:26.800
This method is custom
coded into the agent

00:02:26.800 --> 00:02:30.566
as Windows does not
expose any official APIs

00:02:30.566 --> 00:02:33.133
that would allow us to
achieve the same objective.

00:02:33.666 --> 00:02:37.266
Let’s take a look at a
high-integrity access module

00:02:37.266 --> 00:02:39.466
such as logonpasswords.

00:02:47.733 --> 00:02:50.266
This output is identical to mimikatz

00:02:50.266 --> 00:02:54.533
but the collected credentials are also
written into the credential store,

00:02:54.533 --> 00:02:57.100
enumerated with the creds command.

00:02:59.308 --> 00:03:03.166
We can also mnually enter credentials
into the credentials store

00:03:03.166 --> 00:03:04.900
with “creds add”.
