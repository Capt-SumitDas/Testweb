WEBVTT

00:00:01.833 --> 00:00:04.700
Changing Connectivity Information

00:00:14.694 --> 00:00:19.233
As we inspect the code,
we realize the base_url variable

00:00:19.233 --> 00:00:22.500
needs to be changed to
match our environment:

00:00:23.211 --> 00:00:28.966
We must also modify the IP address and the
change the protocol to HTTPS:

00:00:52.770 --> 00:00:56.266
We also notice that when
browsing the target website,

00:00:56.266 --> 00:01:00.466
we are presented with an
UNKNOWN_ISSUER SSL error.

00:01:01.676 --> 00:01:05.233
This error indicates that the
certificate on the remote host

00:01:05.233 --> 00:01:07.066
can not be validated.

00:01:07.280 --> 00:01:09.933
We must account for this
in the exploit code.

00:01:18.034 --> 00:01:22.900
Specifically, the exploit is using
the requests Python library

00:01:22.900 --> 00:01:24.900
to communicate with the target.

00:01:25.953 --> 00:01:29.333
The code makes three post requests

00:01:30.059 --> 00:01:33.166
The first request is on line 34.

00:01:33.636 --> 00:01:38.466
The official documentation indicates that
the SSL certificate will be ignored

00:01:38.466 --> 00:01:42.033
if we set the verify parameter to False:

00:01:48.496 --> 00:01:52.166
The next request is on line 55.

00:01:53.818 --> 00:01:57.733
We’ll append the verify
paramter here as well.

00:02:03.655 --> 00:02:06.093
The last request is on line 80

00:02:06.093 --> 00:02:08.366
where we’ll repeat the process:

00:02:18.218 --> 00:02:23.433
Finally, we also need to change the
credentials used in the original exploit

00:02:23.433 --> 00:02:26.966
to match those found during the enumeration process.

00:02:31.337 --> 00:02:35.666
These are defined in the username and 
assword variables at lines

00:02:35.666 --> 00:02:38.500
15 and 16 respectively:

00:02:43.924 --> 00:02:48.300
Note that in this case, we do not need
to update the simple payload

00:02:48.300 --> 00:02:52.500
since it only executes system commands
passed in cleartext

00:02:52.500 --> 00:02:54.466
within the GET request.

00:02:56.132 --> 00:02:59.600
After all edits are complete,
we save our changes

00:03:08.398 --> 00:03:10.666
and attempt to run the exploit

00:03:17.229 --> 00:03:20.633
However, we are faced with
an unexpected error

00:03:20.889 --> 00:03:22.233
According to the error,

00:03:22.233 --> 00:03:29.000
an exception was triggered during the
execution of the parse_csrf_token function

00:03:29.000 --> 00:03:31.533
on line 24 of the code.

00:03:33.170 --> 00:03:37.800
The error tells us that the code tried
to access a non-existent element

00:03:37.800 --> 00:03:42.666
of a Ptyhon list by accessing
its second element
