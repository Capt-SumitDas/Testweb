WEBVTT

00:00:01.300 --> 00:00:03.266
Password Cracking

00:00:04.033 --> 00:00:08.400
In cryptanalysis, password cracking is the
process of recovering 

00:00:08.400 --> 00:00:12.866
a clear text passphrase, given its
stored hash.

00:00:12.866 --> 00:00:18.133
The process of password cracking is fairly
straight-forward at a high level.

00:00:18.133 --> 00:00:21.457
Once we’ve discovered the hashing 
mechanism we are dealing with 

00:00:21.457 --> 00:00:23.933
in the target authentication process, 

00:00:23.933 --> 00:00:27.600
we can iterate over each word in a
wordlist 

00:00:27.600 --> 00:00:31.133
and generate the respective message
digest.

00:00:31.133 --> 00:00:35.333
If the computed hash matches the
one obtained from the target system, 

00:00:35.333 --> 00:00:39.033
we have obtained the matching
plain-text password.

00:00:39.033 --> 00:00:41.246
This is usually all accomplished 

00:00:41.246 --> 00:00:45.600
with the help of a specialized
password cracking program.

00:00:45.600 --> 00:00:48.900
If a salt is involved in the
authentication process, 

00:00:48.900 --> 00:00:52.200
and we do not know what that 
salt value is,

00:00:52.200 --> 00:00:55.200
cracking could become extremely complex, 

00:00:55.200 --> 00:01:01.933
if not impossible, as we must repeatedly
hash each potential clear text password 

00:01:01.933 --> 00:01:04.100
with various salts.

00:01:04.100 --> 00:01:07.766
Nevertheless, in our experience we have 
almost always been able to

00:01:07.766 --> 00:01:11.197
capture the password hash along with
the salt. 

00:01:11.197 --> 00:01:16.000
whether from a database that contains both
of the unique values per record,

00:01:16.000 --> 00:01:21.764
or from a configuration or a binary file
that uses a single salt

00:01:21.764 --> 00:01:23.966
for all hashed values.

00:01:23.966 --> 00:01:29.634
When both of these values are known, 
password cracking decreases in complexity.

00:01:29.634 --> 00:01:34.100
Once we’ve gained access to password
hashes from a target system, 

00:01:34.100 --> 00:01:38.300
we can begin a password cracking session, 
running in the background, 

00:01:38.300 --> 00:01:41.166
as we continue our assessment.

00:01:41.166 --> 00:01:45.733
If any of the passwords are cracked, we
could attempt to use those passwords

00:01:45.733 --> 00:01:50.633
 on other systems to increase our control
over the target network. 

00:01:51.071 --> 00:01:55.439
This, like other penetration testing
processes, is iterative 

00:01:55.439 --> 00:02:00.966
and we will feed data back into earlier
steps as we expand our control.

00:02:00.966 --> 00:02:05.466
To demonstrate password cracking, we’ll
again turn to John the Ripper 

00:02:05.470 --> 00:02:11.200
as it supports dozens of password formats
and is incredibly powerful and flexible.

00:02:11.806 --> 00:02:14.558
Running john in pure brute force mode


00:02:14.558 --> 00:02:19.066
(attempting every possible 
character combination in a password)

00:02:19.066 --> 00:02:23.733
is as simple as passing the file name
containing our password hashes 

00:02:23.733 --> 00:02:27.333
on the command line along with
the hashing format.

00:02:29.994 --> 00:02:32.766
Since we know the type of hash we’re
cracking,

00:02:32.766 --> 00:02:38.600
we use the –format option to crack the
hashes that we dumped using mimikatz.

00:02:39.897 --> 00:02:45.100
John recognizes the hash type correctly
and sets out to crack it.

00:02:45.100 --> 00:02:49.536
A brute force attack such as this, 
however, will take a long time 

00:02:49.536 --> 00:02:51.533
based on the speed of our system.

00:02:55.845 --> 00:02:59.540
As an alternative, we can use the 
–wordlist parameter 

00:02:59.540 --> 00:03:02.733
and provide the path to a 
wordlist instead, 

00:03:02.733 --> 00:03:07.833
which shortens the process time but
promises less password coverage.

00:03:10.157 --> 00:03:14.800
If any passwords remain to be cracked, we
can next try to apply JTR’s 

00:03:14.800 --> 00:03:18.600
word mangling rules with the 
–rules parameter.

00:03:23.619 --> 00:03:28.300
Next, we’ll see how John the Ripper deals 
with Linux password hashes.

00:03:29.916 --> 00:03:33.376
In order to crack Linux-based hashes 
with John, 

00:03:33.376 --> 00:03:38.384
we will need to first use the unshadow 
utility to combine the passwd 

00:03:38.384 --> 00:03:41.533
and shadow files from the 
compromised system.

00:03:41.533 --> 00:03:46.433
Let’s quickly add a new user to our system
with a relatively weak password

00:03:46.433 --> 00:03:49.300
so we can give John something easy
to crack.

00:04:02.289 --> 00:04:06.657
Now we’ll use grep to extract the victim
user details 

00:04:06.657 --> 00:04:12.533
from /etc/passwd and /etc/shadow into
two files in our home directory.

00:04:12.533 --> 00:04:16.900
Note that root permissions are
required to read /etc/shadow.

00:04:26.467 --> 00:04:28.700
Great, let’s continue.

00:04:31.799 --> 00:04:37.300
John the Ripper requires a special hash
format that is generated with unshadow.

00:04:37.300 --> 00:04:41.096
To use unshadow, we simply pass 
the password 

00:04:41.096 --> 00:04:43.833
and shadow file names as arguments.

00:04:45.113 --> 00:04:49.600
Let’s save this to a file so we can
pass it to John.

00:04:54.703 --> 00:05:01.166
We can now run john, passing the wordlist
and the unshadowed text file as arguments.

00:05:09.150 --> 00:05:13.519
Newer versions of John the Ripper are
multi-threaded by default, 

00:05:13.519 --> 00:05:17.933
and this can be enabled on older
versions with the --fork option.

00:05:18.741 --> 00:05:22.633
We can also distribute the cracking load
across multiple computers 

00:05:22.633 --> 00:05:24.433
with the --node option.  

00:05:26.555 --> 00:05:30.216
Refer to your lab guide for more
information.

00:05:30.216 --> 00:05:35.033
Let’s clean up our system and get rid
of that new user we created.

00:05:38.066 --> 00:05:42.400
While John the Ripper is a great tool 
for cracking password hashes, 

00:05:42.400 --> 00:05:47.633
its speed is limited to the power of
the CPUs dedicated to the task.

00:05:47.633 --> 00:05:52.033
In recent years, GPUs have become
incredibly powerful 

00:05:52.033 --> 00:05:56.200
and are, of course, found in every
computer with a display.

00:06:00.066 --> 00:06:06.463
GPU-cracking tools like Hashcat
leverage the power of both the CPU

00:06:06.463 --> 00:06:11.833
 and the GPU to achieve incredible
password cracking speeds.

00:06:12.608 --> 00:06:16.300
If you would like to learn more about
GPU password cracking, 

00:06:16.300 --> 00:06:19.964
refer to your lab guide and the 
ample documentation 

00:06:19.964 --> 00:06:22.666
available on the Hashcat wiki.
