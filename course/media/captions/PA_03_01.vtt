WEBVTT

00:00:01.666 --> 00:00:06.766
HTTP htaccess Attack with Medusa

00:00:07.105 --> 00:00:11.266
According to its authors, Medusa is 
intended to be a 

00:00:11.266 --> 00:00:16.933
“speedy, massively parallel, modular, 
vlogin brute forcer”.

00:00:18.970 --> 00:00:25.500
We’ll use Medusa to attempt to gain access
to an htaccess-protected web directory.

00:00:32.507 --> 00:00:37.133
First, we’ll set up our target, an Apache 
webserver installed 

00:00:37.133 --> 00:00:41.766
on our Windows client, which we’ll start 
through the XAMPP control panel.

00:00:57.201 --> 00:01:01.533
With our services started, we’ll return 
to Kali and explore Medusa.

00:01:13.819 --> 00:01:18.233
We’ll attempt to gain access to an 
htaccess-protected folder 

00:01:18.233 --> 00:01:21.533
named admin on our Windows web server.

00:01:28.571 --> 00:01:31.966
We’ll use the rockyou wordlist for 
this example, 

00:01:31.966 --> 00:01:36.300
which we must first decompress 
with gunzip.

00:01:40.035 --> 00:01:43.533
Next, we we’ll launch Medusa and 
initiate the attack

00:01:43.533 --> 00:01:47.866
against the htaccess-protected 
URL on our target host.

00:01:48.484 --> 00:01:51.000
We’ll attack the admin user,

00:01:51.000 --> 00:01:54.766
with passwords from our rockyou 
wordlist file,

00:01:55.577 --> 00:01:59.566
and we’ll use an HTTP 
authentication scheme.

00:02:04.079 --> 00:02:09.200
In this case, Medusa discovered a working
password of “freedom”.

00:02:10.882 --> 00:02:14.133
Let’s try out these credentials in 
our browser.

00:02:23.400 --> 00:02:29.466
Excellent, our Medusa attack successfully 
retrieved the password for this directory.

00:02:35.054 --> 00:02:38.462
Medusa has many additional options 
and settings, 

00:02:38.462 --> 00:02:42.271
and can interact with a variety of 
network protocols. 

00:02:42.271 --> 00:02:45.366
These can be displayed with the 
-d option.

00:02:47.465 --> 00:02:51.233
For more information about Medusa, 
refer to your lab guide.
