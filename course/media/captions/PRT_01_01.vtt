WEBVTT

00:00:01.833 --> 00:00:03.733
RINETD

00:00:04.600 --> 00:00:08.233
We will start with a relatively basic
port forwarding example,

00:00:08.233 --> 00:00:10.533
based on the following scenario.

00:00:12.166 --> 00:00:16.300
During an assessment, we gained root
access to an Internet-connected

00:00:16.300 --> 00:00:17.700
Linux web server.

00:00:18.000 --> 00:00:23.033
From there, we found and compromised a
Linux client on an internal network,

00:00:23.033 --> 00:00:25.566
gaining access to ssh credentials.

00:00:25.966 --> 00:00:30.966
In this fairly-common scenario, our first
target, the Linux web server,

00:00:30.966 --> 00:00:36.700
has Internet connectivity, but the second
machine, the Linux client, does not.

00:00:37.200 --> 00:00:39.500
We were only able to access this client

00:00:39.500 --> 00:00:42.800
by pivoting through the
Internet-connected server.

00:00:43.200 --> 00:00:46.366
To pivot again, this time from the Linux
client,

00:00:46.366 --> 00:00:49.533
and begin assessing other machines on the
internal network,

00:00:49.533 --> 00:00:55.500
we must be able to transfer tools and
data to and from our attack machine

00:00:55.500 --> 00:00:57.033
as needed.

00:00:57.033 --> 00:00:59.966
Since this client can not reach the
Internet directly,

00:00:59.966 --> 00:01:04.766
we must use the compromised Linux web
server as a go-between,

00:01:04.766 --> 00:01:11.033
moving data twice and creating a very
tedious data-transfer process.

00:01:11.300 --> 00:01:15.100
We can use port forwarding techniques
to ease this process.

00:01:15.100 --> 00:01:19.966
To recreate this scenario, our
Internet-connected Kali Linux virtual

00:01:19.966 --> 00:01:25.200
machine will stand in as the compromised
Linux web server and our dedicated

00:01:25.200 --> 00:01:31.900
Debian Linux box as the internal,
Internet-disconnected Linux client.

00:01:34.000 --> 00:01:39.600
Our Kali machine can access the Internet,
and the client can not.

00:01:39.766 --> 00:01:44.700
We can confirm this from our Kali machine
by pinging google.com,

00:01:51.400 --> 00:01:57.033
and connecting to its IP with netcat on
port 80

00:02:03.233 --> 00:02:08.066
We can see that our Kali attack machine
has Internet access.

00:02:09.166 --> 00:02:14.266
Next, we SSH to the compromised Linux
client and test Internet connectivity

00:02:14.266 --> 00:02:17.566
from there, again with Netcat.

00:02:24.700 --> 00:02:28.100
Note that we are again connecting to the
IP address,

00:02:28.100 --> 00:02:34.200
since an Internet-disconnected internal
network will likely not have a working

00:02:34.200 --> 00:02:36.100
external DNS. 

00:02:36.366 --> 00:02:38.833
Our Internet connection test failed,

00:02:38.833 --> 00:02:43.100
proving that our Linux client does not
have internet access.

00:02:47.666 --> 00:02:52.966
If we want to transfer files to or from
an Internet-connected host in this

00:02:52.966 --> 00:02:56.600
scenario, we must first transfer them to
the Linux web server.

00:02:56.600 --> 00:03:00.466
and then transfer them again to our
intended destination.

00:03:02.633 --> 00:03:07.300
Instead, we will use a port forwarding
tool called rinetd

00:03:07.300 --> 00:03:10.633
to redirect traffic to our Kali Linux
server.

00:03:10.700 --> 00:03:12.833
This tool is easy to configure,

00:03:12.833 --> 00:03:16.133
and because it is available in the Kali
Linux repositories,

00:03:16.133 --> 00:03:19.066
it is easily installed with apt.

00:03:33.633 --> 00:03:37.633
The forwarding rules in the rinetd
configuration file

00:03:37.633 --> 00:03:40.100
requires four parameters,

00:03:40.333 --> 00:03:44.200
including bindaddress and bindport,

00:03:44.200 --> 00:03:47.666
which specify the listening IP address
and port,

00:03:48.833 --> 00:03:52.233
and connectaddress and connectport,

00:03:52.233 --> 00:03:55.566
which specify the destination address
and port.

00:03:59.933 --> 00:04:04.733
For example, we can use rinetd to
redirect any traffic received by

00:04:04.733 --> 00:04:10.466
the Kali web server on port 80 to the
google.com IP address.

00:04:10.466 --> 00:04:14.300
To do this, we edit the rinetd
configuration file,

00:04:23.266 --> 00:04:26.033
and add the following forwarding rule:

00:04:27.900 --> 00:04:33.733
This rule will cause all traffic received
on port 80 of our Kali Linux server,

00:04:33.733 --> 00:04:38.600
listening on all interfaces regardless of destination address,

00:04:38.600 --> 00:04:41.933
to be redirected to port 80,

00:04:42.433 --> 00:04:47.800
on 216.58.207.142.

00:04:48.500 --> 00:04:51.233
This is exactly what we want.

00:04:58.466 --> 00:05:03.900
First we need to restart the rinetd
service with the service command,

00:05:05.366 --> 00:05:08.300
and then use the ss utility

00:05:08.300 --> 00:05:12.366
to confirm that the service is listening
on TCP port 80.

00:05:14.866 --> 00:05:17.233
Good! The port is listening.

00:05:20.233 --> 00:05:24.866
Let’s verify that it is working by
connecting to port 80 on our Kali Linux

00:05:24.866 --> 00:05:26.400
virtual machine.

00:05:33.200 --> 00:05:36.733
The connection to our Linux server was
successful,

00:05:38.200 --> 00:05:40.933
and as shown by the Set-Cookie field,

00:05:40.933 --> 00:05:45.600
our get request was successfully
forwarded to Google’s web server.

00:05:49.066 --> 00:05:53.766
This technique can be used to connect from
our Internet-disconnected Linux client

00:05:53.766 --> 00:05:56.666
to any Internet-connected host

00:05:56.666 --> 00:06:01.033
host by changing the connectaddress and
connectport fields

00:06:01.033 --> 00:06:04.633
in the web server’s rinetd configuration
file.
