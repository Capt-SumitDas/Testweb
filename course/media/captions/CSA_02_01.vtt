WEBVTT

00:00:01.762 --> 00:00:04.662
Exploring HTML Applications

00:00:05.954 --> 00:00:12.720
Similar to an HTML page, a typical
HTML Application includes html,

00:00:12.720 --> 00:00:18.887
body, and script tags followed
by JavaScript or VBScript code.

00:00:19.725 --> 00:00:24.325
However, since the HTML Application
is executed outside the browser,

00:00:24.612 --> 00:00:28.362
we are free to use legacy and
dangerous features

00:00:28.362 --> 00:00:31.062
that are often blocked
within the browser.

00:00:31.987 --> 00:00:37.287
In this example, we will leverage
ActiveXObjects, which can potentially,

00:00:37.300 --> 00:00:42.700
and dangerously, provide access
to underlying operating system commands.

00:00:43.570 --> 00:00:47.437
We can achieve this through
WScript and in particular,

00:00:47.437 --> 00:00:51.570
the Windows Script Host Shell object.

00:00:52.504 --> 00:00:56.737
Once we instantiate a Windows
Script Host Shell object,

00:00:56.737 --> 00:00:59.004
we can invoke its run method

00:00:59.004 --> 00:01:03.058
in order to launch an application
on the target client machine.

00:01:03.700 --> 00:01:07.433
Let’s create a simple proof-of-concept
HTML Application

00:01:07.433 --> 00:01:09.566
that launches a command prompt:

00:01:16.837 --> 00:01:21.170
Our code assigns a variable to a
Windows command executable.

00:01:22.045 --> 00:01:25.545
This variable is then run
with ActiveXObject

00:01:25.545 --> 00:01:29.179
and our Windows Script Host
Shell object.

00:01:30.666 --> 00:01:33.933
We can place this code in
a file on our Kali machine

00:01:33.933 --> 00:01:36.500
and serve it from the
Apache web server.

00:01:39.387 --> 00:01:42.720
Once a victim accesses this
file using Internet Explorer,

00:01:42.720 --> 00:01:45.587
they will be presented
with a popup dialog.

00:01:53.991 --> 00:01:59.191
This dialog is the result of an
attempted execution of an .hta file.

00:01:59.629 --> 00:02:03.095
Selecting Open will prompt
an additional dialog,

00:02:03.137 --> 00:02:06.104
since the sandbox protection
of Internet Explorer,

00:02:06.104 --> 00:02:09.870
also called Protected Mode,
is enabled by default.

00:02:10.925 --> 00:02:14.125
The victim can select Allow
to permit the action

00:02:14.137 --> 00:02:19.570
which will execute the JavaScript
code and launch cmd.exe.

00:02:21.516 --> 00:02:24.616
This is a start, but it is not as
clean as it could be.

00:02:25.162 --> 00:02:27.895
While mshta.exe is executing,

00:02:27.895 --> 00:02:31.700
it keeps an additional window
open behind our command prompt.

00:02:46.325 --> 00:02:48.991
To avoid this, we can update
our proof-of-concept

00:02:48.991 --> 00:02:52.625
to close this window with the
“close” object method.

00:03:07.191 --> 00:03:11.858
Now, we can again access our
proof-of-concept in Internet Explorer,

00:03:19.179 --> 00:03:21.945
and the additional window
does not appear.

00:03:22.708 --> 00:03:23.541
Nice.


00:03:30.308 --> 00:03:34.575
This has demonstrated the basic
functionality of an HTA exploit,

00:03:34.600 --> 00:03:38.600
but we’ll need to Try Harder
to turn this into an attack.

00:03:39.425 --> 00:03:43.258
Instead of using the Run method
to launch cmd.exe,

00:03:43.295 --> 00:03:49.262
we will instead turn to the much more
powerful and capable PowerShell framework.
