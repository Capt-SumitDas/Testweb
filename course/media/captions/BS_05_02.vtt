WEBVTT

00:00:01.533 --> 00:00:02.766
While Loops

00:00:03.333 --> 00:00:08.666
While loops are also fairly common and 
execute code while an expression is true.


00:00:09.566 --> 00:00:13.033
While loops have a simple format and, 
like if statements,

00:00:13.033 --> 00:00:15.330
 use square brackets for the test.


00:00:15.933 --> 00:00:20.500
Let’s re-examine the previous example and 
rewrite it using a while loop.


00:00:23.866 --> 00:00:28.433
Our script gives the counter variable the 
initial value of 1…


00:00:28.433 --> 00:00:31.966
…Then as long as the counter variable 
is less than 10…


00:00:31.966 --> 00:00:35.000
…the IP address is printed to the screen.


00:00:35.300 --> 00:00:37.500
Let’s run this script and see what we get.

00:00:44.366 --> 00:00:47.000
This is not the output we expected 

00:00:47.000 --> 00:00:51.000
and is due to a common mistake called 
an “off by one” error.

00:00:54.733 --> 00:00:59.200
In our script, we used the less than 
operator (-lt) 

00:00:59.200 --> 00:01:03.766
instead of less than or equal to (-le)

00:01:03.766 --> 00:01:09.066
so our counter only got to nine, not ten 
as originally intended.

00:01:09.500 --> 00:01:14.233
The counter++ line uses the 
double-parentheses construct 

00:01:14.233 --> 00:01:19.500
to perform arithmetic expansion and 
evaluation at the same time.

00:01:20.166 --> 00:01:24.966
In this particular case, we use it to 
increase our counter variable by one.


00:01:24.966 --> 00:01:28.633
Fixing our script requires one minor 
change.


00:01:32.533 --> 00:01:36.933
We simply need to change it to use the 
less than or equal to operator.


00:01:43.766 --> 00:01:47.966
Good. Our while loop works quite well now.

