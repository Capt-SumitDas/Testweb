WEBVTT

00:00:01.233 --> 00:00:04.233
Nmap NFS NSE Scripts

00:00:05.266 --> 00:00:07.133
Once we find NFS running,

00:00:07.133 --> 00:00:09.433
we can collect additional information,

00:00:09.433 --> 00:00:12.366
enumerate NFS services,
and discover

00:00:12.366 --> 00:00:17.600
additional services using NSE scripts
found in the nmap scripts directory.

00:00:20.066 --> 00:00:22.133
We can run all three of these scripts

00:00:22.133 --> 00:00:24.900
using a wildcard character
in the script name.

00:00:27.666 --> 00:00:29.933
Let’s see what we can uncover
with this scan.

00:00:32.945 --> 00:00:36.166
In this case, the entire home
directory is being shared

00:00:36.166 --> 00:00:39.633
and we can access it by mounting
it on our Kali machine.

00:00:44.867 --> 00:00:48.700
We will use mount to do this,
along with -o nolock

00:00:48.700 --> 00:00:50.600
to disable file locking,

00:00:50.600 --> 00:00:53.833
which is often needed for
older NFS servers.

00:00:58.260 --> 00:01:02.333
Based on this file listing, we can see
that there are a few home directories

00:01:02.333 --> 00:01:05.033
 for local users on the remote machine.

00:01:07.460 --> 00:01:08.800
Digging a bit deeper,

00:01:08.800 --> 00:01:11.900
we find a filename that
catches our attention.

00:01:16.896 --> 00:01:18.266
Let’s try to view it:

00:01:20.883 --> 00:01:23.966
It appears we do not have permission
to view this file.

00:01:24.520 --> 00:01:26.333
Taking a closer look at the file,

00:01:26.333 --> 00:01:30.472
we notice that its owner
has a UUID of 1014,

00:01:30.472 --> 00:01:34.333
and the file has read, write,
and execute permissions on it.

00:01:35.274 --> 00:01:37.133
What can we do with this information?

00:01:38.635 --> 00:01:41.700
Since we have complete access to our Kali machine,

00:01:41.700 --> 00:01:46.333
we can try to add a local user to it
using the adduser command,

00:01:46.333 --> 00:01:49.666
change its UUID to 1014,

00:01:49.666 --> 00:01:53.900
su to that user, and then
try accessing the file again.

00:01:54.466 --> 00:01:57.900
Let’s begin by adding a
user with the adduser command.

00:02:07.134 --> 00:02:08.733
Based on the output above,

00:02:08.733 --> 00:02:13.300
we can see that the new user
has a UUID of 1001,

00:02:13.300 --> 00:02:15.533
which is not really what we need.

00:02:16.766 --> 00:02:19.733
We can change it to 1014 using sed

00:02:19.733 --> 00:02:22.266
and confirm the change took place.

00:02:24.551 --> 00:02:28.033
The -i option is used to replace
the file in-place

00:02:28.033 --> 00:02:31.066
and the -e option executes a script.

00:02:32.157 --> 00:02:34.394
The final argument is the script

00:02:34.394 --> 00:02:40.233
which replaces all occurances
of 1001 with 1004

00:02:45.253 --> 00:02:46.966
So far so good.

00:02:48.895 --> 00:02:52.233
Let’s su to the newly added pwn user,

00:02:52.233 --> 00:02:55.600
verify that our UUID has indeed changed,

00:02:55.600 --> 00:02:58.700
and then try accessing
that creds file again.

00:02:59.680 --> 00:03:03.966
We will use the su command to change
the current login session’s owner.

00:03:06.466 --> 00:03:10.500
Then, we will use id to display
our current user ID.

00:03:11.425 --> 00:03:14.366
Finally, we will try to
access the file again.

00:03:15.955 --> 00:03:16.955
Excellent!

00:03:16.955 --> 00:03:20.866
We can now read the file and
make changes to it if we wish.

00:03:21.404 --> 00:03:25.133
Although the file contents were not what
we expected in this particular instance,

00:03:25.133 --> 00:03:27.466
systems with this level of security are

00:03:27.466 --> 00:03:30.600
notorious for storing
sensitive information

00:03:30.600 --> 00:03:32.633
in plain-text files.

00:03:34.538 --> 00:03:38.333
Take a moment to think about what else we
might have been able to do in this case,

00:03:38.333 --> 00:03:40.866
from having SSH keys replaced,

00:03:40.866 --> 00:03:43.833
to reading confidential files,
and so forth.
