WEBVTT

00:00:01.626 --> 00:00:03.633
Executable Payloads

00:00:05.571 --> 00:00:08.875
Metasploit Framework payloads
can also be exported

00:00:08.875 --> 00:00:11.900
into various file types and formats

00:00:11.900 --> 00:00:21.400
such as ASP, VBScript, Jar, War,
Windows DLL and EXE, and more.

00:00:23.924 --> 00:00:27.980
For example, let’s use the msfvenom
utility to generate a

00:00:27.980 --> 00:00:34.300
Windows Portable Executable
(or PE file) reverse shell.

00:00:36.766 --> 00:00:40.033
We’ll use -p to set the payload,

00:00:40.780 --> 00:00:46.000
set LHOST and LPORT to assign
the listening host and port,

00:00:46.746 --> 00:00:51.800
-f to set the output format
(in this case exe),

00:00:52.100 --> 00:00:56.066
and -o to specify the output file name.

00:01:00.937 --> 00:01:04.766
The shellcode embedded in
the PE file can be encoded using

00:01:04.766 --> 00:01:07.933
any of the many MSF encoders.

00:01:09.764 --> 00:01:13.275
Although the encoders are primarily
designed to deal with character

00:01:13.275 --> 00:01:19.500
limitations some encoders incidentally
bypass obsolete AV engines

00:01:21.722 --> 00:01:27.066
The encoding is configured with
-e to specify the encoder,

00:01:28.666 --> 00:01:33.600
and -i to set the desired number
of encoding iterations.

00:01:35.146 --> 00:01:40.266
We can use multiple encoding iterations
to further obfuscate the binary, 

00:01:40.266 --> 00:01:44.533
which could effectively evade
rudimentary signature detection.

00:01:47.911 --> 00:01:52.266
Another useful feature of Metasploit is
the ability to inject a payload

00:01:52.266 --> 00:01:58.966
into an existing PE file, which may
further reduce the chances of AV detection

00:02:02.886 --> 00:02:09.133
The injection is done with the -x flag,
specifying the file to inject into.

00:02:13.026 --> 00:02:18.200
These payloads can be used as part of a
client side attack, as a backdoor,

00:02:18.200 --> 00:02:24.633
or stand-alone as an easy method to get a
payload from one machine to another.

00:02:25.788 --> 00:02:29.066
When an unsuspecting user
executes our binary,

00:02:29.066 --> 00:02:32.333
it will operate normally
from their perspective.

00:02:32.760 --> 00:02:37.533
Behind the scenes however, the injected
payload will attempt to connect back

00:02:37.533 --> 00:02:39.233
 to our awaiting listener.

00:02:41.562 --> 00:02:45.433
A little known secret is that this
process can also be accomplished 

00:02:45.433 --> 00:02:50.100
from within msfconsole with
the “generate” command.

00:02:50.402 --> 00:02:55.266
For example, we can recreate the
previous msfvenom example

00:02:55.266 --> 00:02:59.933
by selecting our payload and
configuring the same options.

00:03:06.280 --> 00:03:11.700
Then we’ll issue the generate command with
the same options we used before.
