WEBVTT

00:00:01.902 --> 00:00:06.400
Insecure File Permissions:
Serviio Case Study

00:00:07.361 --> 00:00:10.100
A common way to elevate
privileges on Windows

00:00:10.100 --> 00:00:16.433
is to exploit insecure file permissions
on services that run as system.

00:00:17.257 --> 00:00:23.133
For example, a software developer creates
a program that runs as a Windows service,

00:00:23.133 --> 00:00:24.966
but during the installation,

00:00:24.966 --> 00:00:28.966
the developer does not secure
the permissions of the program,

00:00:28.966 --> 00:00:34.033
allowing everyone full read
and write access to it.

00:00:34.779 --> 00:00:38.633
As a result, the program could
be replaced with a malicious one.

00:00:39.516 --> 00:00:42.500
When the service is restarted
or the machine is rebooted,

00:00:42.500 --> 00:00:46.766
the malicious file will be
executed with SYSTEM privileges.

00:00:47.473 --> 00:00:51.100
This type of vulnerability exists
on our Windows client.


00:00:55.301 --> 00:00:58.333
Let’s take a look at the
vulnerability and exploit it.

00:00:59.275 --> 00:01:05.466
In one of the previous sections we showed
how to list running services with tasklist

00:01:06.173 --> 00:01:09.066
Alternatively, we could use PowerShell.

00:01:16.526 --> 00:01:24.833
We will use the Get-WmiObject cmdlet with
the win32_service WMI class,

00:01:25.913 --> 00:01:30.833
pipe the output to Select-Object to
display the fields we are interested in,

00:01:31.441 --> 00:01:35.466
and use Where-Object to
display running services.

00:01:39.098 --> 00:01:42.833
Based on this output, the
Serviio service stands out

00:01:42.833 --> 00:01:46.633
because it is installed in the
Program Files directory.

00:01:47.732 --> 00:01:51.466
Software in the Program Files
directory is user-installed

00:01:51.466 --> 00:01:55.333
and the software developer
controls the directory structure

00:01:55.333 --> 00:01:57.600
and permissions of the software.

00:01:58.169 --> 00:02:01.833
Therefore, it is more prone to
this type of vulnerability.

00:02:02.402 --> 00:02:08.066
Next, let’s enumerate the permissions on
the target service with the icacls utility

00:02:26.167 --> 00:02:30.933
This utility will output the
service’s Security Identifiers

00:02:30.933 --> 00:02:36.266
followed by a permission mask, which is
defined in the icacls documentation.

00:02:41.861 --> 00:02:45.700
We can run icacls passing the full
service name as an argument.

00:02:49.744 --> 00:02:52.076
As suspected, the permissions
associated with the

00:02:52.076 --> 00:02:55.233
ServiioService.exe executable

00:02:55.233 --> 00:03:01.033
allows any user on the system
full read and write access to it.

00:03:01.524 --> 00:03:04.266
This is a serious vulnerability.

00:03:07.172 --> 00:03:09.100
In order to exploit this
type of vulnerability,

00:03:09.100 --> 00:03:12.566
we can replace ServiioService.exe

00:03:12.566 --> 00:03:16.466
with our own malicious
binary and then trigger it

00:03:16.466 --> 00:03:20.400
by restarting the service or
rebooting the machine.

00:03:26.760 --> 00:03:29.100
We’ll demonstrate this
attack with an example.

00:03:33.006 --> 00:03:36.933
This C code will create
a user named “evil”

00:03:36.933 --> 00:03:41.000
and add that user to the
local Administrators group.

00:03:45.966 --> 00:03:51.400
First, we’ll cross-compile the code on
our Kali machine with mingw,

00:03:51.400 --> 00:03:55.633
using -o to specify the name
of the executable.

00:04:05.351 --> 00:04:07.600
We can now transfer it to our target,

00:04:31.688 --> 00:04:36.300
and replace the original 
erviioService.exe binary

00:04:36.300 --> 00:04:38.466
with our malicious copy.

00:04:48.616 --> 00:04:52.833
In order to execute the binary,
let’s try to restart the service.

00:04:56.170 --> 00:05:01.100
Unfortunately, we dont have permissions
to stop the Serviio service.

00:05:01.728 --> 00:05:04.700
This is expected because
administrative users

00:05:04.700 --> 00:05:08.100
are usually responsible
for managing services.

00:05:08.551 --> 00:05:11.633
Since we do not have permission
to manually restart the service,

00:05:11.633 --> 00:05:13.666
we must try something else.

00:05:17.259 --> 00:05:19.433
If the service is set to “Automatic”,

00:05:19.433 --> 00:05:23.833
we may be able to restart the service
by rebooting the machine.

00:05:24.736 --> 00:05:29.800
Let’s check the start options of
the service with the help of wmic.

00:05:35.984 --> 00:05:39.766
This service will automatically
start after a reboot.

00:05:40.610 --> 00:05:42.888
Let’s use the whoami
command to determine if our

00:05:42.888 --> 00:05:46.900
current user has the rights
to restart the system:

00:05:50.080 --> 00:05:54.966
The output shows that our user has
been granted shutdown privileges

00:05:54.966 --> 00:05:57.966
and we should be able to
reboot the system.

00:05:58.594 --> 00:06:02.366
The Disabled state only means
the privilege is not enabled

00:06:02.366 --> 00:06:06.166
for the running process,
in our case, whoami.

00:06:06.696 --> 00:06:08.266
It has not requested

00:06:08.266 --> 00:06:12.633
and is therefore not using
the SeShutdownPrivilege privilege.

00:06:13.575 --> 00:06:16.866
If the SeShutdownPrivilege
was not listed,

00:06:16.866 --> 00:06:20.866
we would have to wait for the
victim to manually start the machine,

00:06:20.866 --> 00:06:23.033
which would be much
less convenient.

00:06:24.859 --> 00:06:28.533
Let’s go ahead and reboot with /r,

00:06:28.533 --> 00:06:30.666
in zero seconds.

00:06:38.774 --> 00:06:42.200
Now that the machine has rebooted,
we should be able to log in

00:06:42.200 --> 00:06:46.500
to the target machine using
the new “evil” user account.

00:06:58.299 --> 00:06:59.433
Once logged on,

00:07:04.066 --> 00:07:07.200
we can confirm that the evil
user is part of the local

00:07:07.200 --> 00:07:11.833
Administrators group with
the net localgroup command.

00:07:13.600 --> 00:07:19.700
Very Nice. We used the insecure file
permissions to replace the service program

00:07:19.700 --> 00:07:24.900
with our own malicious one that gave us
an Administrative account on the system.
