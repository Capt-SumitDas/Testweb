WEBVTT

00:00:01.450 --> 00:00:03.183
Client Fingerprinting

00:00:04.616 --> 00:00:07.116
The process of client fingerprinting

00:00:07.116 --> 00:00:10.316
is extremely critical to the
success of our attack,

00:00:11.041 --> 00:00:13.641
but to obtain the most
precise information

00:00:13.641 --> 00:00:17.708
we must often gather it from
the target machine itself.

00:00:18.441 --> 00:00:20.608
Let’s assume we have
convinced our victim

00:00:20.608 --> 00:00:24.508
to visit our malicious web page
in a practical example.

00:00:25.383 --> 00:00:29.616
Our goal will be to identify the
victim’s web browser version

00:00:29.616 --> 00:00:33.750
and gather information about
the underlying operating system.

00:00:36.616 --> 00:00:38.883
We could create our own custom tool,

00:00:38.883 --> 00:00:43.116
but there are many available
open-source fingerprinting projects.

00:00:43.916 --> 00:00:47.216
The most reliable are generally
those that directly leverage

00:00:47.216 --> 00:00:51.250
common client-side components
such as JavaScript.

00:00:52.083 --> 00:00:57.616
For this example, we will use the
Fingerprintjs2 JavaScript library,

00:00:57.616 --> 00:01:02.150
which can be installed by downloading
and extracting the project archive

00:01:02.150 --> 00:01:04.516
from its GitHub repository:

00:01:16.108 --> 00:01:19.041
Let’s unzip the Fingerprint application,

00:01:19.416 --> 00:01:21.816
move it to the fp directory,

00:01:25.308 --> 00:01:29.041
and incorporate this library
into an HTML file

00:01:29.041 --> 00:01:32.575
based on the examples included
with the project.

00:01:40.283 --> 00:01:44.483
We'll include the fingerprint2.js library

00:01:44.533 --> 00:01:48.133
from within the fingerprint2.html
HTML file

00:01:48.133 --> 00:01:52.741
located in the fp directory of
our Kali web server.

00:01:53.450 --> 00:01:58.750
The JavaScript code invokes the
Fingerprint2.get static function

00:01:58.750 --> 00:02:01.083
to start the fingerprinting process.

00:02:02.808 --> 00:02:07.575
The components variable returned
by the library is an array containing

00:02:07.575 --> 00:02:10.608
all the information extracted
from the client.

00:02:12.175 --> 00:02:16.808
The values stored in the components
array are used to create a hash

00:02:16.808 --> 00:02:21.950
fingerprint of the browser, which is
assigned to the murmur variable.

00:02:24.183 --> 00:02:29.350
Finally, the same values are extracted
and displayed in the HTML page.

00:02:35.725 --> 00:02:38.325
In our Windows client, we’ll
simulate a victim

00:02:38.350 --> 00:02:41.050
navigating to the
fingerprinting web page.

00:02:51.700 --> 00:02:54.000
The web page in our
Windows lab machine

00:02:54.000 --> 00:02:57.333
reveals that these few lines
of JavaScript code

00:02:57.433 --> 00:03:01.333
extracted the Windows
browser User Agent string,

00:03:01.458 --> 00:03:03.025
its localization,

00:03:03.208 --> 00:03:06.408
the installed browser plugins
and relative version,

00:03:06.641 --> 00:03:09.508
generic information
regarding the underlying

00:03:09.508 --> 00:03:13.775
win32 operating system platform
and other details.

00:03:26.791 --> 00:03:31.491
Submitting this User Agent string
to an online user agent database,

00:03:31.725 --> 00:03:37.791
identifies the browser version
and operating system as Edge 41

00:03:37.791 --> 00:03:41.433
running on the 32-bit
version of Windows 10.

00:03:42.266 --> 00:03:44.900
We managed to gather the
information we were after,

00:03:44.900 --> 00:03:50.233
but the JavaScript code displays data to
the victim rather than to the attacker.

00:03:54.008 --> 00:03:58.108
This is obviously not very useful
so we need to find a way to transfer

00:03:58.108 --> 00:04:01.741
the extracted information to
our attacking web server.

00:04:05.250 --> 00:04:08.983
We’ll create a file that will act
as a fingerprinting web page

00:04:09.008 --> 00:04:14.208
and add a few lines of Ajax code to
send the data back to our web server.

00:04:19.550 --> 00:04:25.316
In this code, the XMLHttpRequest
JavaScript API

00:04:25.316 --> 00:04:29.850
interacts with the attacking
web server via a POST request.

00:04:30.375 --> 00:04:33.975
The POST request is issued
against the same server

00:04:33.975 --> 00:04:36.275
where the malicious web
page is stored,

00:04:36.275 --> 00:04:44.641
therefore the URL used in the xmlhttp.open
method does not specify an IP address.

00:04:45.341 --> 00:04:46.908
The components array,

00:04:47.158 --> 00:04:51.591
which contains the information
extracted by the Fingerprint2 library,

00:04:51.616 --> 00:04:57.350
is processed by a few lines of JavaScript
code, similar to the previous example.

00:04:58.533 --> 00:05:04.466
This time, however, the resultant
output string, the clientfp variable,

00:05:04.466 --> 00:05:09.808
is sent to js.php via
a POST request.

00:05:14.116 --> 00:05:16.783
Let’s look at the js.php PHP code

00:05:16.783 --> 00:05:20.516
that processes the POST
request on the attacking server:

00:05:25.916 --> 00:05:30.083
The PHP code first extracts
the client IP address,

00:05:30.108 --> 00:05:33.541
from the $_SERVER array,

00:05:34.075 --> 00:05:38.875
which contains server and execution
environment information.

00:05:39.816 --> 00:05:43.716
Then the IP address is concatenated
to the text string

00:05:43.741 --> 00:05:46.808
received from the JavaScript
POST request,

00:05:47.216 --> 00:05:52.516
and written to the fingerprint.txt
file in the fp directory.

00:05:53.483 --> 00:05:56.150
Notice the use of the FILE_APPEND flag,

00:05:56.150 --> 00:06:00.283
which allows us to store multiple
fingerprints to the same file.

00:06:06.083 --> 00:06:11.916
In order for this code to work, we need
to allow the Apache www-data user

00:06:11.916 --> 00:06:14.483
to write to the fp directory.

00:06:15.083 --> 00:06:21.250
To do this, we’ll change the owner of
the fp directory to www-data.

00:06:22.758 --> 00:06:27.825
Once the victim browses the
fingerprint2server.html web page,

00:06:27.825 --> 00:06:33.225
we can inspect the contents of
fingerprint.txt on our attack server.

00:06:52.125 --> 00:06:56.325
The XMLHttpRequest
silently transferred the data

00:06:56.325 --> 00:07:00.358
to our attack server without
any interaction from the victim.
