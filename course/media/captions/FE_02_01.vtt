WEBVTT

00:00:01.645 --> 00:00:04.266
Considerations and Overview

00:00:05.656 --> 00:00:10.566
Even though we might not have to deal with
hex-encoded payloads in web exploits,

00:00:10.566 --> 00:00:13.900
it is important that we properly
read the code

00:00:13.900 --> 00:00:18.733
to understand what considerations
must be taken in our editing process.

00:00:19.611 --> 00:00:24.633
When modifying web exploits, there are
several key questions we need to ask:

00:00:25.765 --> 00:00:30.766
Does it initiate an
HTTP or HTTPS connection?

00:00:31.737 --> 00:00:36.566
Does it access a web application
specific path or route?

00:00:37.925 --> 00:00:42.233
Does the exploit leverage a
pre-authentication vulnerability?

00:00:42.839 --> 00:00:47.100
If not, how does the exploit
authenticate to the web application?

00:00:48.917 --> 00:00:55.633
How are the GET or POST requests crafted
to trigger and exploit the vulnerability?

00:00:57.709 --> 00:01:00.800
Does it rely on default application settings

00:01:00.800 --> 00:01:03.800
(such as the web path of the application)

00:01:03.800 --> 00:01:06.833
that may have been
changed after installation?

00:01:07.993 --> 00:01:12.600
Will oddities such as self-signed
certificates disrupt the exploit?

00:01:14.729 --> 00:01:18.266
We must also remember that
public web application exploits

00:01:18.266 --> 00:01:21.533
do not take into account
additional protections

00:01:21.533 --> 00:01:23.666
 such as .htaccess.
