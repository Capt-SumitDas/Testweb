WEBVTT

00:00:01.666 --> 00:00:03.533
Port Scanning with Nmap

00:00:04.566 --> 00:00:07.300
Nmap is one of the
most popular, versatile,

00:00:07.300 --> 00:00:09.700
and robust port scanners available.

00:00:10.266 --> 00:00:15.500
Some of the Nmap example scans we
cover in this module are run using sudo.

00:00:15.766 --> 00:00:17.100
This is due to the fact that

00:00:17.100 --> 00:00:19.200
quite a few Nmap scanning options

00:00:19.200 --> 00:00:22.100
require access to raw sockets,

00:00:22.100 --> 00:00:25.066
which in turn require root privileges.

00:00:25.566 --> 00:00:27.500
Let’s explore some port scanning examples

00:00:27.500 --> 00:00:31.000
to get a better feel for Nmap
and its options.

00:00:32.833 --> 00:00:35.133
Accountability for Our Traffic

00:00:36.200 --> 00:00:38.833
A default Nmap TCP scan

00:00:38.833 --> 00:00:43.200
will scan the 1,000 most popular
ports on a given machine.

00:00:43.933 --> 00:00:46.166
Before we start running scans blindly,

00:00:46.166 --> 00:00:50.000
let’s examine the amount of traffic
sent by this type of scan.

00:00:50.500 --> 00:00:54.033
We’ll scan one of the lab machines
while using iptables

00:00:54.033 --> 00:00:56.833
to monitor the amount of
traffic sent to the target.

00:00:56.833 --> 00:01:01.733
First, we’ll use the iptables -I option

00:01:01.733 --> 00:01:06.633
to insert a new rule into the
INPUT chain in the first position…

00:01:07.333 --> 00:01:11.233
… -s to specify a source IP address,

00:01:11.233 --> 00:01:14.100
which is the IP address
we are going to scan…

00:01:15.166 --> 00:01:17.233
…and -j ACCEPT

00:01:17.233 --> 00:01:19.366
to allow the traffic to pass.

00:01:21.000 --> 00:01:23.800
We’ll also add a rule to the OUTPUT chain.

00:01:25.066 --> 00:01:28.600
This time, we specify OUTPUT as the chain

00:01:28.600 --> 00:01:33.100
and use -d to specify the
destination IP address.

00:01:35.000 --> 00:01:37.766
Lastly, we will use the -Z option

00:01:37.766 --> 00:01:41.633
to zero the packet and
byte counters in all chains.

00:01:43.100 --> 00:01:45.866
Now let’s generate
some traffic using nmap.

00:01:48.933 --> 00:01:52.200
We’ll run a default scan by
providing the target IP address

00:01:52.200 --> 00:01:54.466
without any other options.

00:01:57.566 --> 00:02:01.500
The scan completed and
revealed a few open ports.

00:02:01.666 --> 00:02:05.066
Now let’s inspect some iptables statistics

00:02:05.066 --> 00:02:08.600
to get an idea of how much
traffic our scan generated.

00:02:11.933 --> 00:02:16.066
We will use the -v option to
add some verbosity to our output,

00:02:16.066 --> 00:02:19.033
-n to enable numeric output,

00:02:19.033 --> 00:02:23.666
and -L to list the rules
present in all chains.

00:02:26.266 --> 00:02:27.733
According to this output,

00:02:27.733 --> 00:02:33.433
the default 1,000-port scan has
generated around 70 kilobytes of traffic.

00:02:34.733 --> 00:02:39.666
Let’s zero the iptables packet and
byte counters in all chains again

00:02:39.666 --> 00:02:41.966
and run another nmap scan.

00:02:47.600 --> 00:02:53.066
This time, we’ll use the -p option
to specify ALL TCP ports.

00:03:02.033 --> 00:03:08.300
In this port scan explicitly
probing all 65,535 ports,

00:03:08.300 --> 00:03:11.766
we generated about 4 megabytes of traffic,

00:03:11.766 --> 00:03:13.900
a significantly higher amount.

00:03:14.933 --> 00:03:19.133
These results imply that a full
Nmap scan of a class C network

00:03:19.133 --> 00:03:22.300
would result in sending over 1,000
megabytes of traffic to the network.

00:03:22.300 --> 00:03:27.600
this full port scan has discovered

00:03:27.600 --> 00:03:31.366
new ports that were not found
by the default TCP scan.

00:03:33.833 --> 00:03:40.500
In an ideal situation, a full TCP and UDP
port scan of every single target machine

00:03:40.500 --> 00:03:43.600
would provide the most
accurate information

00:03:43.600 --> 00:03:46.100
about exposed network services.

00:03:46.566 --> 00:03:51.233
However, this example reveals the need
to balance any traffic restrictions

00:03:51.233 --> 00:03:53.033
(such as a slow uplink),

00:03:53.033 --> 00:03:57.033
with the need to discover additional
open ports and services.

00:03:57.033 --> 00:04:01.933
In the next section, we’ll explore some
of Nmap’s various scanning techniques.

00:04:04.233 --> 00:04:06.366
Stealth / SYN Scanning

00:04:07.800 --> 00:04:12.700
Nmap’s preferred scanning technique
is a SYN, or “stealth” scan.

00:04:13.166 --> 00:04:15.600
There are many benefits to using a SYN scan

00:04:15.600 --> 00:04:18.300
and as such, it is the default scan technique

00:04:18.300 --> 00:04:20.633
used when no scan technique is specified

00:04:20.633 --> 00:04:24.900
and the user has the required
raw sockets privileges.

00:04:25.400 --> 00:04:28.433
SYN scanning is a TCP port scanning method

00:04:28.433 --> 00:04:30.666
that involves sending SYN packets

00:04:30.666 --> 00:04:32.933
to various ports on a target machine

00:04:32.933 --> 00:04:35.733
without completing a TCP handshake.

00:04:36.300 --> 00:04:38.333
If a TCP port is open,

00:04:38.333 --> 00:04:41.366
a SYN-ACK should be sent back
from the target machine,

00:04:41.366 --> 00:04:43.800
informing us that the port is open.

00:04:44.500 --> 00:04:48.066
At this point, nmap does not bother
to send the final ACK

00:04:48.066 --> 00:04:49.933
to complete the three-way handshake.

00:04:52.100 --> 00:04:54.300
To launch a SYN scan with nmap,

00:04:54.300 --> 00:04:56.633
we preface the command with sudo

00:04:56.633 --> 00:05:00.300
and provide the -sS option.

00:05:05.266 --> 00:05:08.066
Because the three-way handshake
is never completed,

00:05:08.066 --> 00:05:11.400
the information is not
passed to the application layer

00:05:11.400 --> 00:05:15.466
and as a result, will not appear
in any application logs.

00:05:15.466 --> 00:05:19.133
A SYN scan is also faster
and more efficient

00:05:19.133 --> 00:05:22.100
because fewer packets
are sent and received.

00:05:23.366 --> 00:05:27.466
Note that the term “stealth”
refers to the fact that, in the past,

00:05:27.466 --> 00:05:32.400
primitive firewalls would fail to log
incomplete TCP connections.

00:05:32.400 --> 00:05:37.233
Combined with the fact that application
logs wouldn't catch the scan.

00:05:39.800 --> 00:05:42.066
TCP Connect Scanning

00:05:43.066 --> 00:05:46.933
When a user running nmap does not have
raw socket privileges,

00:05:46.933 --> 00:05:52.166
Nmap will default to the TCP connect scan
technique described earlier.

00:05:52.766 --> 00:05:57.333
Since a TCP connect scan makes use
of the Berkeley sockets API

00:05:57.333 --> 00:05:59.300
to perform the three-way handshake,

00:05:59.300 --> 00:06:02.433
it does not require elevated privileges.

00:06:02.433 --> 00:06:06.966
However, because Nmap has to wait
for the connection to complete

00:06:06.966 --> 00:06:10.133
before the API will return
the status of the connection,

00:06:10.133 --> 00:06:14.900
a connect scan takes much longer
to complete than a SYN scan.

00:06:14.900 --> 00:06:19.133
There might be times when we need
to specifically perform a connect scan,

00:06:19.133 --> 00:06:23.600
for example, when scanning
through certain types of proxies.

00:06:24.733 --> 00:06:29.100
We use the -sT option
to start a connect scan.

00:06:34.333 --> 00:06:37.000
Next, we’ll move on to UDP scanning.

00:06:40.833 --> 00:06:42.300
UDP Scanning

00:06:43.200 --> 00:06:45.266
When performing a UDP scan,

00:06:45.266 --> 00:06:48.433
Nmap will use a combination
of two different methods

00:06:48.433 --> 00:06:51.600
to determine if a port is open or closed.

00:06:52.266 --> 00:06:54.233
For most ports, it will use the standard

00:06:54.233 --> 00:06:58.066
“ICMP port unreachable”
method described earlier

00:06:58.066 --> 00:07:01.233
by sending an empty packet
to a given port.

00:07:01.233 --> 00:07:05.433
However, for common ports,
such as port 161

00:07:05.433 --> 00:07:07.233
that is used by SNMP,

00:07:07.233 --> 00:07:10.900
it will send a protocol-specific
SNMP packet

00:07:10.900 --> 00:07:15.766
in an attempt to get a response from
an application bound to that port.

00:07:16.866 --> 00:07:20.433
To perform a UDP scan, the -sU option

00:07:20.433 --> 00:07:24.600
is used and sudo is required
to access raw sockets.

00:07:30.033 --> 00:07:35.000
The UDP scan can also be used in
conjunction with a TCP SYN scan

00:07:35.000 --> 00:07:38.133
to build a more complete
picture of our target.

00:07:45.866 --> 00:07:47.000
In the next section,

00:07:47.000 --> 00:07:49.966
we’ll explore techniques for
handling larger networks,

00:07:49.966 --> 00:07:52.300
or networks with traffic constraints.

00:07:56.266 --> 00:07:57.733
Network Sweeping

00:07:58.933 --> 00:08:00.500
To deal with large volumes of hosts,

00:08:00.500 --> 00:08:03.800
or to otherwise try to conserve
network traffic,

00:08:03.800 --> 00:08:07.866
we can attempt to probe targets
using Network Sweeping techniques,

00:08:07.866 --> 00:08:10.533
in which we begin with broad scans,

00:08:10.533 --> 00:08:14.100
and use more specific scans against
hosts of interest.

00:08:15.366 --> 00:08:20.100
When performing a network sweep
with Nmap using the -sn option,

00:08:20.100 --> 00:08:22.633
the host discovery process

00:08:22.633 --> 00:08:26.533
consists of more than just
sending an ICMP echo request.

00:08:27.200 --> 00:08:31.600
Several other probes are used
in addition to the ICMP request.

00:08:35.466 --> 00:08:39.100
Nmap also sends a TCP SYN packet

00:08:39.100 --> 00:08:40.933
to port 443,

00:08:40.933 --> 00:08:43.966
a TCP ACK packet to port 80,

00:08:43.966 --> 00:08:46.866
and an ICMP timestamp request

00:08:46.866 --> 00:08:50.233
to verify if a host is available or not.

00:08:52.833 --> 00:08:55.233
Searching for live machines
using the grep command

00:08:55.233 --> 00:08:58.300
on a standard nmap output
can be cumbersome.

00:08:58.766 --> 00:09:02.300
Instead, let’s use Nmap’s “greppable”
output parameter,

00:09:02.300 --> 00:09:04.433
-oG,

00:09:04.433 --> 00:09:08.566
to save these results into a format
that is easier to manage.

00:09:15.700 --> 00:09:20.100
Now we can easily grep the text file
for machines that are up.

00:09:22.966 --> 00:09:28.033
We can also sweep for specific
TCP or UDP ports across the network,

00:09:28.033 --> 00:09:30.833
probing for common services and ports,

00:09:30.833 --> 00:09:34.133
in an attempt to locate systems
that may be useful,

00:09:34.133 --> 00:09:37.200
or otherwise have known vulnerabilities.

00:09:40.666 --> 00:09:43.933
In this scan, we will look for
TCP port 80.

00:09:44.500 --> 00:09:48.066
This scan tends to be more accurate
than a ping sweep.

00:09:52.833 --> 00:09:55.633
Now we can quickly get
a list of IP addresses

00:09:55.633 --> 00:09:58.366
that have TCP port 80 open on them.

00:10:03.966 --> 00:10:05.900
To save time and network resources,

00:10:05.900 --> 00:10:08.000
we can also scan multiple IPs,

00:10:08.000 --> 00:10:10.966
probing for a short list of common ports.

00:10:14.266 --> 00:10:17.966
For example, let’s conduct a
TCP connect scan

00:10:17.966 --> 00:10:23.000
for the top twenty TCP ports
with the –top-ports option…

00:10:23.633 --> 00:10:29.900
and enable OS version detection,
script scanning, and traceroute with -A.

00:10:38.266 --> 00:10:43.066
The top twenty ports are determined
by the nmap services file.

00:10:47.900 --> 00:10:53.466
The file uses a simple format
of 3 whitespace-separated columns.

00:10:53.933 --> 00:10:56.166
The first is the name of the service, 

00:10:56.833 --> 00:11:00.600
the second contains the
port number and protocol

00:11:01.133 --> 00:11:03.400
and the third, the “port frequency”.

00:11:04.000 --> 00:11:06.666
Everything after the third column is ignored

00:11:06.666 --> 00:11:08.700
but is typically used for comments.

00:11:09.266 --> 00:11:13.666
The port frequency is based on
how often the port was found open

00:11:13.666 --> 00:11:16.000
during research scans of the internet.

00:11:18.200 --> 00:11:21.566
At this point, we could conduct a more
exhaustive scan

00:11:21.566 --> 00:11:23.366
against individual machines

00:11:23.366 --> 00:11:24.900
that are service-rich

00:11:24.900 --> 00:11:26.800
or are otherwise interesting.

00:11:27.566 --> 00:11:30.000
There are many different ways 
we can be creative with our scanning

00:11:30.000 --> 00:11:33.233
to conserve bandwidth
or lower our profile.

00:11:35.366 --> 00:11:37.100
OS Fingerprinting

00:11:38.300 --> 00:11:41.933
Nmap has a built-in feature
called OS fingerprinting

00:11:41.933 --> 00:11:45.100
that attempts to guess the
target’s operating system

00:11:45.100 --> 00:11:47.666
by inspecting returned packets.

00:11:48.400 --> 00:11:50.700
This is possible because operating systems

00:11:50.700 --> 00:11:53.800
often have slightly
different implementations

00:11:53.800 --> 00:11:55.566
of the TCP/IP stack

00:11:55.566 --> 00:12:01.433
and these slight variances create a
fingerprint that Nmap can often identify.

00:12:02.266 --> 00:12:05.966
Nmap will inspect the traffic
received from the target machine

00:12:05.966 --> 00:12:09.233
and attempt to match the
fingerprint to a known list.

00:12:10.500 --> 00:12:12.233
The OS fingerprinting option

00:12:12.233 --> 00:12:15.400
can be enabled with the -O option.


00:12:20.000 --> 00:12:21.066
The response suggests

00:12:21.066 --> 00:12:24.366
that the underlying
\operating system of this target

00:12:24.366 --> 00:12:26.033
is either Windows 7  

00:12:26.033 --> 00:12:28.600
or Windows 2008 R2.

00:12:29.600 --> 00:12:33.100
Note that OS Fingerprinting 
is not always 100% accurate,

00:12:33.100 --> 00:12:35.100
but a best-guess attempt.

00:12:37.966 --> 00:12:40.966
Consider a more careful
examination of the target

00:12:40.966 --> 00:12:43.366
to confirm an OS fingerprint scan.

00:12:45.533 --> 00:12:48.333
Banner Grabbing/Service Enumeration

00:12:49.733 --> 00:12:52.800
We can identify services
running on specific ports

00:12:52.800 --> 00:12:55.000
by inspecting service banners

00:12:55.000 --> 00:12:56.966
and running various OS

00:12:56.966 --> 00:13:00.100
and service enumeration
scripts against the target.

00:13:01.217 --> 00:13:03.966
Nmap’s -sV option

00:13:03.966 --> 00:13:08.566
probes open ports to determine
service and version information.

00:13:12.877 --> 00:13:17.000
Keep in mind that banners can be modified
by system administrators.

00:13:19.177 --> 00:13:20.033
As such,

00:13:20.033 --> 00:13:23.466
these can be intentionally
set to fake service names

00:13:23.466 --> 00:13:25.933
in order to mislead a potential attacker.

00:13:27.365 --> 00:13:30.433
Nmap Scripting Engine (NSE)

00:13:31.607 --> 00:13:35.533
The Nmap Scripting Engine is used
to launch user-created scripts

00:13:35.533 --> 00:13:38.766
in order to automate various
scanning tasks.

00:13:39.267 --> 00:13:44.100
These scripts perform a broad range
of functions including DNS enumeration,

00:13:44.100 --> 00:13:45.733
brute force attacks,

00:13:45.733 --> 00:13:48.233
and even vulnerability identification.

00:13:48.910 --> 00:13:54.466
NSE scripts are located in the
/usr/share/nmap/scripts directory.

00:13:56.112 --> 00:13:59.600
Let’s try out a few NSE scripts
to see how they work.

00:14:01.004 --> 00:14:03.933
The smb-os-discovery script

00:14:03.933 --> 00:14:07.600
attempts to connect to the
SMB service on a target system

00:14:07.600 --> 00:14:09.833
and determine its operating system.

00:14:21.929 --> 00:14:25.333
Another useful (and self-explanatory)
NSE script

00:14:25.333 --> 00:14:27.833
is dns-zone-transfer.

00:14:36.305 --> 00:14:38.466
To view more information about a script,

00:14:38.466 --> 00:14:41.300
we can use the –script-help option.

00:14:42.085 --> 00:14:44.933
This option displays a description
of the script

00:14:44.933 --> 00:14:48.700
and a URL where we can find
more in-depth information,

00:14:48.700 --> 00:14:52.200
such as the script arguments
and usage examples.

00:14:53.846 --> 00:14:56.400
For times when internet
access is not available,

00:14:56.400 --> 00:15:01.033
much of this information can also
be found in the NSE script file itself.

00:15:01.607 --> 00:15:04.333
Take time to explore the
various NSE scripts,

00:15:04.333 --> 00:15:07.433
as many of them are helpful
and time-saving.
