WEBVTT

00:00:01.100 --> 00:00:03.100
Evading Protected View

00:00:04.279 --> 00:00:08.279
This Microsoft Word document is
highly effective when served locally,

00:00:08.537 --> 00:00:12.837
but when served from the Internet, say
through an email or a download link,

00:00:12.837 --> 00:00:17.804
we must bypass another layer of
protection known as Protected View.

00:00:18.337 --> 00:00:21.504
Essentially a sandbox feature
for Microsoft Office,

00:00:21.504 --> 00:00:26.225
this protection disables all editing and
modifications in the document

00:00:26.612 --> 00:00:31.045
and blocks the execution of
macros or embedded objects.

00:00:31.045 --> 00:00:35.266
To simulate this, we will copy the
Microsoft Word document containing our

00:00:35.279 --> 00:00:41.045
embedded batch file to our Kali machine
and host it from the Apache server.

00:00:41.058 --> 00:00:45.358
We will do this with netcat and
listen for the file in our Kali terminal

00:00:45.358 --> 00:00:48.491
to transfer the file to
our web root directory.

00:00:52.579 --> 00:00:57.145
Next, we will download the file to
our Windows client with netcat,

00:01:10.920 --> 00:01:12.420
and open it.

00:01:27.712 --> 00:01:33.412
At this point, Protected View is engaged,
and we can not execute the batch file.

00:01:33.979 --> 00:01:40.045
While the victim may click Enable Editing
and exit Protected View, this is unlikely.

00:01:43.966 --> 00:01:48.366
Ideally, we would prefer to bypass
Protected View altogether,

00:01:48.366 --> 00:01:53.420
and one straightforward way to do
this is to use another Office application.

00:01:53.433 --> 00:01:58.466
Like Microsoft Word, Microsoft Publisher
allows embedded objects

00:01:58.466 --> 00:02:04.487
and ultimately code execution in exactly
the same manner as Word and Excel,

00:02:04.500 --> 00:02:09.566
but will not enable Protected View
for Internet-delivered docuements.

00:02:10.112 --> 00:02:13.745
We could use the tactics we previously
applied to Word to bypass

00:02:13.745 --> 00:02:17.179
these restrictions, but the
downside is that Publisher is

00:02:17.179 --> 00:02:20.845
less frequently installed
than Word or Excel.

00:02:21.520 --> 00:02:25.520
Still, if your fingerprinting detects
an installation of Publisher,

00:02:25.545 --> 00:02:29.179
this may be a viable and better vector.
