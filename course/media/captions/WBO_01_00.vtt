WEBVTT

00:00:01.100 --> 00:00:03.500
Discovering the Vulnerability

00:00:04.200 --> 00:00:07.433
Generally speaking, there are three 
primary techniques

00:00:07.433 --> 00:00:10.466
for identifying flaws in applications.

00:00:10.466 --> 00:00:14.733
Source code review is likely the
easiest if it is available.

00:00:14.733 --> 00:00:17.966
If itâ€™s not, we can use reverse
engineering techniques 

00:00:17.966 --> 00:00:20.533
or fuzzing to find vulnerabilities.

00:00:20.533 --> 00:00:23.866
In this module, we will focus on fuzzing.

00:00:23.866 --> 00:00:27.833
The goal of fuzzing is to provide the
target application with input

00:00:27.833 --> 00:00:32.566
that is not handled correctly,
resulting in an application crash.

00:00:32.566 --> 00:00:36.700
In its most basic form, this input is
programmatically generated 

00:00:36.700 --> 00:00:38.466
to be malformed.

00:00:38.466 --> 00:00:43.233
If a crash occurs as the result of
processing malformed input data, 

00:00:43.233 --> 00:00:48.366
it may indicate the presence of a
potentially exploitable vulnerability, 

00:00:48.366 --> 00:00:50.433
such as a buffer overflow.
