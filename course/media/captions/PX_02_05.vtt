WEBVTT

00:00:01.495 --> 00:00:04.233
Leveraging Unquoted Service Paths

00:00:05.008 --> 00:00:07.433
Another interesting attack
vector that can lead to

00:00:07.433 --> 00:00:10.400
privilege escalation on
Windows operating systems

00:00:10.400 --> 00:00:13.866
revolves around
unquoted service paths.

00:00:14.413 --> 00:00:17.166
We can use this attack when
we have write permissions

00:00:17.166 --> 00:00:20.866
to a service’s main
directory and subdirectories

00:00:20.866 --> 00:00:23.700
but can not replace
files within them.

00:00:24.406 --> 00:00:27.417
Please note that this section 
of the module will not

00:00:27.417 --> 00:00:30.966
be reproducible on the
dedicated student client.

00:00:32.220 --> 00:00:36.933
However, this technique can be
used inside the lab environment.

00:00:44.638 --> 00:00:46.600
As we have seen in the previous section,

00:00:46.600 --> 00:00:50.833
each Windows service maps
to an executable file

00:00:50.833 --> 00:00:53.533
that will be run when
the service is started.

00:00:54.148 --> 00:00:58.000
Most of the time, services that
accompany third-party software

00:00:58.000 --> 00:01:02.233
are stored under the
C:\Program Files directory,

00:01:02.233 --> 00:01:05.566
which contains a space
character in its name.

00:01:05.931 --> 00:01:09.466
This can potentially be
turned into an opportunity

00:01:09.466 --> 00:01:11.833
for a privilege escalation attack.

00:01:15.617 --> 00:01:19.633
When using file or directory
paths that contain spaces,

00:01:19.633 --> 00:01:23.166
the developers should always
ensure that the path names

00:01:23.166 --> 00:01:25.900
are enclosed by quotation marks.

00:01:26.766 --> 00:01:29.766
This ensures that they are
explicitly declared.

00:01:30.131 --> 00:01:34.566
However, when that is not the case,
and a path name is unquoted,

00:01:34.566 --> 00:01:37.833
the path name is open
to interpretation.

00:01:39.543 --> 00:01:42.500
Specifically, in the case of
executable paths,

00:01:42.500 --> 00:01:46.000
anything that comes after
each whitespace character

00:01:46.000 --> 00:01:51.666
will be treated as a potential argument
or option for the executable.

00:01:52.236 --> 00:01:56.766
In this example, if we are able to
write to to the “My Program”

00:01:56.766 --> 00:02:01.733
or “My Service” directory, we
might be able to trick windows

00:02:01.733 --> 00:02:06.300
into executing our malicious executable
when the service is started.

00:02:06.869 --> 00:02:11.100
We will use our adduser.exe
payload we created earlier

00:02:11.100 --> 00:02:13.433
to add a new user to the system

00:02:13.615 --> 00:02:16.333
and add that user to the
administrators group

00:02:18.658 --> 00:02:24.833
We could name our executable
program.exe and place in under c:,

00:02:24.833 --> 00:02:30.200
or My.exe and place it
in C:\Program Files.

00:02:30.655 --> 00:02:36.066
However, standard users do not have write
access to these directories by default.

00:02:36.499 --> 00:02:41.566
Instead, let’s attempt to place it
in the “My Program” directory.

00:02:42.957 --> 00:02:48.033
In this example, Windows will treat
each space as the end of the filename

00:02:48.033 --> 00:02:54.100
and as a result, it will first try
to execute program.exe,

00:02:55.080 --> 00:02:59.200
then, program files\my.exe

00:03:00.089 --> 00:03:05.900
Before finally finding my.exe under
the “my program”" directory.

00:03:08.977 --> 00:03:13.533
When the service runs, it should execute
our file with the same privileges

00:03:13.533 --> 00:03:18.500
that the service starts as, which is
usually the NT\SYSTEM account.

00:03:18.841 --> 00:03:20.266
Let’s restart the machine.

00:03:29.909 --> 00:03:32.466
Now let’s see if our attack worked

00:03:32.466 --> 00:03:35.600
by attempting to connect
with the new user account.

00:03:43.487 --> 00:03:46.833
Nice! Our attack worked as expected.

00:03:47.220 --> 00:03:50.800
Although this vulnerability has a
specific combination of requirements,

00:03:50.800 --> 00:03:54.633
it is easily exploitable when
present on a system.
