WEBVTT

00:00:01.668 --> 00:00:04.366
Enumerating the Admin Interface

00:00:05.523 --> 00:00:07.333
Logging in to the the admin interface

00:00:07.333 --> 00:00:10.066
opens up the door for
further exploitation.

00:00:10.511 --> 00:00:13.666
Before we start exploring ways
to elevate our current access,

00:00:13.666 --> 00:00:17.233
let’s investigate the options
WordPress has to offer.

00:00:17.711 --> 00:00:21.333
One good place to start
in WordPress is the Info tab

00:00:21.600 --> 00:00:23.966
under the Site Health section.

00:00:41.326 --> 00:00:45.433
On this page, we can determine that
the server is running WordPress

00:00:45.433 --> 00:00:50.200
using PHP version 7.0.33.

00:00:58.921 --> 00:01:03.533
We also find that the database
is running on an IP address 

00:01:03.533 --> 00:01:07.033
that is different than the
one we are currently targeting.

00:01:08.457 --> 00:01:10.433
This is not unusual 

00:01:10.433 --> 00:01:15.400
as databases and web applications
are often run on separate servers.

00:01:15.400 --> 00:01:18.733
Now that we have gathered some basic information, 

00:01:18.733 --> 00:01:21.433
we can attempt to elevate our access.

00:01:22.212 --> 00:01:26.266
One convenient aspect of having
administrative access to WordPress

00:01:26.266 --> 00:01:29.366
is that we can install our own plugins.

00:01:29.867 --> 00:01:32.400
WordPress plugins are written in PHP

00:01:32.413 --> 00:01:34.833
and do not have many limitations.

00:01:34.833 --> 00:01:40.233
For example, we could upload a plugin
that contains a PHP reverse shell

00:01:40.233 --> 00:01:43.100
or code execution capabilities.

00:01:43.411 --> 00:01:45.966
Fortunately, there are
several malicious plugins

00:01:45.966 --> 00:01:48.766
that have been created
just for this purpose.

00:01:55.886 --> 00:01:59.600
One such plugin can be found
in the seclists package,

00:01:59.600 --> 00:02:03.166
which can be installed in Kali with apt.

00:02:06.682 --> 00:02:12.366
The file that we are looking for can
be found in Web-Shells/WordPress.

00:02:16.082 --> 00:02:21.233
The specific file we are
looking for is plugin-shell.php.

00:02:22.167 --> 00:02:24.800
Let’s quickly inspect it
to find out what it does.

00:02:31.296 --> 00:02:36.033
Lines 2-9 are comments that
are required for WordPress

00:02:36.033 --> 00:02:39.000
to recognize the file as a plugin.

00:02:40.966 --> 00:02:46.900
Lines 12-14 attempt protect the file
from being deleted by the system.

00:02:48.479 --> 00:02:53.433
Lines 20-24 will attempt
to run a system command

00:02:53.433 --> 00:02:58.300
if the cmd variable is
set in the HTTP request.

00:03:00.102 --> 00:03:04.533
The plugin will use the executeCommand
function in order to identify

00:03:04.533 --> 00:03:11.366
and execute the appropriate PHP internal
API to run a command on the target system.

00:03:16.406 --> 00:03:20.766
The executeCommand function
can be found on Lines 47-82.

00:03:23.180 --> 00:03:29.966
The plugin-shell.php plugin is a catalyst
to execute commands on the system.

00:03:36.129 --> 00:03:40.700
Once we are able to trigger arbitrary
code execution on the compromised host,

00:03:40.700 --> 00:03:46.066
there are a number of ways we could
use to obtain a proper reverse shell.
