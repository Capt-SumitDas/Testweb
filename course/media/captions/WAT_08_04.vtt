WEBVTT

00:00:01.318 --> 00:00:03.533
LFI Code Execution

00:00:04.417 --> 00:00:07.100
Next, we’ll use the LFI vulnerability

00:00:07.100 --> 00:00:11.633
to include the Apache log file
that contains our PHP payload.

00:00:12.184 --> 00:00:15.500
We know the application
is using an include statement

00:00:15.500 --> 00:00:17.900
so the contents of the included file

00:00:17.900 --> 00:00:20.766
will be executed as PHP code.

00:00:24.838 --> 00:00:28.966
We’ll build a URL that includes
the location of the log

00:00:28.966 --> 00:00:31.733
as well as our command to be executed

00:00:31.733 --> 00:00:35.400
sent as the cmd parameter’s value.

00:00:40.472 --> 00:00:43.166
Once the URL is sent to the web server,

00:00:44.568 --> 00:00:47.566
the output contains the
entries in the log file

00:00:47.566 --> 00:00:51.033
along with the output of
our ipconfig command.

00:00:51.884 --> 00:00:54.566
So what exactly happened here?

00:00:55.125 --> 00:00:59.033
Thanks to the application’s
PHP include statement

00:00:59.033 --> 00:01:03.133
and our ability to specify
which file to include,

00:01:03.133 --> 00:01:06.200
the contents of the
contaminated log file

00:01:06.200 --> 00:01:08.733
were executed by the web page.

00:01:09.509 --> 00:01:11.433
The PHP engine in turn

00:01:11.433 --> 00:01:15.700
runs the shell_exec portion
of the log file’s text

00:01:15.700 --> 00:01:20.266
with the cmd variable’s
value of “ipconfig”,

00:01:20.800 --> 00:01:24.600
essentially running ipconfig on the target

00:01:24.600 --> 00:01:26.766
and displaying the output.

00:01:27.742 --> 00:01:31.466
Any additional lines in the
log file are simply displayed

00:01:31.466 --> 00:01:35.100
because they do not
contain valid PHP code.

00:01:35.617 --> 00:01:38.333
This is certainly not what
the developer intended!
