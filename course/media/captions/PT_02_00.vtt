WEBVTT

00:00:01.351 --> 00:00:02.351
Socat

00:00:03.518 --> 00:00:09.551
Socat is a command-line utility that
establishes two bidirectional byte streams

00:00:09.551 --> 00:00:11.851
and transfers data between them.

00:00:12.032 --> 00:00:15.099
It is similar to Netcat but
has additional useful features

00:00:15.099 --> 00:00:16.966
so let’s see how it compares.

00:00:17.885 --> 00:00:22.485
First, let’s connect to a remote server
on port 110 using socat.

00:00:23.051 --> 00:00:28.651
In this example, the protocol, options
and port number are all colon-delimited.

00:00:29.389 --> 00:00:31.955
In this example, TCP4 indicates
the protocol…

00:00:32.755 --> 00:00:35.755
The hyphen character is used
to transfer data

00:00:35.755 --> 00:00:39.122
between STAND I.O. and the remote host,

00:00:39.137 --> 00:00:41.803
allowing our keyboard
interaction with the shell,

00:00:42.199 --> 00:00:44.899
and 110 is the port number.

00:00:46.595 --> 00:00:48.962
As with our Netcat connection
we made earlier,

00:00:48.962 --> 00:00:51.662
we can now interact with
the remote service.


00:00:59.303 --> 00:01:03.337
Next, lets look at how to
start a listener with socat.

00:01:04.951 --> 00:01:09.218
Because root privileges are required
to bind a listener on privileged ports,

00:01:09.237 --> 00:01:13.537
we need to use sudo when starting
a listener on port 443:

00:01:14.285 --> 00:01:17.485
This time, we selected a TCP4 listener…

00:01:17.485 --> 00:01:21.651
and used the STDOUT argument
which redirects standard output.

00:01:22.318 --> 00:01:24.451
Let’s connect to our listener
from our Windows client

00:01:24.451 --> 00:01:27.585
and replicate our simple
chat from earlier.

00:01:35.470 --> 00:01:40.437
With our connection made, we should
be able to chat between our two clients.

00:01:46.295 --> 00:01:50.528
Great, our bi-directional chat
is working perfectly.

00:01:58.337 --> 00:02:01.370
Next, we will try out file transfers.
