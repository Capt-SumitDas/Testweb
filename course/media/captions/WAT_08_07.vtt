WEBVTT

00:00:01.615 --> 00:00:03.266
PHP Wrappers

00:00:04.533 --> 00:00:08.031
PHP provides several protocol wrappers

00:00:08.031 --> 00:00:11.133
that we can use to
exploit directory traversal

00:00:11.133 --> 00:00:14.333
and local file inclusion vulnerabilities.

00:00:14.856 --> 00:00:17.866
These filters give us additional flexibility

00:00:17.866 --> 00:00:20.666
when attempting to inject PHP code

00:00:20.666 --> 00:00:23.100
via LFI vulnerabilities.

00:00:23.917 --> 00:00:25.766
We can use the data wrapper

00:00:25.766 --> 00:00:28.000
to embed inline data

00:00:28.000 --> 00:00:29.700
as part of the URL

00:00:29.700 --> 00:00:34.433
with plaintext or base64 encoded data.

00:00:35.186 --> 00:00:38.066
This wrapper provides us
with an alternative payload

00:00:38.066 --> 00:00:42.300
when we can’t poison a
local file with PHP code.

00:00:46.230 --> 00:00:49.666
Let’s take a closer look at
how to use the data wrapper.

00:00:54.598 --> 00:00:59.266
We start it with “data:”
followed by the type data. 

00:00:59.992 --> 00:01:04.566
In this case, we’ll use
“text/plain” for plaintext.

00:01:05.971 --> 00:01:09.933
We follow that with a comma
to mark the start of the contents,

00:01:09.933 --> 00:01:12.200
in this case “hello world”.

00:01:13.311 --> 00:01:17.666
We already know the menu page
is vulnerable to LFI attacks.

00:01:18.263 --> 00:01:21.333
If we submit a payload
using a data wrapper,

00:01:21.333 --> 00:01:25.466
the application should treat
it the same as a regular file

00:01:25.466 --> 00:01:27.733
and include it in the page.

00:01:28.449 --> 00:01:33.266
Let’s check if this works by submitting
he URL and checking the results.

00:01:35.489 --> 00:01:39.100
As suspected, the application
treated the data wrapper

00:01:39.100 --> 00:01:43.166
as if it was a file and
included it in the page,

00:01:43.166 --> 00:01:46.466
displaying our “hello world” string.

00:01:48.027 --> 00:01:50.366
Since a plaintext data wrapper worked,

00:01:50.366 --> 00:01:52.900
let’s see how far we can push this.

00:01:53.744 --> 00:01:56.900
We know there is an
LFI vulnerability on this page

00:01:56.900 --> 00:02:01.800
and the previous example proves
we can inject content with a data wrapper.

00:02:02.378 --> 00:02:08.133
Let’s replace “hello world” with some
PHP code and check if it executes.

00:02:14.929 --> 00:02:18.900
We will use shell_exec
to run the dir command,

00:02:18.900 --> 00:02:21.833
wrapping in PHP tags.

00:02:22.926 --> 00:02:25.366
Let’s submit this and see if it works.

00:02:27.827 --> 00:02:28.827
Excellent,

00:02:28.827 --> 00:02:34.466
the PHP code we included in the data
wrapper was executed server-side,

00:02:34.466 --> 00:02:36.800
producing a directory listing.

00:02:44.293 --> 00:02:49.417
We can now exploit the LFI
without manipulating any local files.
