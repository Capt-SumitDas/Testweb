WEBVTT

00:00:01.500 --> 00:00:03.400
Examining the Exploit

00:00:04.133 --> 00:00:08.300
In this example, we will again target
Sync Breeze Enterprise

00:00:08.300 --> 00:00:14.133
10.0.28, but we will focus
on a different exploit.

00:00:16.733 --> 00:00:21.066
This will provide us with another working
exploit for our target environment

00:00:21.066 --> 00:00:25.000
and allow us to walk through
the modification process.

00:00:27.500 --> 00:00:29.866
Searching by product and version,

00:00:29.866 --> 00:00:34.466
we notice that there are two available
exploits for this particular vulnerability

00:00:34.466 --> 00:00:37.100
one of which is coded in C:

00:00:42.833 --> 00:00:46.100
Since we’re already familiar with
how the vulnerability works

00:00:46.100 --> 00:00:47.533
and how it is exploited,

00:00:47.533 --> 00:00:52.166
this is a good opportunity to see the
differences between scripting languages

00:00:52.166 --> 00:00:54.233
and a compiled language,

00:00:54.233 --> 00:00:58.600
without the added complexity of
unraveling a new vulnerability.

00:00:59.333 --> 00:01:02.300
While there are plenty of differences
between the two languages,

00:01:02.300 --> 00:01:05.866
we will focus on two main differences
that will affect us,

00:01:05.866 --> 00:01:09.633
including memory management
and string operations.

00:01:10.200 --> 00:01:12.000
The first key difference is that

00:01:12.000 --> 00:01:15.200
scripting languages are executed
through an interpreter

00:01:15.200 --> 00:01:19.033
and not compiled to create
a stand-alone executable.

00:01:19.533 --> 00:01:22.266
Because scripting languages
require an interpreter,

00:01:22.266 --> 00:01:25.000
this means that we can’t
run a Python script

00:01:25.000 --> 00:01:28.233
in an environment where
Python is not installed.

00:01:28.733 --> 00:01:30.233
This could limit us in the field,

00:01:30.233 --> 00:01:34.066
especially if we need a stand-alone
exploit that must run

00:01:34.066 --> 00:01:37.533
in an environment that doesn’t
have Python pre-installed.

00:01:48.700 --> 00:01:51.733
An additional difference between the
two languages is that

00:01:51.733 --> 00:01:54.066
in a scripting language such as Python, 

00:01:54.066 --> 00:01:57.166
concatenating a string is very easy

00:01:57.166 --> 00:02:01.600
and usually takes the form of an
addition between two strings:

00:02:04.900 --> 00:02:07.066
As discussed later in this module,

00:02:07.066 --> 00:02:09.333
concatenating strings in this way

00:02:09.333 --> 00:02:13.100
is not allowed in a programming
language such as C.

00:02:16.666 --> 00:02:19.466
To begin the process of
modifying our exploit,

00:02:19.466 --> 00:02:23.333
we will move the target exploit to our
current working directory

00:02:23.333 --> 00:02:28.566
by using Searchsploit’s
handy -m mirror option:

00:02:36.179 --> 00:02:39.200
Now that the exploit is mirrored
to our home directory,

00:02:39.200 --> 00:02:43.200
we can inspect it to determine
what modifications, if any,

00:02:43.200 --> 00:02:48.133
are required to compile the exploit and
make it work in our target environment.

00:02:50.858 --> 00:02:54.100
However, before even
considering compilation,

00:02:54.100 --> 00:02:58.400
we notice that the headers,
such as winsock2.h,

00:02:58.400 --> 00:03:02.400
indicate that this code was meant
to be compiled on Windows:

00:03:10.887 --> 00:03:13.500
Although we could attempt to
compile this on Windows,

00:03:13.500 --> 00:03:17.200
we will instead cross-compile
this exploit on Kali.
