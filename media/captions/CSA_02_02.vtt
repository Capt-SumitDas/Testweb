WEBVTT

00:00:01.450 --> 00:00:04.050
HTA Attack in Action

00:00:07.283 --> 00:00:13.416
We will use msfvenom to turn our basic
HTML Application into an attack, 

00:00:13.770 --> 00:00:19.070
relying on the hta-psh output format,

00:00:19.291 --> 00:00:23.125
to create an HTA payload
based on PowerShell.

00:00:24.325 --> 00:00:27.258
Once the complete reverse 
shell payload is generated, 

00:00:27.258 --> 00:00:31.258
it is saved into the file evil.hta.

00:00:33.737 --> 00:00:38.670
Let’s walk through the generated .hta file
to better understand how everything works.

00:00:41.695 --> 00:00:45.362
One of the first things to note is that
the variable names have been randomized

00:00:45.362 --> 00:00:49.029
in order to trick detection
and antivirus software.

00:00:49.970 --> 00:00:55.104
PowerShell is executed by the Run method
of the Windows Scripting Host

00:00:55.104 --> 00:00:58.225
along with three command line arguments.

00:00:58.958 --> 00:01:01.758
The first argument, -nop,

00:01:01.758 --> 00:01:05.058
is shorthand for NoProfile,

00:01:05.616 --> 00:01:08.816
which prevents PowerShell
from loading the user profile

00:01:08.816 --> 00:01:12.683
which might negatively impact
the execution of our code.

00:01:13.370 --> 00:01:16.704
Next, our script uses -w hidden,

00:01:17.183 --> 00:01:20.083
shorthand for WindowStyle hidden,

00:01:20.095 --> 00:01:23.762
which avoids creating a window
on the user’s desktop.

00:01:24.329 --> 00:01:27.795
Finally, the extremely important -e flag,

00:01:28.150 --> 00:01:30.483
shorthand for EncodedCommand,

00:01:30.483 --> 00:01:35.283
allows us to supply a Base64
encoded PowerShell script

00:01:35.283 --> 00:01:38.283
directly as a command line argument.

00:01:38.850 --> 00:01:42.583
We will host this new HTA
application on our Kali machine

00:01:42.583 --> 00:01:46.050
and launch a Netcat listener
to test our attack.

00:01:50.270 --> 00:01:54.870
Then we will emulate our victim
by browsing to the malicious URL

00:01:54.870 --> 00:01:57.704
and accepting the two security warnings.

00:01:58.237 --> 00:02:00.204
If everything goes according to plan,

00:02:00.229 --> 00:02:03.029
we should be able to catch
a reverse shell.

00:02:15.916 --> 00:02:18.950
Our malicious .hta file is executed,

00:02:26.437 --> 00:02:28.637
and launches our reverse shell.

00:02:29.558 --> 00:02:33.391
This attack vector allows us to
compromise a Windows client

00:02:33.391 --> 00:02:35.358
through Internet Explorer

00:02:35.358 --> 00:02:39.425
without the presence of a
specific software vulnerability.

00:02:43.070 --> 00:02:47.037
Since the link to the HTML Application
can be delivered via email,

00:02:47.050 --> 00:02:50.916
we can even compromise
NAT’d internal clients.
