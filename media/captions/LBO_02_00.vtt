WEBVTT

00:00:01.166 --> 00:00:03.266
Replicating the Crash

00:00:03.833 --> 00:00:08.733
Our test environment will consist of a
dedicated Linux Debian lab client,

00:00:08.733 --> 00:00:14.500
where we’ll run and debug the vulnerable
application, and our local Kali Linux box

00:00:14.500 --> 00:00:16.766
where we’ll launch the remote exploit.

00:00:23.900 --> 00:00:27.766
In order to replicate the crash, we will
first rdesktop to

00:00:27.766 --> 00:00:30.033
our dedicated Debian Linux client.

00:00:48.033 --> 00:00:52.000
Once connected, we’ll launch a terminal
via the System Tools menu

00:00:52.000 --> 00:00:54.033
and run Crossfire:

00:01:03.733 --> 00:01:08.233
Once crossfire has launched, it will
accept incoming network connections.

00:01:11.100 --> 00:01:16.333
Next, we’ll launch the Evans debugger by
running the edb command:

00:01:20.766 --> 00:01:25.000
The layout of EDB is similar to other
popular debugging tools.

00:01:25.233 --> 00:01:28.966
To see available processes including
the PID and owner,

00:01:28.966 --> 00:01:32.133
we’ll select Attach from the File menu.

00:01:32.766 --> 00:01:36.800
We can then search for our crossfire
process, select it,

00:01:36.800 --> 00:01:39.700
, and click OK to attach to it.

00:01:43.566 --> 00:01:47.366
When we intially attach to the process,
it will be paused.

00:01:49.400 --> 00:01:54.700
To run it, we can simply click the Run
button or press F9.

00:01:58.966 --> 00:02:03.266
Now that we’ve attached the debugger to
the Crossfire application, let’s examine

00:02:03.266 --> 00:02:07.200
the proof-of-concept code that we
created based on information

00:02:07.200 --> 00:02:08.866
from the public exploit.

00:02:11.866 --> 00:02:17.400
Notice that our buffer variable requires
specific hex values at the beginning

00:02:17.400 --> 00:02:21.433
and at the end of it, as well as the
“setup sound” string,

00:02:21.433 --> 00:02:23.733
in order for the application to crash.

00:02:24.666 --> 00:02:28.500
Our initial proof-of-concept builds a
malicious buffer including the

00:02:28.500 --> 00:02:34.500
“setup sound” command, connects to the
remote service on port 13327,

00:02:34.666 --> 00:02:36.233
and sends the buffer.

00:02:37.700 --> 00:02:42.466
To crash Crossfire, we can run our first
proof-of-concept using python.

00:02:50.000 --> 00:02:53.866
After running the script, the debugger
displays an error message,

00:02:53.866 --> 00:02:57.133
clearly indicating the presence of a
memory corruption

00:02:57.133 --> 00:03:01.866
in the setup sound command, likely a
buffer overflow condition.

00:03:04.266 --> 00:03:08.766
After clicking the OK button, we find
that the EIP register has been

00:03:08.766 --> 00:03:11.100
overwritten with our buffer.

00:03:15.066 --> 00:03:18.466
Before we continue, let’s restart
crossfire,

00:03:23.666 --> 00:03:27.966
and launch EDB and attach to our
crossfire process.
