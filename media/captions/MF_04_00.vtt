WEBVTT

00:00:01.830 --> 00:00:05.033
Building Our Own MSF Module

00:00:07.139 --> 00:00:12.533
Even the most unskilled programmer
can build a custom MSF module.

00:00:13.101 --> 00:00:17.100
The Ruby language and
exploit structure are clear,

00:00:17.100 --> 00:00:20.800
straightforward and very
similar to Python.

00:00:21.301 --> 00:00:25.700
To show how this works, we will port our
SyncBreeze Python exploit

00:00:25.700 --> 00:00:30.616
to the Metasploit format, using an
existing exploit in the framework

00:00:30.616 --> 00:00:35.666
as a template and copying it
to the established folder structure

00:00:35.666 --> 00:00:39.233
under the home directory
of the root user.

00:00:49.127 --> 00:00:52.300
To begin, we will update
the header information,

00:00:52.300 --> 00:00:54.900
including the name
of the module,

00:01:00.900 --> 00:01:02.633
its description,

00:01:10.070 --> 00:01:11.070
author,

00:01:17.421 --> 00:01:20.066
and external references.

00:01:23.994 --> 00:01:27.766
In the next section, we will
select the default options.

00:01:28.468 --> 00:01:32.666
In this case, we will verify that
EXITFUNC is set to “thread”…

00:01:34.037 --> 00:01:38.833
and specify the bad characters we
found while developing the exploit.


00:01:45.769 --> 00:01:50.766
Finally, in the Targets section, we will
specify the version of SyncBreeze…

00:01:57.953 --> 00:02:01.733
along with the address of
the JMP ESP instruction…

00:02:08.468 --> 00:02:12.066
and the offset used to overwrite EIP.

00:02:16.194 --> 00:02:19.066
Next, we will update the check function,

00:02:22.559 --> 00:02:27.766
which is done by performing a HTTP GET
request to the root URL.

00:02:29.270 --> 00:02:32.666
On a vulnerable system, the
result contains the text

00:02:32.666 --> 00:02:37.700
“Sync Breeze Enterprise v10.0.28”.

00:02:42.229 --> 00:02:45.633
The final section is the exploit itself.

00:02:49.109 --> 00:02:52.033
First, we will create the exploit string,

00:02:52.033 --> 00:02:56.866
which uses the offset and the memory
address for the JMP ESP instruction

00:02:56.866 --> 00:02:59.866
along with a NOP sled and the payload.

00:03:05.164 --> 00:03:08.033
The second part is sending the exploit,

00:03:21.220 --> 00:03:24.466
which is done through
an HTTP POST request

00:03:24.466 --> 00:03:28.766
using the login URL as
in the original exploit.

00:03:29.953 --> 00:03:36.900
We will also populate the HTTP POST
variable username with the exploit string:

00:03:39.273 --> 00:03:44.400
Putting all the parts together gives us a
complete Metasploit exploit module

00:03:44.400 --> 00:03:47.600
for the SyncBreeze
Enterprise vulnerability.

00:03:54.452 --> 00:03:59.033
With the exploit complete, we can start
Metasploit and search for it.

00:04:04.465 --> 00:04:09.700
We notice a search for syncbreeze
now contains three results

00:04:09.700 --> 00:04:12.566
and that the last result is ours.

00:04:19.435 --> 00:04:21.200
We’ll choose a payload,

00:04:23.823 --> 00:04:26.133
set up the required parameters,

00:04:29.559 --> 00:04:32.166
and perform a vulnerability check.

00:04:37.464 --> 00:04:41.666
Finally, we launch our exploit to
gain a reverse shell.

00:04:48.585 --> 00:04:51.866
Excellent. It’s working perfectly.

00:04:52.351 --> 00:04:56.333
We have a shell thanks to
our new Metasploit exploit.
