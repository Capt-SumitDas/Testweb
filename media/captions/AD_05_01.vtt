WEBVTT

00:00:01.351 --> 00:00:03.400
Golden Tickets

00:00:04.132 --> 00:00:07.500
Going back to the explanation
of Kerberos authentication,

00:00:07.500 --> 00:00:13.966
when a user submits a request for a TGT,
the KDC encrypts the TGT

00:00:13.966 --> 00:00:19.033
with a secret key known only
to the KDCs in the domain.

00:00:19.709 --> 00:00:25.233
This secret key is actually the
password hash of a domain user account

00:00:25.233 --> 00:00:28.833
called krbtgt.

00:00:29.302 --> 00:00:34.133
If we are able to get hold of the
krbtgt password hash,

00:00:34.133 --> 00:00:40.633
we could create our own
self-made TGTs, or golden tickets.

00:00:41.440 --> 00:00:46.833
For example, we could create a TGT
stating that a non-privileged user

00:00:46.833 --> 00:00:50.133
is actually a member of the
Domain Admins group,

00:00:50.133 --> 00:00:55.233
and the domain controller will trust
it since it is encrypted correctly.

00:00:55.834 --> 00:01:00.166
This is a great way of keeping persistence
in an Active Directory environment,

00:01:00.166 --> 00:01:04.866
but the best advantage is that
the krbtgt account password

00:01:04.866 --> 00:01:07.366
is not automatically changed.

00:01:08.005 --> 00:01:14.366
Because of this, it is not uncommon to
find very old krbtgt password hashes.

00:01:15.249 --> 00:01:20.666
To test this persistence technique, we
first login as the offsec user.

00:01:42.879 --> 00:01:47.166
Then we’ll try to laterally move from
the Windows 10 workstation

00:01:47.166 --> 00:01:50.400
to the domain controller via PsExec.

00:01:52.427 --> 00:01:56.666
This failed because we do not
have the proper permissions.

00:01:57.586 --> 00:02:01.600
At this stage of the engagement, we should
have access to an account that is a member

00:02:01.600 --> 00:02:07.266
of the Domain Admins group or we have
compromised the domain controller itself.

00:02:07.961 --> 00:02:11.633
With such access, we can
extract the password hash

00:02:11.633 --> 00:02:16.100
of the krbtgt account with Mimikatz.

00:02:18.447 --> 00:02:21.733
To simulate this, we’ll log in
to the domain controller

00:02:21.733 --> 00:02:25.733
via remote desktop using
the jeff_admin account.

00:02:54.949 --> 00:02:59.466
Then we’ll run Mimikatz
from the C:\Tools folder,

00:03:08.897 --> 00:03:12.900
and issue the lsadump::lsa command.

00:03:23.369 --> 00:03:26.733
Creating the golden ticket and
injecting it into memory

00:03:26.733 --> 00:03:30.500
does not require any
administrative privileges,

00:03:30.500 --> 00:03:35.166
and can even be done from a machine
that is not domain-joined.

00:03:35.692 --> 00:03:37.200
We’ll take the hash,

00:03:37.725 --> 00:03:41.800
and continue the procedure
from a compromised workstation.

00:03:53.535 --> 00:03:55.500
Before generating the golden ticket,

00:03:55.500 --> 00:04:01.066
we delete any existing Kerberos
tickets with kerberos::purge.

00:04:07.826 --> 00:04:12.900
We’ll supply the domain SID, which
we found earlier with whoami,

00:04:12.900 --> 00:04:18.766
to the Mimikatz kerberos::golden
command to create the golden ticket.

00:04:19.574 --> 00:04:23.900
This time we’ll use the /krbtgt option

00:04:23.900 --> 00:04:27.656
to indicate we are supplying
the password hash,

00:04:27.656 --> 00:04:32.566
and we set the golden ticket’s
username to fakeuser.

00:04:33.223 --> 00:04:37.166
This is allowed because the
domain controller trusts anything

00:04:37.166 --> 00:04:41.700
correctly encrypted by
the krbtgt password hash.

00:04:43.108 --> 00:04:46.833
Mimikatz provides two
sets of default values

00:04:46.833 --> 00:04:53.700
when using the golden ticket option,
namely the user ID and the groups ID.

00:04:54.263 --> 00:04:58.066
The user ID is set to 500 by default,

00:04:58.066 --> 00:05:02.566
which is the RID of the built-in
administrator for the domain,

00:05:03.580 --> 00:05:08.624
and the values for the groups ID
consist of the most privileged groups

00:05:08.624 --> 00:05:12.933
in Active Directory, including
the Domain Admins group.

00:05:13.552 --> 00:05:16.133
With the golden ticket
injected into memory,

00:05:16.771 --> 00:05:22.466
we can launch a new command
prompt with misc::cmd…

00:05:25.658 --> 00:05:29.766
and again attempt lateral
movement with PsExec.

00:05:32.977 --> 00:05:37.500
We now have an interactive command
prompt on the domain controller,

00:05:40.016 --> 00:05:42.566
and notice that the whoami command…

00:05:43.843 --> 00:05:50.000
reports that we are the user fakeuser,
which does not exist in the domain.

00:05:50.863 --> 00:05:52.700
Listing group memberships…

00:05:54.577 --> 00:05:58.466
shows that we are a member
of multiple powerful groups

00:05:58.466 --> 00:06:01.433
like the Domain Admins group.

00:06:01.902 --> 00:06:03.266
Excellent!

00:06:08.768 --> 00:06:14.033
Note that by creating our own TGT followed
by PsExec, we are performing

00:06:14.033 --> 00:06:19.433
the overpass the hash attack by
leveraging Kerberos authentication.

00:06:20.165 --> 00:06:23.900
If we try to connect to the IP
address of the domain controller

00:06:23.900 --> 00:06:27.166
instead of the hostname using PsExec…

00:06:28.725 --> 00:06:35.933
it forces the use of NTLM authentication
and access would still be blocked.
