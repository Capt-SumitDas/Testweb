WEBVTT

00:00:01.200 --> 00:00:03.666
Automating SQL Injection

00:00:04.612 --> 00:00:06.853
The SQL injection process we have followed

00:00:06.853 --> 00:00:11.433
can be automated with the help of
several tools pre-installed in Kali Linux.

00:00:16.825 --> 00:00:19.891
One of the more notable tools is sqlmap,

00:00:19.891 --> 00:00:22.133
which can be used to identify

00:00:22.133 --> 00:00:25.200
and exploit SQL injection vulnerabilities

00:00:25.200 --> 00:00:27.833
against various database engines.

00:00:28.517 --> 00:00:32.266
Let’s use sqlmap on our
sample web application.

00:00:33.445 --> 00:00:37.200
We will set the URL we
want to scan with -u,

00:00:39.266 --> 00:00:43.700
and specify the parameter to test with -p.

00:00:50.831 --> 00:00:51.766
For this example,

00:00:51.766 --> 00:00:54.166
we will accept the defaults
for any prompts

00:00:54.166 --> 00:00:57.066
that appear while sqlmap is running.

00:01:01.134 --> 00:01:04.066
Sqlmap issues multiple requests

00:01:04.066 --> 00:01:08.033
to probe if a parameter is
vulnerable to SQL injection.

00:01:08.884 --> 00:01:10.566
It also attempts to determine

00:01:10.566 --> 00:01:13.433
what database software is being used

00:01:13.433 --> 00:01:17.000
so it can adjust the
attacks to that software.

00:01:18.164 --> 00:01:23.066
In this case, it found four different
techniques to exploit the vulnerability.

00:01:24.274 --> 00:01:27.433
It also lists a payload
for each technique.

00:01:28.968 --> 00:01:31.966
Even when sqlmap is doing the work for us,

00:01:31.966 --> 00:01:35.400
having these sample
payloads helps us understand

00:01:35.400 --> 00:01:37.766
how it exploited the vulnerability.

00:01:42.991 --> 00:01:46.866
We can now use sqlmap to
automate the extraction of data

00:01:46.866 --> 00:01:48.233
from the database.

00:01:51.289 --> 00:01:53.400
We will run sqlmap again

00:01:53.400 --> 00:01:59.333
with –dbms to set “MySQL”
as the backend type,

00:02:00.424 --> 00:02:05.966
and –dump to dump the contents
of all tables in the database.

00:02:07.410 --> 00:02:11.733
Sqlmap supports several backend
databases in the dbms flag

00:02:11.733 --> 00:02:17.066
but it doesn’t make a distinction
between MariaDB and MySQL.

00:02:17.066 --> 00:02:21.066
Setting “MySQL” will work well
enough for this example.

00:02:23.788 --> 00:02:24.933
According to the output,

00:02:24.933 --> 00:02:30.033
sqlmap was able to dump the
contents of the entire database.

00:02:30.993 --> 00:02:33.866
In addition to displaying the contents
in the terminal window,

00:02:33.866 --> 00:02:38.966
sqlmap also created a CSV file
with the dumped content.

00:02:40.873 --> 00:02:43.200
Sqlmap has many other features,

00:02:43.200 --> 00:02:48.266
such as the ability to attempt
Web Application Firewall bypasses

00:02:48.266 --> 00:02:50.966
and execute complex queries

00:02:50.966 --> 00:02:54.033
to automate the complete
takeover of a server.

00:02:56.522 --> 00:03:00.033
For example, using the os-shell parameter

00:03:00.033 --> 00:03:02.466
will attempt to automatically upload

00:03:02.466 --> 00:03:05.518
and execute a remote command shell

00:03:05.518 --> 00:03:07.100
on the target system.

00:03:08.417 --> 00:03:13.521
We can use this feature by
running sqlmap with –os-shell

00:03:13.521 --> 00:03:16.266
to execute a shell on the system.

00:03:18.624 --> 00:03:21.266
Since we know this is a PHP application,

00:03:21.266 --> 00:03:23.633
we will accept the default here.

00:03:25.100 --> 00:03:27.631
Once sqlmap establishes a shell,

00:03:27.631 --> 00:03:31.266
we can run commands on the
server and view the output.

00:03:36.622 --> 00:03:39.266
This shell can be somewhat slow

00:03:39.266 --> 00:03:44.566
but it can provide an effective foothold
to gain access to the underlying server.

00:03:48.074 --> 00:03:51.833
We recommend practicing
with sqlmap within the labs

00:03:51.833 --> 00:03:54.400
and on the Windows 10 lab machine.

00:03:55.156 --> 00:03:59.500
Consider using it in conjunction
with tools like Burp and Wireshark

00:03:59.500 --> 00:04:01.900
to capture what the tool is doing

00:04:01.900 --> 00:04:05.333
and then attempt to
replicate the attacks manually.

00:04:06.031 --> 00:04:11.033
This is often a very effective learning
technique and should not be overlooked.
