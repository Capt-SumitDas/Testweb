WEBVTT

00:00:01.533 --> 00:00:04.266
SSH Dynamic Port Forwarding

00:00:05.000 --> 00:00:10.266
SSH dynamic port forwarding allows us to
set a local listening port

00:00:10.266 --> 00:00:15.666
and have it tunnel incoming traffic to
any remote destination

00:00:15.666 --> 00:00:19.533
through the use of a proxy.
This is where things get fun.

00:00:21.300 --> 00:00:24.866
Similar to the SSH local port forwarding
example,

00:00:24.866 --> 00:00:29.466
we have compromised a Linux-based target
and have elevated our privileges.

00:00:30.333 --> 00:00:34.500
There do not seem to be any inbound or
outbound traffic restrictions

00:00:34.500 --> 00:00:35.700
on the firewall.

00:00:37.733 --> 00:00:40.766
Once more, our Dedicated Debian linux box

00:00:40.766 --> 00:00:44.500
will stand in for the compromised
Linux-based target.

00:00:53.766 --> 00:00:57.766
We discover that in addition to being
connected to the current network,

00:00:57.766 --> 00:01:03.233
it has an additional network interface
that is connected to a different network.

00:01:09.566 --> 00:01:13.666
This internal network hosts the same
Windows Server

00:01:13.666 --> 00:01:16.400
as in the local port forwarding example.

00:01:16.900 --> 00:01:21.566
In that example, we managed to interact
with the available shares on the Windows

00:01:21.566 --> 00:01:26.966
Server. However, that technique was limited
to a single IP address and port.

00:01:27.666 --> 00:01:31.833
In this example, we would like to target
additional ports on the Windows Server

00:01:31.833 --> 00:01:38.000
2016 machine, or other hosts on the
internal network without having to

00:01:38.000 --> 00:01:42.966
create a different tunnel for each
port or host of interest.

00:01:44.766 --> 00:01:48.300
To simulate this scenario in our lab
environment, we will again run the

00:01:48.300 --> 00:01:52.900
ssh local port forwarding script from our
dedicated Linux client.

00:02:02.166 --> 00:02:06.900
Once the environment is set up, we can
use ssh -D

00:02:06.900 --> 00:02:09.933
to specify dynamic port forwarding.

00:02:12.100 --> 00:02:16.433
We will create a local SOCKS4 application
proxy

00:02:16.833 --> 00:02:20.000
on our Kali Linux machine on port 8080,

00:02:20.133 --> 00:02:25.700
which will tunnel all incoming traffic to
any host on the target network,

00:02:26.500 --> 00:02:31.866
through our compromised Linux machine,
which we log into as student.

00:02:37.200 --> 00:02:41.833
Although we have started an application
proxy that can route application traffic

00:02:41.833 --> 00:02:44.766
to the target network through the SSH tunnel,

00:02:44.766 --> 00:02:49.233
we must somehow tell our tools how to use
this proxy.

00:02:51.066 --> 00:02:56.666
We will use proxychains to run standard
network applications through this proxy.

00:03:08.300 --> 00:03:12.166
To configure proxychains, we’ll edit the
main configuration file

00:03:12.166 --> 00:03:15.200
and add our SOCKS4 proxy to it.

00:03:23.466 --> 00:03:29.600
To run our tools through our proxy, we
prepend each command with proxychains.

00:03:30.000 --> 00:03:33.700
Let’s try to scan the Windows Server 2016
machine

00:03:33.700 --> 00:03:39.366
on the internal target network with nmap
and proxychains.

00:03:40.733 --> 00:03:44.966
In this example, we aren’t supplying any
options to proxychains,

00:03:45.166 --> 00:03:49.333
except for the nmap command and its
arguments.

00:03:55.900 --> 00:03:59.700
Nice. proxychains worked as expected,

00:03:59.700 --> 00:04:03.933
routing all of our traffic to the various
ports dynamically.
