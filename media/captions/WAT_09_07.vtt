WEBVTT

00:00:01.233 --> 00:00:03.900
Extracting Data from the Database

00:00:04.703 --> 00:00:08.800
We can now start extracting
information from the database.

00:00:09.249 --> 00:00:13.800
The following examples use
commands specific to MariaDB

00:00:13.800 --> 00:00:15.866
but most other databases

00:00:15.866 --> 00:00:20.333
offer similar functionality
with slightly different syntax.

00:00:20.702 --> 00:00:23.533
Regardless of what
database software we target, 

00:00:23.533 --> 00:00:27.733
it’s best to understand the
platform-specific commands.

00:00:28.038 --> 00:00:31.500
For example, to output
the version of MariaDB,

00:00:31.500 --> 00:00:34.366
we can use @@version.

00:00:36.470 --> 00:00:39.600
This should output a
“2” in the name field

00:00:39.600 --> 00:00:42.900
and the database version
number in the comment field:

00:00:45.116 --> 00:00:47.600
Good. It looks like that’s working.

00:00:49.230 --> 00:00:52.433
Next, let’s output the
current database user.

00:00:58.488 --> 00:01:03.333
This query reveals that the root user
 is being used for database queries.

00:01:04.361 --> 00:01:07.366
We can enumerate database tables
and column structures

00:01:07.366 --> 00:01:09.366
through the information_schema

00:01:09.366 --> 00:01:12.166
which stores information
about the database,

00:01:12.166 --> 00:01:14.866
like table and column names.

00:01:15.356 --> 00:01:17.866
We can use it to get the
layout of the database

00:01:17.866 --> 00:01:22.266
so that we can craft better
payloads to extract sensitive data.

00:01:29.149 --> 00:01:31.200
This should output a lot of data,

00:01:31.200 --> 00:01:36.766
most of which references information
about the default objects in MariaDB.

00:01:37.658 --> 00:01:39.900
It also includes the table names

00:01:39.900 --> 00:01:43.066
but we need to scroll through
the output to find them.

00:01:44.054 --> 00:01:47.333
The users table looks
particularly interesting.

00:01:48.168 --> 00:01:52.100
Let’s target that table and
retrieve the column names.

00:01:58.541 --> 00:02:02.666
This will output all the column
names for the users table.

00:02:04.497 --> 00:02:05.600
Armed with this information,

00:02:05.600 --> 00:02:09.266
we can extract the usernames
and passwords from the table.

00:02:10.182 --> 00:02:13.300
We know that the original
query selects three columns

00:02:13.300 --> 00:02:16.833
and the web page displays
columns two and three.

00:02:17.483 --> 00:02:19.766
If we update our union payload,

00:02:19.766 --> 00:02:22.833
we can display the
usernames in column two

00:02:22.833 --> 00:02:25.400
and the passwords in column three.

00:02:26.339 --> 00:02:28.647
This will output the database usernames

00:02:28.647 --> 00:02:33.200
in the name field and
passwords in comments field.

00:02:34.774 --> 00:02:35.774
Excellent.

00:02:35.774 --> 00:02:39.014
Not only did we get the
usernames and passwords,

00:02:39.014 --> 00:02:42.300
the passwords are all in cleartext.

00:02:42.958 --> 00:02:46.700
We can verify these by
logging in to the admin page.

00:03:00.666 --> 00:03:01.920
We can look at the source code

00:03:01.920 --> 00:03:05.754
to verify what we deduced
with our black box testing.

00:03:08.139 --> 00:03:12.800
The vulnerable code that leads
to the SQL injection is on line 39.

00:03:14.325 --> 00:03:18.433
The injection point is at the end
of the query in the “WHERE” clause,

00:03:18.433 --> 00:03:22.200
making it easy to use a “UNION” payload.

00:03:23.300 --> 00:03:29.266
The results of the query are fetched and
then written out for display on line 45.

00:03:31.836 --> 00:03:35.100
Notice that while three columns
are included in the query,

00:03:35.100 --> 00:03:37.533
only two of them are displayed.

00:03:39.147 --> 00:03:45.000
That is why we used columns two and three
for extracting data from another table.
