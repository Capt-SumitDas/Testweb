WEBVTT

00:00:01.600 --> 00:00:03.000
Exploitation

00:00:04.000 --> 00:00:07.300
First, we will rerun the MariaDB client

00:00:07.300 --> 00:00:11.600
but this time we will use the root
credentials we discovered on Ajla.

00:00:20.966 --> 00:00:25.966
Next, we will set the shell variable to
the shellcode that we generated earlier.

00:00:31.100 --> 00:00:33.233
Now for the moment of truth.

00:00:34.766 --> 00:00:38.300
Let’s attempt to dump the
binary shell to a file.

00:00:41.033 --> 00:00:46.600
It worked. But before we get too excited,
we still need to create a function.

00:00:49.333 --> 00:00:53.100
MariaDB did not generate any
errors, leading us to believe

00:00:53.100 --> 00:00:54.900
that the function was created.

00:00:57.233 --> 00:01:02.500
We can double-check by running a command
that queries for the sys_exec function.

00:01:05.400 --> 00:01:10.100
Now let’s test if the sys_exec UDF
works by attempting to make

00:01:10.100 --> 00:01:14.400
a network call from Zora
to our Kali machine.

00:01:16.100 --> 00:01:20.800
To do this, we will start the
python http server on port 80,

00:01:25.566 --> 00:01:31.400
and make a sys_exec UDF
call to our Kali IP on port 80.

00:01:33.000 --> 00:01:37.100
The syntax for the function can be
found in the original UDF exploit.

00:01:38.233 --> 00:01:42.633
If the command worked, we should see
a log entry in our webserver.

00:01:43.500 --> 00:01:47.866
Success! We are running code on Zora.

00:01:48.170 --> 00:01:53.033
Now we can upload and execute
a meterpreter payload on Zora

00:01:53.033 --> 00:01:57.100
in order to send a reverse
shell back to our Kali instance.

00:02:02.055 --> 00:02:04.800
We don’t have to generate a
new meterpreter shell

00:02:04.800 --> 00:02:08.466
since we can just use the
same one we used for Ajla.

00:02:09.107 --> 00:02:13.133
Since we are now connected to
Ajla through a standard ssh connection,

00:02:13.133 --> 00:02:18.700
we can use port 443 on Kali
for the Zora meterpreter session.

00:02:19.407 --> 00:02:24.066
First, let’s instruct Zora to
download the binary payload.

00:02:27.202 --> 00:02:31.633
With the meterpreter downloaded,
we need to make the file executable.

00:02:34.296 --> 00:02:35.965
Now that the shell is executable,

00:02:35.965 --> 00:02:39.533
let’s make sure Metasploit
is ready for the connection.

00:02:49.950 --> 00:02:55.633
With our listener configured and
running, we can execute the shell on Zora.

00:03:03.488 --> 00:03:07.966
Now we’ll check for a captured
shell in msfconsole.

00:03:15.923 --> 00:03:21.766
Excellent, we have a working
unprivileged shell on Zora!
