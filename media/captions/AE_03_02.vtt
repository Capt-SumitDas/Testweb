WEBVTT

00:00:01.733 --> 00:00:03.733
In-Memory Evasion

00:00:05.166 --> 00:00:09.666
In-Memory Injections, also known as
PE Injection,

00:00:09.666 --> 00:00:14.300
is a popular technique used to bypass
antivirus products.

00:00:14.933 --> 00:00:19.700
Rather than obfuscating a malicious
binary, creating new sections,

00:00:19.700 --> 00:00:21.833
or changing existing permissions,

00:00:21.833 --> 00:00:26.933
this technique instead focuses on the
manipulation of volatile memory.

00:00:27.633 --> 00:00:31.866
One of the main benefits of this
technique is that it does not write any

00:00:31.866 --> 00:00:36.500
files to disk, which is one the main
areas of focus for most

00:00:36.500 --> 00:00:38.433
antivirus products.

00:00:39.366 --> 00:00:45.000
Remote Process Memory Injection attempts
to inject the payload into another valid

00:00:45.000 --> 00:00:47.766
PE that is not malicious.

00:00:48.333 --> 00:00:53.633
The most common method of doing this is
by leverging a set of Windows APIs.

00:00:54.233 --> 00:00:57.366
Once the memory has been allocated in the
remote process,

00:00:57.366 --> 00:01:01.771
we can copy the malicious payload to the
newly allocated memory.

00:01:02.566 --> 00:01:06.833
After the payload has been successfully
copied, it is usually executed

00:01:06.833 --> 00:01:13.066
in memory in a separate thread using the
CreateRemoteThread API.

00:01:14.733 --> 00:01:20.633
Unlike regular DLL injection, which
implies loading a malicious DLL from disk

00:01:20.633 --> 00:01:28.600
using the LoadLibrary API, Reflective DLL
Injection attempts to load a DLL stored

00:01:28.600 --> 00:01:31.666
by the attacker in the process memory.

00:01:32.166 --> 00:01:37.100
The main challenge of implementing this
technique is that LoadLibrary does not

00:01:37.100 --> 00:01:40.133
support loading a DLL from memory.

00:01:41.033 --> 00:01:46.301
Furthermore, the Windows operating system
does not expose any APIâ€™s that can handle

00:01:46.301 --> 00:01:47.301
this.

00:01:48.100 --> 00:01:52.533
Attackers who choose to use this
technique must write their own version of

00:01:52.533 --> 00:01:57.400
the API that does not rely on a
disk-based DLL.

00:01:58.666 --> 00:02:03.300
When using Process Hollowing to bypass
antivirus software,

00:02:03.300 --> 00:02:09.300
attackers first launch a non-malicious
process in a suspended state.

00:02:10.066 --> 00:02:15.766
Once launched, the image of the process
is removed from memory and replaced with

00:02:15.766 --> 00:02:18.300
a malicious executable image.

00:02:18.933 --> 00:02:25.133
Finally, the process is then resumed and
malicious code is executed instead of

00:02:25.133 --> 00:02:27.033
the legitimate process.

00:02:28.700 --> 00:02:34.300
Inline Hooking involves modifying memory
and introducing a hook,

00:02:34.300 --> 00:02:38.066
or instructions that redirect the code
execution,

00:02:38.066 --> 00:02:43.800
into a function to point the execution
flow to our malicious code.

00:02:44.462 --> 00:02:46.666
Upon executing our malicious code,

00:02:46.666 --> 00:02:52.100
the flow will return back to the modified
function and resume execution,

00:02:52.100 --> 00:02:56.200
appearing as if only the original code
had executed.
