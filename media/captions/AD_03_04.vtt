WEBVTT

00:00:01.959 --> 00:00:04.000
Service Account Attacks

00:00:05.017 --> 00:00:08.266
Based on the earlier explanation
of the Kerberos protocol,

00:00:08.266 --> 00:00:13.400
we know that when a user wants to
access a resource hosted by a SPN,

00:00:13.400 --> 00:00:18.766
a service ticket is requested from
the client to the domain controller.

00:00:19.555 --> 00:00:24.366
The service ticket is then decrypted and
validated by the application server,

00:00:24.366 --> 00:00:28.100
since it is encrypted through
the password hash of the SPN.

00:00:28.990 --> 00:00:33.300
No checks are performed on whether
the user has any permissions

00:00:33.300 --> 00:00:36.900
to access the service hosted by
the service principal name

00:00:36.900 --> 00:00:40.766
when requesting the service ticket
from the domain controller.

00:00:41.606 --> 00:00:44.900
These checks are performed
as a second step

00:00:44.900 --> 00:00:47.800
only when connecting
to the service itself.

00:00:48.436 --> 00:00:51.966
This means that if we know the
SPN we want to target,

00:00:51.966 --> 00:00:54.500
we can request a
service ticket for it 

00:00:54.856 --> 00:00:56.400
from the domain controller.

00:00:56.934 --> 00:01:02.200
Then, we can extract our own ticket
from local memory and save it to disk.

00:01:02.658 --> 00:01:05.566
In this section we will
abuse the service ticket

00:01:05.566 --> 00:01:09.133
and attempt to crack the
password of the service account.

00:01:14.274 --> 00:01:19.366
For example, we know that the registered
SPN for the Internet Information Services

00:01:19.366 --> 00:01:25.600
web server in the domain is
HTTP/CorpWebServer.corp.com.

00:01:26.745 --> 00:01:32.366
From PowerShell, we can use the Kerberos
Requestor Security Token class

00:01:32.366 --> 00:01:34.300
to request the service ticket.

00:01:35.368 --> 00:01:40.000
The code segment we need is located inside
the System.Identity Model

00:01:40.000 --> 00:01:45.033
namespace, which is not loaded into
a PowerShell instance by default.

00:01:46.127 --> 00:01:52.166
To load it we use the Add-Type cmdlet with
the -AssemblyName argument.

00:02:00.335 --> 00:02:04.966
We can call the Kerberos Requestor
Security Token constructor,

00:02:05.755 --> 00:02:11.200
by specifying the SPN with
the -ArgumentList option.

00:02:13.643 --> 00:02:17.633
After execution, the requested service
ticket should be generated

00:02:17.633 --> 00:02:22.866
by the domain controller and loaded into
the memory of the Windows 10 client.

00:02:26.098 --> 00:02:30.400
We can also use the built-in klist
command instead of mimikatz

00:02:30.400 --> 00:02:34.000
to display all cached Kerberos
tickets for the current user:

00:02:36.672 --> 00:02:40.700
With the service ticket for the IIS
service principal name created

00:02:40.700 --> 00:02:42.266
and saved to memory,

00:02:42.266 --> 00:02:48.500
we can download it from memory using
either built-in APIs or Mimikatz.

00:02:53.895 --> 00:02:57.733
To download it with Mimikatz we
use the kerberos::list command,

00:02:57.733 --> 00:03:02.100
and specify the /export
flag to download it to disk.

00:03:09.098 --> 00:03:12.300
According to the Kerberos protocol,
the service ticket is

00:03:12.300 --> 00:03:15.766
encrypted using the SPN’s
password hash.

00:03:18.718 --> 00:03:23.933
If we are able to request the ticket and
decrypt it using brute force or guessing,

00:03:23.933 --> 00:03:29.200
in a technique known as Kerberoasting,
we can get the password hash,

00:03:29.200 --> 00:03:33.933
 and from that we can crack the clear text
password of the service account.

00:03:34.620 --> 00:03:40.266
As an additional bonus, we do not need
administrative privileges for this attack.

00:03:43.142 --> 00:03:44.142
Let’s try this out.

00:03:44.753 --> 00:03:47.666
We start by transferring the
file to our Kali machine.

00:04:07.287 --> 00:04:10.466
To perform a wordlist attack,
we must first install the

00:04:10.466 --> 00:04:13.033
kerberoast package with apt.

00:04:22.474 --> 00:04:28.533
With the kerberoast package installed,
we’ll run tgsrepcrack.py,

00:04:29.856 --> 00:04:31.966
specifying a wordlist,

00:04:32.959 --> 00:04:35.133
and the downloaded service ticket.

00:04:38.365 --> 00:04:42.566
We successfully cracked the service
ticket and found the clear

00:04:42.566 --> 00:04:44.966
text password for the
service account.

00:04:45.399 --> 00:04:46.400
Nice!

00:04:47.239 --> 00:04:50.833
This technique can be very
powerful if the domain contains

00:04:50.835 --> 00:04:54.533
high-privilege service accounts
with weak passwords,

00:04:54.533 --> 00:04:58.866
which is not uncommon
in many organizations.
