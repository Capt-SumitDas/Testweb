WEBVTT

00:00:01.566 --> 00:00:03.900
SSH Remote Port Forwarding

00:00:04.733 --> 00:00:08.000
The remote port forwarding feature in SSH

00:00:08.000 --> 00:00:11.900
can be thought of as the reverse of local
port forwarding,

00:00:12.233 --> 00:00:16.166
because a port is opened on the remote
side of the connection

00:00:16.166 --> 00:00:21.633
and traffic sent to that port is
forwarded to a port on our local machine,

00:00:21.633 --> 00:00:23.800
where we run the SSH command.

00:00:24.500 --> 00:00:29.566
In short, connections to the specified
port on the remote host

00:00:29.566 --> 00:00:33.600
will be forwarded to the specified port
on the local machine.

00:00:33.933 --> 00:00:37.033
This can be best shown with a new
scenario.

00:00:39.266 --> 00:00:43.000
In this case, we have access to a
non-root shell

00:00:43.000 --> 00:00:46.200
on a Linux client on the internal network.

00:00:47.000 --> 00:00:48.766
On this compromised machine,

00:00:48.766 --> 00:00:55.466
we discover that a MySQL server is
running on TCP port 3306.

00:00:56.000 --> 00:01:01.100
Unlike the previous scenario, the
firewall is blocking inbound connections

00:01:01.100 --> 00:01:05.933
on port 22, so we can’t SSH into this
server

00:01:05.933 --> 00:01:08.366
from our Internet-connected Kali machine.

00:01:09.133 --> 00:01:14.600
We can, however, SSH from this server out
to our Kali machine, 

00:01:14.600 --> 00:01:19.966
since outbound TCP port 22 is allowed
through the firewall.

00:01:20.533 --> 00:01:25.433
We can use SSH remote port forwarding to
open a port on our Kali machine

00:01:25.433 --> 00:01:30.766
machine that forwards traffic to the MySQL
port on the internal server.

00:01:31.466 --> 00:01:36.366
All forwarded traffic will traverse the
SSH tunnel, right through the firewall.

00:01:38.433 --> 00:01:42.700
In order to simulate this scenario, we
will run the ssh remote

00:01:42.700 --> 00:01:46.500
port forwarding script on our dedicated
Linux client.

00:01:58.933 --> 00:02:03.800
That will only allow inbound traffic on
port 3389,

00:02:03.800 --> 00:02:07.166
and will not restrict any outbound
traffic.

00:02:14.266 --> 00:02:19.833
The ssh command syntax to create this
tunnel will include the local IP and port,

00:02:19.833 --> 00:02:26.866
the remote IP and port and -R to create a
remote forward.

00:02:28.433 --> 00:02:33.900
In this case, we will ssh out to our Kali
machine as the kali user,

00:02:35.900 --> 00:02:38.033
specify no commands,

00:02:39.500 --> 00:02:41.100
and a remote forward,

00:02:42.766 --> 00:02:48.866
that will open a listener on TCP port
2221 on our Kali machine,

00:02:50.233 --> 00:02:56.933
and forward connections to the internal
Linux machine’s port 3306.

00:03:04.333 --> 00:03:10.633
This will forward all incoming traffic on
our Kali system’s local port 2221

00:03:10.633 --> 00:03:17.533
to port 3306 on the compromised box
through an SSH tunnel

00:03:17.533 --> 00:03:22.700
allowing us to reach the MySQL port even
though it is blocked at the firewall.

00:03:23.366 --> 00:03:26.600
With the tunnel up, we can switch to our
Kali machine,

00:03:30.433 --> 00:03:34.600
confirm that TCP port 2221 is listening,

00:03:38.833 --> 00:03:43.100
and use nmap to scan the port on our
localhost,

00:03:43.100 --> 00:03:46.266
which will scan the target’s MySQL
server.

00:03:46.900 --> 00:03:48.633
Knowing that we can scan the port,

00:03:48.633 --> 00:03:52.800
we should have no problem interacting 
with the MySQL service.
