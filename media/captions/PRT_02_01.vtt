WEBVTT

00:00:01.700 --> 00:00:04.233
SSH Local Port Forwarding

00:00:05.166 --> 00:00:09.833
SSH local port forwarding allows us to
tunnel a local port

00:00:09.833 --> 00:00:14.966
to a remote server using SSH as the
transport protocol.

00:00:15.600 --> 00:00:22.200
The effects of this method are similar to 
rinetd port forwarding, with a few twists.

00:00:22.766 --> 00:00:25.200
Let’s take another scenario into
consideration.

00:00:26.466 --> 00:00:30.033
During an assessment, we have compromised
a Linux-based target

00:00:30.033 --> 00:00:31.666
target through a remote vulnerability,

00:00:32.166 --> 00:00:34.500
elevated our privileges to root,

00:00:34.766 --> 00:00:38.533
and gained access to the passwords for 
both the root

00:00:38.533 --> 00:00:40.966
and student users on the machine.

00:00:41.566 --> 00:00:46.200
This compromised machine does not appear
to have any outbound traffic filtering,

00:00:46.200 --> 00:00:49.600
and it only exposes SSH on port 22

00:00:49.933 --> 00:00:54.166
RDP on port 3389, and port 8080,

00:00:54.300 --> 00:00:58.833
the vulnerable service port, which are
all allowed on the firewall.

00:00:59.633 --> 00:01:03.766
In this example, we will once again use
our dedicated Debian Linux box

00:01:03.766 --> 00:01:07.000
to represent the compromised Linux-based
target.

00:01:15.233 --> 00:01:18.033
After enumerating the compromised Linux
client,

00:01:18.033 --> 00:01:21.800
we discover that not only is it connected
to the current network,

00:01:21.800 --> 00:01:25.600
but it has another network interface that
is connected to a different

00:01:25.600 --> 00:01:27.033
internal network.

00:01:31.333 --> 00:01:36.433
In this internal subnet, we identify a
Windows Server 2016 machine

00:01:36.433 --> 00:01:39.100
that has network shares available.

00:01:46.700 --> 00:01:49.800
To simulate this configuration in our
lab environment,

00:01:49.800 --> 00:01:53.733
we will run the ssh local port forwarding
script

00:01:53.733 --> 00:02:02.366
from our dedicated Linux client that will
allow access to ports 3389, 22 and 8080.

00:02:08.366 --> 00:02:13.033
In such a scenario, we could move the
attack and enumeration tools we need

00:02:13.033 --> 00:02:17.700
need to the compromised Linux machine and
then try to interact with the shares on

00:02:17.700 --> 00:02:23.133
the 2016 server, but this is neither
elegant nor scalable.

00:02:23.466 --> 00:02:28.000
Instead, we want to interact with this
new target from our Kali attack machine,

00:02:28.000 --> 00:02:31.000
pivoting through the compromised Linux
client.

00:02:35.333 --> 00:02:39.400
This way, we will have access to all of
the tools on our Kali machine.

00:02:39.700 --> 00:02:42.566
This will require some port-forwarding
magic,

00:02:42.566 --> 00:02:46.933
and we will use the ssh client’s local
port forwarding feature

00:02:46.933 --> 00:02:51.066
h ssh -L to help with this.

00:02:54.633 --> 00:02:57.566
Inspecting the manual of the ssh client,

00:03:01.433 --> 00:03:07.466
we notice that the -L parameter specifies
the port on the local host

00:03:07.466 --> 00:03:11.133
that we want to forward to a remote
address and port.

00:03:20.000 --> 00:03:24.466
In our scenario, we want to forward port
445 on our Kali machine

00:03:24.466 --> 00:03:28.933
to port 445 on the Windows Server 2016
target.

00:03:29.800 --> 00:03:34.733
When we do this, any Microsoft file
sharing queries directed at our Kali

00:03:34.733 --> 00:03:39.400
machine will be forwarded to our Windows
Server 2016 target.

00:03:40.133 --> 00:03:44.366
This seems impossible given that the
firewall is blocking traffic

00:03:44.366 --> 00:03:50.566
on TCP port 445, but this port forward
is tunneled through our SSH session

00:03:50.566 --> 00:03:54.366
on port 22, which is allowed through the
firewall.

00:03:54.966 --> 00:03:59.800
In summary, the request will hit our Kali
machine on port 445,

00:03:59.933 --> 00:04:03.033
will be forwarded across the SSH session,

00:04:03.033 --> 00:04:09.800
and will then be passed on to port 445
on the Windows Server 2016 target.

00:04:10.666 --> 00:04:14.933
To pull this off, we will execute an ssh
command from our Kali Linux

00:04:14.933 --> 00:04:16.100
attack machine.

00:04:19.533 --> 00:04:23.800
We will start with -N since we do not
need to execute remote commands,

00:04:24.566 --> 00:04:28.133
but we will set up port forwarding with
-L,

00:04:28.133 --> 00:04:31.866
and bind port 445 on our local machine,

00:04:32.333 --> 00:04:35.433
to port 445 on the Windows Server,

00:04:35.700 --> 00:04:41.233
and do this through a connection to our
original Linux target as the student user.

00:04:43.233 --> 00:04:44.233


00:04:45.866 --> 00:04:50.900
At this point, any incoming connection on
port 445 of our Kali Linux box,

00:04:50.900 --> 00:04:57.666
should be forwarded to port 445 on the
Windows server IP through our compromised

00:04:57.666 --> 00:04:58.833
Linux client.

00:05:00.733 --> 00:05:04.933
Before testing this, we need to make a
minor change in our Samba configuration

00:05:04.933 --> 00:05:09.900
file to set the minimum SMB version to
SMBv2,

00:05:25.333 --> 00:05:28.066
and then restart the samba demon,

00:05:31.633 --> 00:05:38.700
We’re doing this because Windows Server
2016 no longer supports SMBv1 by default.

00:05:40.566 --> 00:05:46.033
Now we can try to list the remote shares
on the Windows Server 2016 machine

00:05:46.033 --> 00:05:49.733
by pointing the request to our
Kali machine.

00:05:50.966 --> 00:05:53.833
We will use the the smbclient utility,

00:05:54.433 --> 00:05:57.600
supplying the IP address of our local
machine,

00:05:58.000 --> 00:05:59.933
and the remote user name.

00:06:00.900 --> 00:06:05.133
If everything goes according to plan,
after we enter the remote password,

00:06:09.266 --> 00:06:14.566
all the traffic on that port should be
redirected to the Windows machine,

00:06:15.000 --> 00:06:18.566
and we should be presented with the
available shares.

00:06:20.233 --> 00:06:24.900
Not only was the command successful but
since this traffic was tunneled through

00:06:24.900 --> 00:06:28.966
SSH, the entire transaction was encrypted.

00:06:33.166 --> 00:06:37.733
We can use this port forwarding setup to
continue to analyze the target server

00:06:37.733 --> 00:06:44.033
via port 445, or forward other ports to
perform further enumeration.

00:06:44.033 --> 00:06:45.033
Although we have started an application proxy that can route application traffic to the target network through the SSH tunnel, we must somehow tell our tools how to use this proxy.

00:06:45.033 --> 00:06:46.033


00:06:46.033 --> 00:06:47.033

