WEBVTT

00:00:01.833 --> 00:00:05.233
AV Evasion: Practical Example

00:00:06.433 --> 00:00:10.900
Now that we have a general understanding
of the detection techniques used in

00:00:10.900 --> 00:00:15.100
antivirus software and the relative
bypass methods,

00:00:15.100 --> 00:00:18.633
we can turn our focus to a practical
example.

00:00:19.166 --> 00:00:24.700
Finding a universal solution to bypass
all antivirus products is difficult

00:00:24.700 --> 00:00:28.200
and time consuming, if not impossible.

00:00:28.900 --> 00:00:32.966
Considering time limitations during a
typical penetration test,

00:00:32.966 --> 00:00:37.900
it is far more efficient to target the
specific antivirus product

00:00:37.900 --> 00:00:40.166
deployed in the client network.

00:00:40.966 --> 00:00:46.400
For the purposes of this module, we will
install Avira Free Antivirus

00:00:46.400 --> 00:00:53.633
Version 15.0.34.23 on our Windows 10
client.

00:00:58.166 --> 00:01:03.833
The Avira installer can be found in the
Tools, antivirus evasion directory.

00:01:04.200 --> 00:01:05.500
We’ll launch it...

00:01:16.700 --> 00:01:20.266
...and step through the installation
process.

00:01:56.333 --> 00:02:00.100
Once installed, we can check the
configuration by searching for

00:02:00.100 --> 00:02:04.500
Start Avira Antivirus in the
Windows 10 search bar.

00:02:21.433 --> 00:02:25.566
Launching this application will display
the Avira Control Center

00:02:25.566 --> 00:02:29.233
where we can enable the Real-Time
Protection feature.

00:02:33.400 --> 00:02:38.133
As a first step, we should verify that
the antivirus product is working

00:02:38.133 --> 00:02:39.300
as intended.

00:02:39.766 --> 00:02:43.900
We will use the Meterpreter payload we
generated earlier and attempt to

00:02:43.900 --> 00:02:45.100
execute it.

00:03:03.366 --> 00:03:07.333
In this case we are presented with an
error message indicating that the system

00:03:07.333 --> 00:03:09.500
cannot execute our file.

00:03:11.800 --> 00:03:17.133
Immediately afterwards, Avira displays
a popup notification informing us that

00:03:17.133 --> 00:03:20.933
the file was flagged as malicious and was
quarantined.

00:03:37.433 --> 00:03:41.066
Let's see if we can get this file past
Avira.

00:03:43.533 --> 00:03:46.900
PowerShell In-Memory Injection

00:03:48.233 --> 00:03:51.933
Depending on our target environment and
how restricted it is,

00:03:51.933 --> 00:03:57.200
we might be able to bypass antivirus
products with the help of PowerShell.

00:03:57.666 --> 00:04:01.933
A very powerful feature of PowerShell
is its ability to interact with

00:04:01.933 --> 00:04:03.466
the Windows API.

00:04:03.966 --> 00:04:09.433
This allows us to implement the in-memory
injection process in a PowerShell script.

00:04:10.066 --> 00:04:15.066
One of the main benefits of executing a
script rather than a PE 

00:04:15.066 --> 00:04:19.200
is the fact that it is difficult for
antivirus manufacturers

00:04:19.200 --> 00:04:25.933
to determine if the script is malicious
or not as it's run inside an interpreter

00:04:25.933 --> 00:04:30.133
and the script itself isn’t executable
code.

00:04:31.333 --> 00:04:36.700
Furthermore, even if the script is marked
as malicious, it can easily be altered.

00:04:37.633 --> 00:04:43.366
Antivirus software will often look at
variable names, comments, and logic,

00:04:43.366 --> 00:04:49.400
all of which can be changed in a script
without the need to re-compile anything.

00:05:02.366 --> 00:05:08.400
This is a basic template script that
performs in-memory injection.

00:05:09.000 --> 00:05:12.966
The script starts by importing
VirtualAlloc...

00:05:13.833 --> 00:05:16.533
...and CreateThread...

00:05:17.433 --> 00:05:20.700
...from kernel32.dll...


00:05:22.400 --> 00:05:24.366
...as well as memset...

00:05:25.466 --> 00:05:28.733
...from msvcrt.dll.


00:05:30.266 --> 00:05:35.766
These functions will allow us to allocate
memory, create an execution thread,

00:05:35.766 --> 00:05:41.233
and write arbitrary data to the allocated
memory, respectively.

00:05:41.733 --> 00:05:47.033
The script then allocates a block of
memory using VirtualAlloc,

00:05:48.933 --> 00:05:54.900
takes each byte of the payload stored in
the $sc byte array,

00:05:55.433 --> 00:06:00.933
and writes it to our newly allocated
memory block using memset.

00:06:02.733 --> 00:06:07.833
As a final step, our in-memory written
payload is executed in a separate thread

00:06:07.833 --> 00:06:10.166
using CreateThread.

00:06:11.200 --> 00:06:15.833
Missing from our script is the payload,
which we can generate with msfvenom.

00:06:21.466 --> 00:06:25.633
For consistency, we will use the payload
from the previous example.

00:06:29.466 --> 00:06:34.533
We’ll rename the buf variable from
msfvenom to sc,

00:06:34.533 --> 00:06:41.100
as required by the script, and copy the
resulting output into the final script.

00:06:57.633 --> 00:07:01.600
With our shellcode included, our script
is complete.

00:07:12.933 --> 00:07:15.633
We’ll check our script in VirusTotal.

00:07:43.533 --> 00:07:46.600
According to the results of the
VirusTotal scan,

00:07:46.600 --> 00:07:50.500
only 6 AV products detected our script.

00:07:51.666 --> 00:07:53.500
This is quite promising.

00:08:00.766 --> 00:08:04.000
Next, let’s scan the file with Avira.

00:08:10.966 --> 00:08:15.700
First we transfer our Powershell script
to our Windows client with Netcat.

00:08:51.100 --> 00:08:55.666
Nice. Our Powershell script didn’t
trigger any warnings.

00:09:07.566 --> 00:09:11.333
Unfortunately, when we attempt to run
our malicious script,

00:09:14.500 --> 00:09:18.700
we are presented with an error that
references the Execution Policies

00:09:18.700 --> 00:09:19.966
of our system,

00:09:20.733 --> 00:09:23.933
which appear to prevent our script from
running.

00:09:24.466 --> 00:09:29.366
This is because PowerShell execution
policies are set on a per-user

00:09:29.366 --> 00:09:32.233
rather than per-system basis.

00:09:32.666 --> 00:09:36.766
Let’s attempt to view and change the
policy for our current user.

00:09:49.066 --> 00:09:53.933
Please note that in this instance we have
chosen to change the policy

00:09:53.933 --> 00:09:57.500
than bypass it on a per-script basis,

00:09:57.500 --> 00:10:02.733
which can be achieved by using the
Execution Policy Bypass flag

00:10:02.733 --> 00:10:05.300
for each script when it is run.

00:10:10.300 --> 00:10:14.900
We have successfully changed the policy
for our current user to Unrestricted.

00:10:17.200 --> 00:10:21.100
Before executing our script, we will
start a meterpreter handler

00:10:21.100 --> 00:10:24.900
on our Kali attacker machine to interact
with our shell.

00:10:31.433 --> 00:10:37.366
This Metasploit command uses the -x
option to setup the payload handler,

00:10:37.366 --> 00:10:43.200
remote host, listening host, and payload
type all in one line.

00:10:55.333 --> 00:10:58.033
Now we will try to launch the PowerShell
script.

00:11:09.166 --> 00:11:12.166
The script executes without any problems,

00:11:17.400 --> 00:11:20.900
and we receive a Meterpreter shell on our
attack machine.

00:11:23.900 --> 00:11:24.900
Excellent.

00:11:25.400 --> 00:11:29.200
We have effectively evaded Avira detection
on our target.

00:11:29.933 --> 00:11:35.166
Note that mature organizations often
implement various machine learning

00:11:35.166 --> 00:11:40.100
software in order to analyse the contents
of scripts that are run.

00:11:40.566 --> 00:11:45.533
Depending on the configuration of these
systems and what they consider to be

00:11:45.533 --> 00:11:50.800
harmful, scripts like the one used in
this example may need to be altered or

00:11:50.800 --> 00:11:53.066
adapted for the target environment.

00:12:05.600 --> 00:12:07.200
Shellter

00:12:08.033 --> 00:12:14.600
Shellter is a dynamic shellcode injection
tool and one of the most popular free

00:12:14.600 --> 00:12:18.733
tools capable of bypassing antivirus
software.

00:12:19.400 --> 00:12:25.066
It uses a number of novel and advanced
techniques to essentially backdoor a

00:12:25.066 --> 00:12:31.077
valid and non-malicious executable file
with a malicious shellcode payload.

00:12:31.966 --> 00:12:35.366
While the details of many of these
techniques are beyond the scope

00:12:35.366 --> 00:12:40.166
of this module, Shellter essentially
performs a thorough analysis of the

00:12:40.166 --> 00:12:44.233
target PE file and the execution flows.

00:12:45.100 --> 00:12:48.533
It then determines where it can inject
our shellcode,

00:12:48.533 --> 00:12:51.933
without relying on traditional injection
techniques

00:12:51.933 --> 00:12:54.600
that are easily caught by AV engines.

00:12:55.200 --> 00:12:59.333
Those include changing of PE file section
permissions, 

00:12:59.333 --> 00:13:01.900
creating new sections and so on.

00:13:02.800 --> 00:13:09.800
Finally, Shellter attempts to use the
existing PE Import Address Table entries

00:13:09.800 --> 00:13:13.733
to locate functions that will be used for
the memory allocation,

00:13:13.733 --> 00:13:17.633
transfer, and the execution of our
payload.

00:13:18.666 --> 00:13:23.500
Let’s attempt to bypass our current
antivirus software using Shellter.

00:13:24.033 --> 00:13:28.866
First, we’ll install Shellter in Kali
using apt.

00:13:46.700 --> 00:13:47.800
When executed,

00:13:47.800 --> 00:13:52.666
shellter presents a terminal with a new
console running under wine.

00:13:53.400 --> 00:13:57.900
Shellter can run in either Auto or Manual
mode.

00:13:58.300 --> 00:14:02.766
In Manual mode, it will launch the PE we
want to use for injection

00:14:02.766 --> 00:14:06.600
and allow us to manipulate it on a more
granular level.

00:14:07.500 --> 00:14:11.600
We can use this mode to highly customize
the injection process

00:14:11.600 --> 00:14:14.900
 in case the automatically selected
options fail.

00:14:15.566 --> 00:14:17.866
For the purposes of this example however,

00:14:17.866 --> 00:14:22.966
we’ll run Shellter in Auto mode by
selecting ‘A’ at the prompt.

00:14:25.266 --> 00:14:28.566
Next, we need to select a target PE.

00:14:29.266 --> 00:14:32.966
Shellter will analyze and alter the
execution flow

00:14:32.966 --> 00:14:35.700
to inject and execute our payload.

00:14:36.466 --> 00:14:40.766
For this example, we will use the 32-bit
trial executable installer

00:14:40.766 --> 00:14:45.466
for the popular WinRAR utility as our
target PE,

00:14:53.366 --> 00:14:57.233
which we will obatain from the Rarlab
downloads page.

00:15:21.233 --> 00:15:24.066
We’ll copy the installer to our home
directory.-

00:15:34.833 --> 00:15:38.900
Before analyzing and altering the
original PE in any way,

00:15:38.900 --> 00:15:42.133
shellter first creates a backup of the
file.

00:15:51.200 --> 00:15:55.033
As soon as Shellter finds a suitable
place to inject our payload,

00:15:55.033 --> 00:15:58.666
it will ask us if we want to enable
Stealth Mode,

00:15:58.666 --> 00:16:02.500
which will attempt to restore the execution
flow of the PE

00:16:02.500 --> 00:16:05.000
after our payload has been executed.

00:16:06.766 --> 00:16:11.166
We’ll enable this, allowing the WinRar
installer to complete normally

00:16:11.166 --> 00:16:13.400
which could reduce user suspicion.

00:16:15.933 --> 00:16:19.666
At this point we are presented with the list of available payloads.

00:16:20.023 --> 00:16:23.633
These include popular selections such as
meterpreter,

00:16:23.633 --> 00:16:26.966
but Shellter also supports custom
payloads.

00:16:27.633 --> 00:16:31.900
Note that in order to restore the
execution flow through the Stealth Mode

00:16:31.900 --> 00:16:37.633
option, custom payloads need to terminate
by exiting the current thread.

00:16:38.233 --> 00:16:42.466
Since Avira detected our previously
generated Meterpreter PE,

00:16:42.466 --> 00:16:45.433
we will use the same payload settings here

00:16:45.433 --> 00:16:48.333
to test Shellter’s bypass capabilities.

00:16:49.233 --> 00:16:52.266
We will choose to use a listed payload.

00:16:54.866 --> 00:16:58.700
And we will select the Meterpreter
Reverse TCP payload.

00:17:01.566 --> 00:17:03.400
After selecting the payload,

00:17:03.400 --> 00:17:06.600
we are presented with the default options
from Metasploit,

00:17:06.600 --> 00:17:09.566
such as the reverse shell host,

00:17:11.566 --> 00:17:11.666


00:17:11.666 --> 00:17:13.000
and port.

00:17:14.633 --> 00:17:16.333
With all parameters set,

00:17:16.333 --> 00:17:20.300
Shellter will inject the payload into the
WinRAR installer

00:17:20.300 --> 00:17:23.966
and attempt to reach the first
instruction of the payload.

00:17:31.733 --> 00:17:36.333
The injection is verified, and we are
ready to test the malicious PE.

00:17:42.833 --> 00:17:45.633
We’ll configure a listener on our Kali
machine

00:17:45.633 --> 00:17:47.666
to interact with the meterpreter payload,

00:17:54.433 --> 00:17:57.966
And transfer our PE with Netcat.

00:18:27.500 --> 00:18:31.700
Next, we will manually scan the PE with
Avira.

00:18:40.033 --> 00:18:46.200
Since Shellter obfuscates both the payload
as well as the payload decoder 

00:18:46.200 --> 00:18:48.366
before injecting them into the PE,

00:18:48.366 --> 00:18:52.400
Avira’s signature-based scan runs cleanly.

00:19:05.100 --> 00:19:09.066
Once we execute the file, we are
presented with the default WinRAR

00:19:09.066 --> 00:19:13.866
installation window, and we can complete
the installation without incident.

00:19:29.833 --> 00:19:33.566
Our handler session reveals a valid
Meterpreter session

00:19:33.566 --> 00:19:38.033
but the session appears to die after the
installation completes.

00:19:38.833 --> 00:19:44.000
This makes sense because the installer
execution has completed

00:19:44.000 --> 00:19:46.366
and the process has been terminated.

00:19:46.900 --> 00:19:48.800
In order to overcome this problem,

00:19:48.800 --> 00:19:53.166
we can set up an AutoRunScript to migrate
our Meterpreter

00:19:53.166 --> 00:19:57.200
to a separate process immediately after
session creation.

00:20:01.166 --> 00:20:03.700
Let’s re-run the WinRAR setup.

00:20:23.600 --> 00:20:27.700
After the migration completes, the
session will remain active

00:20:27.700 --> 00:20:31.600
even after the WinRAR
installation process completes.

00:20:33.233 --> 00:20:37.833
Our payload will even run if the WinRar
installation is cancelled.
