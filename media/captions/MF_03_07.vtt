WEBVTT

00:00:01.675 --> 00:00:04.675
Advanced Features and Transports

00:00:05.900 --> 00:00:09.558
With an understanding of the basic
functionality of the Metasploit Framework

00:00:09.558 --> 00:00:14.100
 and the meterpreter, we can proceed
to more advanced options,

00:00:14.100 --> 00:00:17.566
which we can display with the
“show advanced” command.

00:00:23.904 --> 00:00:27.000
Let’s investigate a few of
the more interesting options.

00:00:27.912 --> 00:00:31.900
First, let’s take a look at some
advanced encoding options.

00:00:32.525 --> 00:00:36.033
In previous examples, we
chose to encode the first stage

00:00:36.033 --> 00:00:39.466
of our shellcode that
we placed into the exploit.

00:00:40.116 --> 00:00:43.800
Since the second stage of the
Meterpreter payload is much larger

00:00:43.800 --> 00:00:47.566
and contains signatures that
could possibly trigger Antivirus,

00:00:47.566 --> 00:00:51.000
we may opt to encode this stage as well.

00:00:53.062 --> 00:00:58.966
We could use EnableStageEncoding
together with StageEncoder

00:00:58.966 --> 00:01:03.833
to encode the second stage
and possibly bypass detection.

00:01:04.470 --> 00:01:08.233
To do this, we set
EnableStageEncoding to true,

00:01:11.883 --> 00:01:20.133
and set StageEncoder to our desired
encoder, in this case, x86/shikata_ga_nai:

00:01:23.420 --> 00:01:29.050
The AutoRunScript option is also quite
helpful as it will automatically

00:01:29.050 --> 00:01:32.800
run a script when a meterpreter
connection is established.

00:01:33.412 --> 00:01:36.500
This is very useful during
a client-side attack

00:01:36.500 --> 00:01:40.533
since we may not be available
when a user executes our payload,

00:01:40.533 --> 00:01:45.233
meaning the session
could sit idle or be lost.

00:01:45.945 --> 00:01:51.366
For example, we can configure the
“windows enum logged on users” module

00:01:51.366 --> 00:01:56.366
to automatically enumerate logged-in users
when meterpreter connects:

00:02:01.029 --> 00:02:06.700
Now let’s re-run our binary on the Windows
system and get a new meterpreter session.

00:02:26.500 --> 00:02:30.516
So far, we have navigated within a
Meterpreter session using various

00:02:30.516 --> 00:02:36.200
built-in commands, but we can also
temporarily exit the Meterpreter shell

00:02:36.200 --> 00:02:40.166
to perform other actions inside
the Metasploit Framework,

00:02:40.166 --> 00:02:42.866
without closing down the connection.

00:02:43.841 --> 00:02:48.141
We can use “background” to
return to the msfconsole prompt,

00:02:48.141 --> 00:02:51.333
where we can perform other
actions within the framework.

00:02:55.383 --> 00:02:58.300
When we are ready to return
to our meterpreter session,

00:02:58.300 --> 00:03:03.533
we can list all available
sessions with sessions -l.

00:03:05.958 --> 00:03:11.233
Then we can again interact
with our session with sessions -i

00:03:11.233 --> 00:03:14.866
followed by the respective
Id of the session.

00:03:18.316 --> 00:03:21.441
Using these commands, we can
switch between available shells

00:03:21.441 --> 00:03:27.266
on different compromised hosts without
closing down any of our connections.

00:03:27.841 --> 00:03:32.666
In our previous examples, we have used a
pre-defined communication protocol

00:03:32.666 --> 00:03:37.733
(like TCP or HTTPS) to exploit our target,

00:03:37.733 --> 00:03:40.866
which we chose when we
generated the payload.

00:03:40.866 --> 00:03:44.800
However, we can use Meterpreter
payload transports

00:03:44.800 --> 00:03:49.300
to switch protocols after
our initial compromise.

00:03:49.775 --> 00:03:53.300
Before we see how this works,
let’s background our session

00:03:53.300 --> 00:03:57.766
and unset AutoRunScript
and EnableStageEncoding.

00:04:06.891 --> 00:04:09.766
Now let’s return to our
meterpreter session.

00:04:12.966 --> 00:04:17.100
We can list the currently available
transports for the Meterpreter connection

00:04:17.100 --> 00:04:19.666
with transport list.

00:04:24.216 --> 00:04:27.000
We can also use “transport add”

00:04:27.825 --> 00:04:32.300
to add a new transport protocol to the
current Meterpreter session

00:04:32.300 --> 00:04:36.866
using -t to set the desired
transport type.

00:04:38.116 --> 00:04:42.100
In this example, we will add
the reverse tcp transport,

00:04:42.100 --> 00:04:47.200
which is equivalent to choosing the
reverse tcp meterpreter windows payload.

00:04:47.200 --> 00:04:50.900
We will apply the options for
the specified transport type

00:04:50.900 --> 00:04:55.733
including the local host
IP address with -l,

00:04:56.383 --> 00:05:00.366
and the local port with -p.

00:05:06.291 --> 00:05:08.800
Before we can take advantage
of the new transport,

00:05:08.800 --> 00:05:12.133
we must set up a listener to
accept the connection.

00:05:16.708 --> 00:05:20.866
We’ll do this by once again
using the multi handler module

00:05:20.866 --> 00:05:24.733
and specifying the same
parameters we selected earlier.

00:05:36.583 --> 00:05:40.933
With the multi handler configured, we can
return to the Meterpreter session…

00:05:40.933 --> 00:05:47.700
and run “transport next” to change to the
newly-created transport mode.

00:05:55.100 --> 00:06:00.266
This will create a new Meterpreter session
and close down the old one.

00:06:06.466 --> 00:06:10.133
In this case, we successfully
switched transports,

00:06:10.133 --> 00:06:16.133
created a new meterpreter session,
and shut down the old one.
