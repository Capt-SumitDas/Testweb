WEBVTT

00:00:01.500 --> 00:00:03.966
TCP / UDP Scanning

00:00:05.000 --> 00:00:06.533
We’ll begin our exploration

00:00:06.533 --> 00:00:08.000
of port scanning with a simple

00:00:08.000 --> 00:00:11.800
TCP and UDP port scan using Netcat.

00:00:12.433 --> 00:00:15.666
It should be noted that
Netcat is not a port scanner,

00:00:15.666 --> 00:00:18.600
but it can be used as such
in a rudimetary way.

00:00:19.233 --> 00:00:21.966
Since it’s already present on many systems,

00:00:21.966 --> 00:00:24.533
we can repurpose some of its functionality

00:00:24.533 --> 00:00:26.766
to mimic a basic port scan

00:00:26.766 --> 00:00:30.100
when we are not in a need of
a fully-featured port scanner.

00:00:30.600 --> 00:00:34.333
However, there are far better tools
dedicated to port scanning

00:00:34.333 --> 00:00:36.533
that we will explore in detail as well.

00:00:38.200 --> 00:00:39.800
TCP Scanning

00:00:40.966 --> 00:00:44.000
The simplest TCP port scanning technique,

00:00:44.000 --> 00:00:46.233
usually called CONNECT scanning,

00:00:46.233 --> 00:00:50.400
relies on the three-way
TCP handshake mechanism.

00:00:54.933 --> 00:00:59.500
In basic terms, a host sends
a TCP SYN packet

00:00:59.500 --> 00:01:02.133
to a server on a destination port.

00:01:03.833 --> 00:01:05.900
If the destination port is open,

00:01:05.900 --> 00:01:09.066
the server responds with a SYN-ACK packet

00:01:09.066 --> 00:01:10.700
and the client host

00:01:10.700 --> 00:01:12.433
sends an ACK packet

00:01:12.433 --> 00:01:14.066
to complete the handshake.

00:01:16.700 --> 00:01:20.766
If the handshake completes successfully,
the port is considered open.

00:01:21.400 --> 00:01:24.800
Let’s launch wireshark
so we can inspect our traffic.

00:01:31.200 --> 00:01:36.066
We’ll set a capture filter so we only
collect the traffic we’re interested in.

00:01:43.700 --> 00:01:51.333
Now let’s run a TCP Netcat port
scan on ports 3388-3390.

00:01:57.366 --> 00:02:02.866
The -w option specifies the connection timeout in seconds

00:02:03.167 --> 00:02:07.300
and -z is used to specify zero-I/O mode, which will send no data and is used for scanning:

00:02:07.300 --> 00:02:10.800
which will send no data
and is used for scanning:

00:02:14.796 --> 00:02:19.100
Based on this output,
we can see that port 3389 is open

00:02:19.100 --> 00:02:22.500
while connections on ports 3388

00:02:22.500 --> 00:02:25.066
and 3390 timed out.

00:02:25.776 --> 00:02:28.633
Let’s return to wireshark
and inspect our capture.

00:02:32.575 --> 00:02:36.900
In this capture,
Netcat sent several TCP SYN packets

00:02:36.900 --> 00:02:42.166
to ports 3390, 3389, and 3388

00:02:42.166 --> 00:02:46.333
on lines 1, 3, and 7 respectively.

00:02:47.398 --> 00:02:51.100
Due to a variety of factors,
including timing issues,

00:02:51.100 --> 00:02:54.466
the packets may appear
out of order in Wireshark.

00:02:54.466 --> 00:02:58.600
Notice that the server sent a
TCP SYN-ACK packet

00:02:58.600 --> 00:03:04.100
from port 3389 on line 4,
indicating that the port is open.

00:03:05.629 --> 00:03:09.166
The other ports did not reply
with a similar SYN-ACK packet,

00:03:09.166 --> 00:03:11.966
so we can infer that they are not open.

00:03:12.503 --> 00:03:14.466
Finaly, on line 6,

00:03:14.466 --> 00:03:18.833
Netcat closed down this connection
by sending a FIN-ACK packet.

00:03:31.623 --> 00:03:33.166
UDP Scanning

00:03:34.222 --> 00:03:38.533
Since UDP is stateless and does not
involve a three-way handshake,

00:03:38.533 --> 00:03:43.200
the mechanism behind UDP port scanning
is different from TCP.

00:03:43.200 --> 00:03:49.366
Let’s run a UDP Netcat port scan
against ports 160-162

00:03:49.366 --> 00:03:50.800
on a different target.

00:03:51.195 --> 00:03:55.466
This is done using the only
netcat option we have not seen yet,

00:03:55.466 --> 00:03:59.266
 -u, which indicates a UDP scan.

00:04:09.280 --> 00:04:11.000
From the Wireshark capture,

00:04:11.000 --> 00:04:16.033
we can see that the UDP scan uses
a different mechanism than a TCP scan:

00:04:16.543 --> 00:04:20.400
An empty UDP datagram
was sent to specific ports

00:04:20.400 --> 00:04:24.333
in datagrams 1, 3, 4, and 5.

00:04:26.153 --> 00:04:29.233
If the destination UDP port is open,

00:04:29.233 --> 00:04:32.633
the datagram will be passed
to the application layer

00:04:32.633 --> 00:04:34.500
and the response received

00:04:34.500 --> 00:04:38.100
will depend on how the application is programmed to respond.

00:04:38.705 --> 00:04:39.766
In this example,

00:04:39.766 --> 00:04:42.500
the application sends no response.

00:04:42.959 --> 00:04:46.766
However, if the destination UDP port is closed,

00:04:46.766 --> 00:04:50.700
 the target should respond with an ICMP port unreachable

00:04:50.700 --> 00:04:53.600
(as seen in datagrams 2 and 6),

00:04:54.082 --> 00:04:58.500
that is sent by the IP
stack of the target machine.

00:04:59.519 --> 00:05:04.933
Most UDP scanners tend to use the
standard “ICMP port unreachable” message

00:05:05.188 --> 00:05:08.033
to infer the status of a target port.

00:05:08.734 --> 00:05:12.366
However, this method
can be completely unreliable

00:05:12.366 --> 00:05:15.533
when the target port
is filtered by a firewall.

00:05:16.161 --> 00:05:20.633
In fact, in these cases the scanner
will report the target port as open

00:05:20.633 --> 00:05:23.833
because of the absence
of the ICMP message.

00:05:24.433 --> 00:05:28.433
We'll see later how dedicated
scanners resolve this issue.
