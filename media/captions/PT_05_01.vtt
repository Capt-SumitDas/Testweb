WEBVTT

00:00:01.411 --> 00:00:02.711
Filtering Traffic

00:00:03.929 --> 00:00:06.129
The output is a bit overwhelming at first,

00:00:06.129 --> 00:00:10.829
so let’s try to get a better understanding
of the IP addresses and ports involved

00:00:10.829 --> 00:00:12.829
by using awk and sort.

00:00:16.681 --> 00:00:22.348
First, we’ll use the tcpdump -n option
to skip DNS name lookups

00:00:22.348 --> 00:00:26.048
and -r to read from our
packet capture file.

00:00:27.015 --> 00:00:29.381
Then, we can pipe the
output into awk,

00:00:29.381 --> 00:00:34.748
printing the destination IP address and
port contained in the third field,

00:00:35.548 --> 00:00:40.115
and pipe it again to sort
and uniq -c to sort

00:00:40.115 --> 00:00:44.381
and count the number of times the
field appears in the capture, respectively

00:00:45.133 --> 00:00:49.467
Lastly we use head to only
display the first 10 lines of output.

00:00:51.467 --> 00:00:58.200
We can see that 172.16.40.10 was the most
common destination address

00:00:58.200 --> 00:01:03.700
followed by 208.68.234.99.

00:01:04.600 --> 00:01:10.533
Given that the 172 address was contacted
on a low destination port (port 81)

00:01:10.533 --> 00:01:15.067
and the 208 address was contacted
on high destination ports,

00:01:15.067 --> 00:01:20.467
we can rightly assume that the former
is a server and the latter is a client.

00:01:20.967 --> 00:01:25.300
We could also safely assume that the
client address made many requests 

00:01:25.300 --> 00:01:29.600
against the server, but in order to
proceed without too many assumptions,

00:01:29.600 --> 00:01:33.367
we can use filters to inspect
the traffic more closely.

00:01:35.581 --> 00:01:37.648
In order to filter from
the command line,

00:01:37.648 --> 00:01:43.681
we'll use source host to output only
traffic originating from a given host.

00:01:52.267 --> 00:01:55.267
We can also apply a
destination host filter…

00:01:55.267 --> 00:01:59.067
…to output only traffic destined
for a specific host.

00:02:05.200 --> 00:02:08.533
Or we can filter traffic by port number.

00:02:08.915 --> 00:02:11.215
This can be done by specifying port

00:02:11.215 --> 00:02:14.815
followed by a port number, 
which in our case, is 81.

00:02:17.900 --> 00:02:23.133
This filter displays both source
and destination traffic against port 81.

00:02:24.063 --> 00:02:26.518
Let’s move along and actually
inspect some packets

00:02:26.518 --> 00:02:29.118
in more detail to see what we can uncover.

00:02:31.015 --> 00:02:35.148
To dump the captured traffic,
we’ll use the -X option

00:02:35.148 --> 00:02:39.415
to print the packet data in
both HEX and ASCII format.

00:02:43.896 --> 00:02:48.563
We immediately notice that the
traffic to the 172 address on port 81

00:02:48.563 --> 00:02:50.763
looks like HTTP data.

00:02:51.281 --> 00:02:57.948
In fact, it seems like these HTTP requests
contain Basic HTTP Authentication data,

00:02:57.948 --> 00:03:02.215
with the User agent set to something
about a “Forest Lobster”.

00:03:03.400 --> 00:03:07.033
This is a pretty clear sign that
something strange is occurring.
