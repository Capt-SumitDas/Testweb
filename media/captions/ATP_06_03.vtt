WEBVTT

00:00:01.543 --> 00:00:04.200
Post-Exploitation Enumeration

00:00:05.097 --> 00:00:09.600
After a brief investigation, we quickly
discover that Poultry is running

00:00:09.600 --> 00:00:12.266
McAfee Endpoint Security.

00:00:19.940 --> 00:00:24.033
This means that if we upload and
use any malicious executables,

00:00:24.033 --> 00:00:29.566
we’ll have to be very careful
and ensure we evade the antivirus.

00:00:32.200 --> 00:00:35.833
We’ll begin by gathering some
basic information about the host

00:00:35.833 --> 00:00:41.533
such as the exact build of Windows,
the hostname, local users,

00:00:41.533 --> 00:00:45.066
network information, and
running services.

00:00:54.515 --> 00:00:57.433
We will start by
running systeminfo.

00:01:01.480 --> 00:01:04.866
The output of this command
gives us some great information.

00:01:09.142 --> 00:01:14.456
First, we know that the operating system
version is Windows 7 Professional

00:01:14.456 --> 00:01:17.933
SP1 Build 7601.

00:01:18.849 --> 00:01:23.333
We see that there is a local
user named “poultryadmin”,

00:01:24.115 --> 00:01:30.200
and that this computer is indeed joined
to the “sandbox.local” domain.

00:01:32.586 --> 00:01:39.400
Next, we find that the only ipv4
address on this host is 10.5.5.20.

00:01:40.239 --> 00:01:43.133
Since we were not able
to do a full port scan,

00:01:43.133 --> 00:01:47.400
let’s find out what ports are
open with the netstat command.

00:01:51.809 --> 00:01:55.566
While our earlier port scan
only checked the top 20 ports,

00:01:55.566 --> 00:01:58.533
it still found the primary
ports of interest.

00:01:59.125 --> 00:02:06.433
Ports 49152 and above are the Windows
default dynamic/ephemeral ports

00:02:06.433 --> 00:02:11.100
for establishing TCP connections and
we don’t need to worry about those.

00:02:12.436 --> 00:02:18.566
At this point, we should also check if
alex is part of any administrator groups.

00:02:20.952 --> 00:02:26.566
It seems that the user “alex”
is just a regular domain user.

00:02:26.776 --> 00:02:28.752
With this information stored away,

00:02:28.752 --> 00:02:32.166
we’ll take a look at what
applications are installed.

00:02:35.965 --> 00:02:39.100
Windows does not show very
many applications for this user

00:02:39.100 --> 00:02:40.900
listed in the Start menu.

00:02:41.224 --> 00:02:43.552
While this isn’t a full list,
it gives us a good idea

00:02:43.552 --> 00:02:46.133
of what this computer is used for.

00:02:47.927 --> 00:02:50.156
Based on the information
we have so far,

00:02:50.156 --> 00:02:53.933
it appears that this might
be a user workstation.

00:02:58.896 --> 00:03:01.876
Next, we can take a look at the
services to see if anything

00:03:01.876 --> 00:03:04.166
interesting is running on this box.

00:03:05.292 --> 00:03:09.833
We can use the wmic command
to list all the running services.

00:03:10.482 --> 00:03:15.266
We only want basic information
for now like the name,

00:03:15.266 --> 00:03:19.066
displayname, pathname, and startmode.

00:03:22.731 --> 00:03:24.290
This is great information

00:03:24.290 --> 00:03:27.933
but it's way too much
for us to review manually.

00:03:30.567 --> 00:03:33.766
We will narrow it down to services
that are automatically started

00:03:33.766 --> 00:03:40.033
by piping the wmic command to
findstr to look for the word “auto”.

00:03:40.033 --> 00:03:45.300
We'll also include the /i flag to make
the search case insensitive.

00:03:48.583 --> 00:03:51.900
The output is better, but it’s not ideal.

00:03:53.331 --> 00:03:57.633
We can still take out services that are
started from the c:\windows folder

00:03:57.633 --> 00:04:00.866
to get a list of non-standard services.

00:04:02.317 --> 00:04:07.666
This can be done by piping the command
we have so far into findstr again

00:04:07.666 --> 00:04:15.766
and using the /v flag to ignore anything
that contains the string “c:\windows”.

00:04:18.133 --> 00:04:20.766
Now we have a more manageable list.

00:04:20.766 --> 00:04:25.100
One of the first things that stands
out to us is the Puppet Agent

00:04:25.100 --> 00:04:28.133
has a service path that is not quoted.

00:04:29.717 --> 00:04:34.080
An unquoted search path could potentially
give us elevated permissions

00:04:34.080 --> 00:04:38.566
if the service is running in the
context of a higher privileged user.

00:04:39.349 --> 00:04:45.066
To find out what user runs this service,
we'll examine it in the Services console.

00:04:57.607 --> 00:05:02.133
The Puppet Agent is configured
to run via “Local System”.

00:05:02.133 --> 00:05:07.600
This is great news to us as we might
have a road to privilege escalation.

00:05:13.116 --> 00:05:17.733
At this point, the next step is to check
if the Puppet directory is writable,

00:05:17.733 --> 00:05:22.600
as this is a requirement for us in order
to exploit the unquoted service path.

00:05:22.848 --> 00:05:27.766
We can see what permissions
we have by running icacls.

00:05:30.038 --> 00:05:34.052
According to the output, we have writ
 access to the C:\Puppet folder

00:05:34.052 --> 00:05:37.266
since alex is a member
of the Users group.

00:05:39.366 --> 00:05:42.547
Next, in order to leverage
the unquoted path,

00:05:42.547 --> 00:05:48.066
we need to create a reverse
shell named Current.exe

00:05:48.562 --> 00:05:54.733
that can evade the antivirus
and place it in C:\Puppet.
