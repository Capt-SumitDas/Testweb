WEBVTT

00:00:01.475 --> 00:00:04.833
Metasploit Exploit Multi Handler

00:00:05.633 --> 00:00:10.566
In previous modules, we have used Netcat
to catch standard reverse shells,

00:00:10.566 --> 00:00:15.666
such as those generated by the
windows reverse tcp shell payload.

00:00:16.391 --> 00:00:22.400
However, this is inelegant and may not
work for more advanced Metasploit payloads

00:00:22.750 --> 00:00:27.500
Instead, we should use the
Metasploit multi handler module,

00:00:27.500 --> 00:00:32.300
which works for all single
and multi-stage payloads.

00:00:39.800 --> 00:00:46.200
When using the multi handler module, we
must specify the incoming payload type.

00:00:48.850 --> 00:00:54.000
In this case, we will instruct the
multi handler to expect and accept

00:00:54.000 --> 00:00:59.400
an incoming windows reverse
https Meterpreter payload…

00:01:01.825 --> 00:01:06.333
that will start a first stage listener
on our desired host,

00:01:08.733 --> 00:01:12.500
and port, TCP 443.

00:01:15.175 --> 00:01:18.091
After setting the parameters,
we will run exploit

00:01:18.091 --> 00:01:21.700
to instruct the multi handler
to listen for a connection.

00:01:22.500 --> 00:01:26.300
Once the first stage payload is
accepted by the multi handler,

00:01:26.300 --> 00:01:31.400
the second stage of the payload
will be fed back to the target machine.

00:01:33.775 --> 00:01:37.700
Note that using the exploit
command without parameters

00:01:37.700 --> 00:01:42.000
will block the command
prompt until execution finishes.

00:01:45.675 --> 00:01:50.766
In most cases, it is more
helpful to include the -j flag

00:01:50.766 --> 00:01:56.366
to run the module as a background job
allowing us to continue other work

00:01:56.366 --> 00:01:58.433
while we wait for the connection.

00:02:00.583 --> 00:02:05.200
The jobs command allows us to
view running background jobs.

00:02:11.850 --> 00:02:15.666
With the listener running as a
job, we can display information

00:02:15.666 --> 00:02:20.166
about it using the -i flag
followed by the job ID.

00:02:22.516 --> 00:02:25.333
At this point, the multi/handler
is running

00:02:25.333 --> 00:02:30.266
and listening for an HTTPS
reverse payload connection.

00:02:33.416 --> 00:02:36.100
Now let’s generate a new executable

00:02:36.100 --> 00:02:40.933
containing the windows reverse
https meterpreter payload.

00:02:44.433 --> 00:02:48.766
Next we need to copy the binary
to the Windows 10 workstation.

00:02:49.241 --> 00:02:54.300
We’ll start by setting up a python
webserver listening on port 8000.

00:02:56.750 --> 00:03:01.733
Then we’ll connect to the Windows
10 client via remote desktop.

00:03:12.108 --> 00:03:18.000
Next, we’ll use a powershell one-liner to
download the file from our Kali machine.

00:03:24.758 --> 00:03:29.500
Let’s run wireshark so we can inspect the
connection as it is being established.

00:03:46.250 --> 00:03:50.700
We’ll use a capture filter to only
capture traffic we’re interested in.

00:03:58.875 --> 00:04:01.866
Now we can run our executable payload.

00:04:04.416 --> 00:04:09.300
In our msfconsole tab, we can
see our session being established.

00:04:10.675 --> 00:04:15.700
Back in Wireshark, the traffic looks
like any other HTTPS connection

00:04:15.700 --> 00:04:19.900
and as such may evade basic detection.
