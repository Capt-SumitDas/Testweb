WEBVTT

00:00:01.566 --> 00:00:04.733
Redirecting the Execution Flow

00:00:05.500 --> 00:00:08.933
At this point, we have control of the EIP
register

00:00:08.933 --> 00:00:12.766
and we know that we can fit our shellcode
in a memory space

00:00:12.766 --> 00:00:16.533
that is easily accessible through the ESP
register.

00:00:17.866 --> 00:00:23.600
We also know which characters are safe for
our buffer, and which are not.

00:00:24.066 --> 00:00:28.800
Our next task is to find a way to redirect
the execution flow

00:00:28.800 --> 00:00:31.966
to the shellcode located at the memory
address

00:00:31.966 --> 00:00:36.433
that the ESP register is pointing to at
the time of the crash.

00:00:38.100 --> 00:00:43.633
The most intuitive approach is to try
replacing the Bâ€™s that overwrite EIP

00:00:43.633 --> 00:00:49.033
with the address that pops up in the ESP
register at the time of the crash.

00:00:50.900 --> 00:00:57.500
However, as we mentioned earlier, the
value of ESP changes from crash to crash.

00:00:58.066 --> 00:01:00.100
Stack addresses change often,

00:01:00.100 --> 00:01:03.866
especially in threaded applications such
as SyncBreeze,

00:01:04.233 --> 00:01:09.033
as each thread has its reserved stack
region in memory

00:01:09.033 --> 00:01:11.233
allocated by the operating system.

00:01:11.833 --> 00:01:15.333
Therefore, hard coding a specific stack
address

00:01:15.333 --> 00:01:18.533
would not be a reliable way of reaching
our buffer.
