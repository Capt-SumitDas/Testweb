WEBVTT

00:00:01.313 --> 00:00:04.300
Domain Controller Synchronization

00:00:04.922 --> 00:00:09.033
Another way to achieve persistence
in an Active Directory infrastructure

00:00:09.033 --> 00:00:15.333
is to steal the password hashes for all
administrative users in the domain.

00:00:15.821 --> 00:00:18.300
There are several ways we could do this.

00:00:18.788 --> 00:00:21.800
We could move laterally to
the domain controller 

00:00:21.800 --> 00:00:26.000
and run Mimikatz to dump
the password hash of every user.

00:00:26.437 --> 00:00:33.566
We could also steal a copy
of the NTDS.dit database file,

00:00:33.953 --> 00:00:39.366
which is a copy of all Active Directory
accounts stored on the hard drive.

00:00:40.040 --> 00:00:45.000
While these methods might work fine,
they leave indicators of compromise

00:00:45.000 --> 00:00:48.066
and may require us to upload tools.

00:00:48.655 --> 00:00:52.066
Another option is to abuse
AD functionality itself

00:00:52.066 --> 00:00:55.800
and capture hashes remotely
from a workstation.

00:00:56.220 --> 00:00:59.900
In production environments, domains
typically have more than one

00:00:59.900 --> 00:01:03.400
domain controller to
provide redundancy.

00:01:03.804 --> 00:01:07.466
The Directory Replication
Service Remote Protocol

00:01:07.466 --> 00:01:12.000
uses replication to synchronize
the domain controllers.

00:01:12.454 --> 00:01:16.900
A domain controller may request
an update for a specific object,

00:01:16.900 --> 00:01:20.466
like an account, with a specific API.

00:01:21.039 --> 00:01:25.700
Fortunately for us, when a request is
received for an update, the domain

00:01:25.700 --> 00:01:31.733
controller does not verify that it came
from another known domain controller.

00:01:31.733 --> 00:01:37.800
It only verifies that the associated
SID has the correct privileges.

00:01:38.658 --> 00:01:43.066
If we attempt to issue a rogue
update request to a domain controller

00:01:43.066 --> 00:01:48.700
from a user who is a member of the
Domain Admins group, it will succeed.

00:01:49.424 --> 00:01:55.233
Let’s log in to the Windows 10 client as
jeff_admin to simulate a compromise

00:01:55.233 --> 00:01:59.600
of a domain administrator account
and perform a replication.

00:02:13.693 --> 00:02:15.800
We’ll run Mimikatz,

00:02:19.739 --> 00:02:25.066
and start the replication
using lsadump::dcsync,

00:02:25.605 --> 00:02:30.300
with the /user option to indicate
the target user to sync,

00:02:30.771 --> 00:02:34.866
in this case the built-in domain
administrator account.

00:02:42.376 --> 00:02:45.333
The dump contains multiple hashes

00:02:45.333 --> 00:02:49.966
associated with the last twenty-nine
used user passwords,

00:02:50.404 --> 00:02:53.833
as well as the hashes used
with AES encryption.

00:02:55.096 --> 00:02:59.233
Using this technique, we can request a
replication update with a

00:02:59.233 --> 00:03:04.100
domain controller and obtain the
password hashes of every account

00:03:04.100 --> 00:03:09.400
in Active Directory without ever
logging in to the domain controller.
