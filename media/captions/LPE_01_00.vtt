WEBVTT

00:00:01.608 --> 00:00:02.874
A Word of Caution

00:00:04.174 --> 00:00:08.208
It is important to understand that by
downloading and running public exploits,

00:00:08.208 --> 00:00:12.308
we can greatly endanger any
system which runs that code.

00:00:12.941 --> 00:00:14.041
With that in mind,

00:00:14.041 --> 00:00:18.541
we need to carefully read and
understand the code before execution

00:00:18.541 --> 00:00:21.341
to ensure no negative effects.

00:00:21.741 --> 00:00:27.174
Take, for example, 0pen0wn, which was
published as a remote exploit for SSH.

00:00:28.599 --> 00:00:29.733
While reading the source code,

00:00:29.733 --> 00:00:32.833
we noticed that it was
asking for root privileges,

00:00:32.833 --> 00:00:34.866
which was immediately suspicious.

00:00:35.733 --> 00:00:40.599
Further examination of the payload
revealed an interesting jmpcode array.

00:00:40.966 --> 00:00:43.066
Although it was masked as shellcode, 

00:00:43.066 --> 00:00:48.533
thejmpcode character array was,
in fact, a hex-encoded string

00:00:48.533 --> 00:00:51.099
containing a malicious shell command.

00:01:03.299 --> 00:01:06.533
This single command would
effectively wipe out

00:01:06.533 --> 00:01:09.133
the attacker’s UNIX-based filesystem.

00:01:09.741 --> 00:01:11.208
In the lines that followed,

00:01:11.208 --> 00:01:14.874
the program would connect
to a public IRC server

00:01:14.899 --> 00:01:17.933
to announce the user’s
idiocy to the world,

00:01:17.933 --> 00:01:20.433
making this an extremely dangerous,

00:01:20.433 --> 00:01:23.966
and potentially embarrassing
malicious exploit!

00:01:25.291 --> 00:01:30.691
So if the Internet is riddled with harmful
exploits, where can we find reliable ones?

00:01:32.341 --> 00:01:37.441
The online resources mentioned in this
module analyze the submitted exploit code

00:01:37.441 --> 00:01:39.774
before hosting it online.

00:01:40.141 --> 00:01:43.708
Nevertheless, even when using
these trusted resources,

00:01:43.708 --> 00:01:46.708
it’s important to properly
read the code

00:01:46.733 --> 00:01:50.399
to get a rough idea of what it
will do upon execution.

00:01:50.841 --> 00:01:53.574
Even if you don’t consider
yourself a programmer,

00:01:53.574 --> 00:01:57.241
this is a great way to improve
your code-reading skills

00:01:57.241 --> 00:02:00.508
and may even save you some 
embarrassment one day.
