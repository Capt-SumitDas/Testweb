WEBVTT

00:00:00.666 --> 00:00:04.233
If, Else, Elif Statements


00:00:04.866 --> 00:00:08.300
Conditional statements allow us to 
perform different actions based

00:00:08.300 --> 00:00:09.666
on different conditions.


00:00:10.000 --> 00:00:15.733
The most common conditional Bash 
statements include if, else, and elif.


00:00:15.833 --> 00:00:18.300
The if statement is relatively simple.

00:00:18.666 --> 00:00:24.266
It checks to see if a condition is true–
but it requires a very specific syntax.


00:00:24.666 --> 00:00:29.600
Pay careful attention to this syntax, 
especially the use of required spaces.


00:00:29.733 --> 00:00:33.966
In this example, if “some test” evaluates
as true, 

00:00:33.966 --> 00:00:36.300
the script will “perform an action”, 

00:00:36.300 --> 00:00:40.400
or any commands between then and fi. 

00:00:41.766 --> 00:00:43.800
Let’s look at an actual example.


00:00:49.000 --> 00:00:54.300
In this example, we use an if statement 
to check the age entered by a user.


00:00:55.433 --> 00:00:58.166
If the entered age is less than 16…


00:00:58.166 --> 00:01:01.366
…the script will output a warning message.


00:01:02.900 --> 00:01:06.166
Now let’s make this script executable 
and try it out.


00:01:11.666 --> 00:01:14.666
Great, our age check is working correctly.


00:01:18.033 --> 00:01:20.833
The square brackets we used in the if 
statement are 

00:01:20.833 --> 00:01:23.366
actually a reference to the test 
command.

00:01:23.800 --> 00:01:25.933
This means we can use all of the 
operators 

00:01:25.933 --> 00:01:28.033
that are allowed by the test command.


00:01:28.033 --> 00:01:32.100
Refer to your lab guide for a list of 
some of the available operators.


00:01:33.633 --> 00:01:36.633
With this in mind, our previous example 
using if 

00:01:36.633 --> 00:01:40.066
can be rewritten without square brackets as follows.

00:01:41.400 --> 00:01:44.733
Even though this example is functionally 
equivalent to the one using

00:01:44.733 --> 00:01:49.566
square brackets, the square brackets 
make the code slightly easier to read.

00:01:51.533 --> 00:01:54.000
We can also perform a certain set of 
actions 

00:01:54.000 --> 00:01:58.000
if a statement is true and another set if 
it is false.

00:01:58.233 --> 00:02:02.266
To do this, we can use the else 
statement, which has the following syntax.


00:02:02.533 --> 00:02:06.866
Let’s extend our previous “age” example 
to include the else statement.


00:02:11.100 --> 00:02:14.866
In this script, if the entered age is 16 
or over, 

00:02:14.866 --> 00:02:17.333
a welcome message will be displayed.

00:02:18.133 --> 00:02:21.200
Let’s run this script and make sure it 
works as expected.


00:02:28.933 --> 00:02:32.733
Notice that the else statement was 
executed when the entered age was

00:02:32.733 --> 00:02:37.266
greater than (or more specifically “not 
less than”) sixteen.

00:02:37.400 --> 00:02:42.700
The if and else statements only allow two 
code execution branches.


00:02:42.700 --> 00:02:47.833
We can add additional branches with the 
elif statement which uses this syntax.


00:02:49.800 --> 00:02:54.000
Let’s extend our “age” example again to 
include the elif statement.


00:02:55.800 --> 00:03:00.000
In this example, the code execution flow 
is slightly more complex.


00:03:00.266 --> 00:03:03.466
In order of operation, the … then branch 

00:03:03.466 --> 00:03:07.166
executes if the entered age is less than 
sixteen…

00:03:07.266 --> 00:03:09.900
…the elif branch is entered 

00:03:09.900 --> 00:03:12.266
(and the “Hats off..” message displayed) 

00:03:12.266 --> 00:03:15.133
if the age is greater than sixty…


00:03:15.333 --> 00:03:18.766
…and the else branch executes only if 
the age

00:03:18.766 --> 00:03:22.233
is greater than sixteen but less than 
sixty.

00:03:22.666 --> 00:03:25.966
Let’s try this latest script and see if 
it works.


00:03:34.266 --> 00:03:39.133
Great. Now we have a firm grasp on 
conditional statements in Bash.

